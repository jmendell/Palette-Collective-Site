{"version":3,"sources":["../bower_components/scrollmagic/scrollmagic/uncompressed/ScrollMagic.js","../bower_components/slick-carousel/slick/slick.js","../assets/scripts/extensions/bg-responsive-image.js","../assets/scripts/extensions/form-modal.js","../assets/scripts/extensions/location-selector.js","../assets/scripts/extensions/locations-map.js","../assets/scripts/extensions/menu-click.js","../assets/scripts/extensions/menu.js","../assets/scripts/extensions/mixitup.js","../assets/scripts/extensions/show-hide-menu.js","../assets/scripts/extensions/single-map.js","../assets/scripts/extensions/sliders.js","../assets/scripts/extensions/smooth-scroll.js","../assets/scripts/extensions/sticky-cta.js","../assets/scripts/init.js","../assets/scripts/main.js"],"names":["root","factory","define","amd","exports","module","ScrollMagic","this","_util","log","version","window","addEventListener","PIN_SPACER_ATTRIBUTE","Controller","options","_updateTimeout","_refreshTimeout","NAMESPACE","SCROLL_DIRECTION_FORWARD","SCROLL_DIRECTION_REVERSE","SCROLL_DIRECTION_PAUSED","DEFAULT_OPTIONS","CONTROLLER_OPTIONS","defaults","_options","extend","_sceneObjects","_updateScenesOnNextCycle","_scrollPos","_scrollDirection","_isDocument","_viewPortSize","_enabled","construct","key","hasOwnProperty","container","get","elements","document","body","contains","getViewportSize","onChange","refreshInterval","parseInt","scheduleRefresh","setTimeout","refresh","getScrollPos","vertical","scrollTop","scrollLeft","height","width","setScrollPos","_setScrollPos","pos","scrollTo","updateScenes","scenesToUpdate","type","Array","slice","oldScrollPos","scrollPos","deltaScroll","reverse","forEach","scene","index","length","update","loglevel","debounceUpdate","rAF","e","resizeEvent","Event","bubbles","cancelable","createEvent","initEvent","dispatchEvent","_log","output","prototype","splice","call","arguments","apply","sortScenes","ScenesArray","scenes","sort","a","b","scrollOffset","addScene","newScene","Scene","controller","addTo","indexOf","push","on","globalSceneOptions","removeScene","off","remove","updateScene","immediately","scrollTarget","additionalParameter","Number","Function","elem","parentNode","hasAttribute","param","containerOffset","offset","elementOffset","scrollPosMethod","info","about","values","size","scrollDirection","isDocument","undefined","newLoglevel","enabled","newState","destroy","resetScenes","clearTimeout","i","removeEventListener","cAF","addOption","name","defaultValue","extension","oldClass","$super","constructor","_durationUpdateMethod","_controller","SCENE_STATE_BEFORE","SCENE_STATE_DURING","SCENE_STATE_AFTER","SCENE_OPTIONS","_state","_progress","_scrollOffset","start","end","_triggerPos","optionName","addSceneOption","validateOption","_listeners","names","callback","trim","split","fullname","nameparts","eventname","namespace","removeList","Object","keys","list","listener","trigger","vars","listeners","what","updateTriggerElementPosition","updateScrollOffset","updateDuration","onContainerResize","tmpParent","reset","newProgress","duration","startPos","endPos","progress","_pin","updatePinState","doUpdate","oldState","reverseOrForward","eventVars","state","stateChanged","eventName","triggerElement","triggerHook","suppressEvents","varname","changeOption","newval","reason","elementPos","telem","controllerInfo","changed","_validate","validate","val","String","match","perc","parseFloat","check","value","logMSG","unshift","message","oldval","newVal","shifts","triggerPosition","_pinOptions","durationChanged","updatePinDimensions","removePin","forceUnpin","containerInfo","pinTarget","spacer","firstChild","newCSS","position","inFlow","top","left","change","css","pushFollowers","fixedPos","scrollDistance","Math","round","during","marginCollapse","isMarginCollapseType","relSize","autoFullWidth","updatePinInContainer","updateRelativePinSpacer","onMousewheelOverPin","preventDefault","wheelDelta","detail","setPin","element","settings","defaultSettings","spacerClass","parentDisplay","style","display","boundsParams","pinCSS","concat","sizeCSS","insertBefore","createElement","spacerCSS","boxSizing","mozBoxSizing","webkitBoxSizing","setAttribute","addClass","___origStyle","pinInlineCSS","copyStyles","appendChild","margin","bottom","right","margins","removeChild","_cssClasses","_cssClassElems","removeClassToggle","setClassToggle","classes","elems","toggle","removeClass","translate","onCenter","onEnter","onLeave","max","min","validationCallback","target","currentTarget","timeStamp","timestamp","Date","now","U","floatval","number","_getComputedStyle","currentStyle","getComputedStyle","_dimension","which","outer","includeMargin","_type","DomElement","charAt","toUpperCase","substr","toLowerCase","dimension","marginTop","marginBottom","marginLeft","marginRight","_camelCase","str","replace","g","obj","lastTime","vendors","_requestAnimationFrame","requestAnimationFrame","_cancelAnimationFrame","cancelAnimationFrame","currTime","getTime","timeToCall","id","bind","loglevels","console","method","time","getHours","getMinutes","getSeconds","getMilliseconds","args","func","v","toString","isArray","o","HTMLElement","nodeType","nodeName","_get","selector","arr","querySelectorAll","ref","pageYOffset","pageXOffset","relativeToViewport","getBoundingClientRect","rect","classname","classList","add","className","RegExp","join","option","addIndicators","removeIndicators","setTween","removeTween","setVelocity","removeVelocity","require","jQuery","$","Slick","dataSettings","_","accessibility","adaptiveHeight","appendArrows","appendDots","arrows","asNavFor","prevArrow","nextArrow","autoplay","autoplaySpeed","centerMode","centerPadding","cssEase","customPaging","slider","text","dots","dotsClass","draggable","easing","edgeFriction","fade","focusOnSelect","infinite","initialSlide","lazyLoad","mobileFirst","pauseOnHover","pauseOnFocus","pauseOnDotsHover","respondTo","responsive","rows","rtl","slide","slidesPerRow","slidesToShow","slidesToScroll","speed","swipe","swipeToSlide","touchMove","touchThreshold","useCSS","useTransform","variableWidth","verticalSwiping","waitForAnimate","zIndex","initials","animating","dragging","autoPlayTimer","currentDirection","currentLeft","currentSlide","direction","$dots","listWidth","listHeight","loadIndex","$nextArrow","$prevArrow","slideCount","slideWidth","$slideTrack","$slides","sliding","slideOffset","swipeLeft","$list","touchObject","transformsEnabled","unslicked","activeBreakpoint","animType","animProp","breakpoints","breakpointSettings","cssTransitions","focussed","interrupted","hidden","paused","positionProp","rowCount","shouldClick","$slider","$slidesCache","transformType","transitionType","visibilityChange","windowWidth","windowTimer","data","originalSettings","mozHidden","webkitHidden","autoPlay","proxy","autoPlayClear","autoPlayIterator","changeSlide","clickHandler","selectHandler","setPosition","swipeHandler","dragHandler","keyHandler","instanceUid","htmlExpr","registerBreakpoints","init","activateADA","find","attr","aria-hidden","tabindex","addSlide","slickAdd","markup","addBefore","unload","appendTo","eq","insertAfter","prependTo","children","detach","append","each","reinit","animateHeight","targetHeight","outerHeight","animate","animateSlide","targetLeft","animProps","animStart","step","ceil","complete","applyTransition","disableTransition","getNavTarget","not","slick","slideHandler","transition","setInterval","clearInterval","slideTo","buildArrows","removeAttr","test","aria-disabled","buildDots","dot","getDotCount","first","buildOut","wrapAll","parent","wrap","setupInfinite","updateDots","setSlideClasses","buildRows","c","newSlides","numOfSlides","originalSlides","slidesPerSection","createDocumentFragment","row","empty","checkResponsive","initial","forceUpdate","breakpoint","targetBreakpoint","respondToWidth","triggerBreakpoint","sliderWidth","innerWidth","unslick","event","dontAnimate","indexOffset","unevenOffset","$target","is","closest","checkNavigable","navigables","prevNavigable","getNavigableIndexes","n","cleanUpEvents","interrupt","visibility","cleanUpSlideEvents","orientationChange","resize","cleanUpRows","stopImmediatePropagation","stopPropagation","fadeSlide","slideIndex","opacity","fadeSlideOut","filterSlides","slickFilter","filter","focusHandler","$sf","getCurrent","slickCurrentSlide","breakPoint","counter","pagerQty","getLeft","verticalHeight","targetSlide","verticalOffset","floor","offsetLeft","outerWidth","getOption","slickGetOption","indexes","getSlick","getSlideCount","slidesTraversed","swipedSlide","centerOffset","abs","goTo","slickGoTo","creation","hasClass","setProps","startLoad","loadSlider","initializeEvents","updateArrows","initADA","role","aria-describedby","aria-selected","aria-controls","initArrowEvents","initDotEvents","initSlideEvents","action","initUI","show","tagName","keyCode","loadImages","imagesScope","image","imageSource","imageToLoad","onload","onerror","src","loadRange","cloneRange","rangeStart","rangeEnd","progressiveLazyLoad","next","slickNext","pause","slickPause","play","slickPlay","postSlide","prev","slickPrev","tryCount","$imgsToLoad","initializing","lastVisibleIndex","currentBreakpoint","l","responsiveSettings","windowDelay","removeSlide","slickRemove","removeBefore","removeAll","setCSS","x","y","positionProps","setDimensions","padding","setFade","setHeight","setOption","slickSetOption","item","opt","bodyStyle","WebkitTransition","MozTransition","msTransition","OTransform","perspectiveProperty","webkitPerspective","MozTransform","MozPerspective","webkitTransform","msTransform","transform","allSlides","remainder","infiniteCount","clone","targetElement","parents","sync","animSlide","oldSlide","slideLeft","navTarget","hide","swipeDirection","xDist","yDist","r","swipeAngle","startX","curX","startY","curY","atan2","PI","swipeEnd","swipeLength","edgeHit","minSwipe","fingerCount","originalEvent","touches","swipeStart","swipeMove","curLeft","positionOffset","pageX","clientX","pageY","clientY","sqrt","pow","unfilterSlides","slickUnfilter","fromBreakpoint","fn","ret","bgResponsiveImage","$c","activeClass","_o","$p","debounce","isMobile","_InitObjects","_GetSizes","_CheckImageChange","nSrc","m","d","cSrc","prop","_LoadImage","$img","load","_OnResize","_BindEvents","plugin","formModal","_ShowModal","fadeIn","_HideModal","fadeOut","click","keyup","locationSelector","_Reset","html","_Populate","locations","$pc","locationCollection","gMap","mapStyles","featureType","elementType","stylers","saturation","color","lightness","weight","_InitMap","map","google","maps","Map","getElementById","center","lat","lng","zoom","scrollwheel","styles","_AddMarkers","bounds","LatLngBounds","long","coords","LatLng","Marker","fitBounds","panToBounds","menuClick","_BindClick","unbind","url","location","href","ready","menu","_Open","_Close","mixitup","h","VENDORS","canary","nextElementSibling","defineProperty","Element","el","nextSibling","ElementPrototype","matches","machesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","parentElement","hasDontEnumBug","dontEnums","dontEnumsLength","propertyIsEnumerable","result","TypeError","arg","create","Temp","propertiesObject","defineProperties","__proto__","searchElement","k","t","len","Infinity","oThis","aArgs","self","FNOP","fBound","fireEvent","err","config","foreignDoc","returnCollection","instance","facade","doc","instances","isElement","Error","messages","errorFactoryInvalidContainer","errorFactoryContainerNotFound","randomHex","Mixer","debug","showWarnings","warn","warningFactoryPreexistingInstance","attach","Facade","enable","Collection","use","Base","callActions","TYPE","extensions","NAME","jquery","libraries","cls","reg","destination","source","deep","handleErrors","sourceKeys","handleExtendError","re","erroneous","suggestion","probableMatch","mostMatchingChars","exec","errorConfigInvalidPropertySuggestion","errorConfigInvalidProperty","template","dynamics","useCapture","attachEvent","detachEvent","getCustomEvent","eventType","CustomEvent","initCustomEvent","createEventObject","returnValue","cancelBubble","getOriginalEvent","changedTouches","previousElementSibling","camelCase","$1","pascalCase","dashCase","defaultView","htmlString","frag","temp","innerHTML","removeWhitespace","node","deleting","previousSibling","isEqualArray","deepEquals","arrayShuffle","oldArray","newArray","p","random","arrayFromList","wait","immediate","timeout","callNow","later","xPosition","yPosition","offsetParent","offsetTop","getHypotenuse","node1","node2","distanceX","distanceY","getIntersectionRatio","box1","box2","controlArea","intersectionX","intersectionY","intersectionArea","ratio","closestParent","includeSelf","tempId","randomHexKey","removeAttribute","clean","originalArray","cleanArray","defer","deferred","promiseWrapper","Deferred","features","has","promises","promise","Promise","resolve","reject","warningNoPromiseImplementation","all","tasks","when","done","getPrefix","property","prefix","getDocumentState","docHeight","documentElement","scrollHeight","docWidth","scrollWidth","viewportHeight","clientHeight","viewportWidth","clientWidth","isVisible","seal","freeze","compareVersions","control","specimen","controlParts","specimenParts","controlPart","specimenPart","isEmptyObject","getClassname","classNames","elementName","modifier","block","delineatorElement","delineatorModifier","getProperty","stringKey","parts","returnCurrent","current","actionName","hooks","actions","extensionName","callFilters","filterName","input","filters","BaseStatic","registerAction","hookName","registerFilter","Features","boxSizingPrefix","transformPrefix","transitionPrefix","transformProp","transformRule","transitionProp","perspectiveProp","perspectiveOriginProp","Has","BOX_SIZING_PROP","TRANSITION_PROP","TRANSFORM_PROP","PERSPECTIVE_PROP","PERSPECTIVE_ORIGIN_PROP","TWEENABLE","setPrefixes","runTests","transitions","boxSizingProp","ConfigAnimation","effects","effectsIn","effectsOut","applyPerspective","perspectiveDistance","perspectiveOrigin","queue","queueLimit","animateResizeContainer","animateResizeTargets","staggerSequence","reverseOut","nudge","clampHeight","clampWidth","ConfigBehavior","liveSort","ConfigCallbacks","onMixStart","onMixBusy","onMixEnd","onMixFail","onMixClick","ConfigControls","live","scope","toggleLogic","toggleDefault","ConfigClassNames","elementContainer","elementFilter","elementSort","elementMultimix","elementToggle","modifierActive","modifierDisabled","modifierFailed","ConfigData","uidKey","dirtyCheck","ConfigDebug","fauxAsync","ConfigLayout","allowNestedTargets","containerClassName","siblingBefore","siblingAfter","ConfigLoad","dataset","ConfigSelectors","ConfigRender","ConfigTemplates","Config","animation","behavior","callbacks","controls","layout","selectors","render","templates","MixerDom","targets","UiClassNames","base","active","disabled","CommandDataset","CommandMultimix","insert","changeLayout","CommandFilter","collection","CommandSort","sortString","attribute","order","CommandInsert","sibling","CommandRemove","CommandChangeLayout","ControlDefinition","controlDefinitions","Control","bound","pending","status","canDisable","handler","disable","getAttribute","bindClick","isBound","mixer","addBinding","removeBinding","removeIndex","unbindClick","renderStatus","handleClick","button","isActive","command","commands","dom","lastClicked","events","fire","toggleOff","toggleOn","multimix","toggleArray","updateLive","parseStatusChange","controlButtons","alias","StyleData","scale","TransformData","translateX","translateY","translateZ","rotateX","rotateY","rotateZ","unit","TransformDefaults","transformDefaults","EventDetail","futureState","Events","mixStart","mixBusy","mixEnd","mixFail","mixClick","eventDetail","State","QueueItem","instruction","isToggling","isBusy","incPadding","origOrder","cache","targetsMoved","targetsImmovable","targetsBound","targetsDone","staggerDuration","transformIn","transformOut","lastOperation","userCallback","userDeferred","sanitizeConfig","cacheDom","indexTargets","getInitialState","toHide","initControls","updateControls","activeFilter","activeSort","buildToggleArray","parseEffects","operation","Operation","activeContainerClassName","errorConfigDataUidKeyNotSet","startDataset","newDataset","activeDataset","startContainerClassName","newContainerClassName","parseFilterArgs","parseSortArgs","totalTargets","newSort","sortOperation","printSort","newOrder","startOrder","startFilter","newFilter","startSort","filterOperation","buildState","querySelector","errorDatasetPrerenderedMismatch","Target","isInDom","definition","controlElements","delagators","j","errorConfigInvalidControlsScope","getControl","getToggleSelector","delineator","toggleSelector","activeFilterSelector","splitCompoundSelector","compoundSelector","partials","shift","buildSortString","insertTargets","insertionIndex","getNextSibling","errorInsertPreexistingElement","createTextNode","testResult","evaluateHideShow","toRemove","toShow","matching","hasFailed","isShown","compare","willSort","attrA","getAttributeValue","attrB","isNaN","warningInconsistentSortingAttributes","isResetting","whitespace","lastChild","childNodes","parseSortString","rules","rule","transformName","parseEffect","effectName","effectString","isOut","propIndex","units","errorConfigInvalidAnimationEffects","substring","totalShow","totalHide","totalMatching","goMix","shouldAnimate","willChangeLayout","startState","docState","startHeight","newHeight","viewportDeltaY","startWidth","newWidth","viewportDeltaX","overflow","moveTargets","cleanUp","getStartMixData","parentStyle","parentRect","getPosData","showPosData","startPosData","toHidePosData","paddingTop","paddingBottom","borderTop","borderBottom","paddingLeft","paddingRight","borderLeft","borderRight","setInter","getInterMixData","interPosData","setFinal","getFinalMixData","finalPosData","newX","newY","getTweenData","posData","effectNames","getOwnPropertyNames","effect","widthChange","heightChange","posIn","posOut","tweenData","moveData","statusChange","willTransition","staggerIndex","checkProgress","IMoveData","hasEffect","move","ContainerClassName","EFFECTABLES","whitespaceBefore","whitespaceAfter","nextInQueue","parseMultimixArgs","UserInstruction","parseInsertArgs","parseRemoveArgs","parseChangeLayoutArgs","errorFilterInvalidArguments","errorInsertInvalidArguments","warningInsertNoElements","warningRemoveNoElements","parseDatasetArgs","queueMix","queueItem","warningMultimixInstanceQueueFull","getDataOperation","errorDatasetNotSet","diffDatasets","persistantStartIds","persistantNewIds","insertedTargets","nextEl","uids","errorDatasetInvalidUidKey","errorDatasetDuplicateUid","uid","unbindEvents","replaceChild","bindEvents","lastElementChild","insertDatasetFrag","insertAt","from","sortCommandA","sortCommandB","isMixing","getOperation","multimixCommand","sortCommand","filterCommand","changeLayoutCommand","removeCommand","insertCommand","warningGetOperationInstanceBusy","tween","multiplier","toHideIndex","applyTween","prepend","getConfig","configure","getState","forceRefresh","forceRender","TargetDom","isExcluded","errorDatasetRendererNotSet","firstElementChild","getSortString","attributeName","applyStylesIn","applyStylesOut","propertyName","currentTransformValues","currentValues","isFading","transformValues","transitionRules","isResizing","writeTransitionRule","delay","getDelay","transitionString","handleTransitionEnd","propName","canResize","eventBus","transitionEndEvent","getBox","methodName","toMove","startDisplay","newDisplay","Messages","ERROR_FACTORY_INVALID_CONTAINER","ERROR_FACTORY_CONTAINER_NOT_FOUND","ERROR_CONFIG_INVALID_ANIMATION_EFFECTS","ERROR_CONFIG_INVALID_CONTROLS_SCOPE","ERROR_CONFIG_INVALID_PROPERTY","ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION","ERROR_CONFIG_DATA_UID_KEY_NOT_SET","ERROR_DATASET_INVALID_UID_KEY","ERROR_DATASET_DUPLICATE_UID","ERROR_INSERT_INVALID_ARGUMENTS","ERROR_INSERT_PREEXISTING_ELEMENT","ERROR_FILTER_INVALID_ARGUMENTS","ERROR_DATASET_NOT_SET","ERROR_DATASET_PRERENDERED_MISMATCH","ERROR_DATASET_RENDERER_NOT_SET","WARNING_FACTORY_PREEXISTING_INSTANCE","WARNING_INSERT_NO_ELEMENTS","WARNING_REMOVE_NO_ELEMENTS","WARNING_MULTIMIX_INSTANCE_QUEUE_FULL","WARNING_GET_OPERATION_INSTANCE_BUSY","WARNING_NO_PROMISE_IMPLEMENTATION","WARNING_INCONSISTENT_SORTING_ATTRIBUTES","compileTemplates","errorKey","errorMessage","CORE_VERSION","hideShowMenu","_TitleAtt","title","siblings","slideToggle","singleGMap","_AddMarker","nextSlide","credit","pathname","hostname","hash","getDuration","checkWidth","Sage","common","finalize","home","about_us","UTIL","funcname","loadEvents","classnm"],"mappings":"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","file":"main.js","sourcesContent":["/*!\n * ScrollMagic v2.0.5 (2015-04-29)\n * The javascript library for magical scroll interactions.\n * (c) 2015 Jan Paepke (@janpaepke)\n * Project Website: http://scrollmagic.io\n * \n * @version 2.0.5\n * @license Dual licensed under MIT license and GPL.\n * @author Jan Paepke - e-mail@janpaepke.de\n *\n * @file ScrollMagic main library.\n */\n/**\n * @namespace ScrollMagic\n */\n(function (root, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\t// AMD. Register as an anonymous module.\n\t\tdefine(factory);\n\t} else if (typeof exports === 'object') {\n\t\t// CommonJS\n\t\tmodule.exports = factory();\n\t} else {\n\t\t// Browser global\n\t\troot.ScrollMagic = factory();\n\t}\n}(this, function () {\n\t\"use strict\";\n\n\tvar ScrollMagic = function () {\n\t\t_util.log(2, '(COMPATIBILITY NOTICE) -> As of ScrollMagic 2.0.0 you need to use \\'new ScrollMagic.Controller()\\' to create a new controller instance. Use \\'new ScrollMagic.Scene()\\' to instance a scene.');\n\t};\n\n\tScrollMagic.version = \"2.0.5\";\n\n\t// TODO: temporary workaround for chrome's scroll jitter bug\n\twindow.addEventListener(\"mousewheel\", function () {});\n\n\t// global const\n\tvar PIN_SPACER_ATTRIBUTE = \"data-scrollmagic-pin-spacer\";\n\n\t/**\n\t * The main class that is needed once per scroll container.\n\t *\n\t * @class\n\t *\n\t * @example\n\t * // basic initialization\n\t * var controller = new ScrollMagic.Controller();\n\t *\n\t * // passing options\n\t * var controller = new ScrollMagic.Controller({container: \"#myContainer\", loglevel: 3});\n\t *\n\t * @param {object} [options] - An object containing one or more options for the controller.\n\t * @param {(string|object)} [options.container=window] - A selector, DOM object that references the main container for scrolling.\n\t * @param {boolean} [options.vertical=true] - Sets the scroll mode to vertical (`true`) or horizontal (`false`) scrolling.\n\t * @param {object} [options.globalSceneOptions={}] - These options will be passed to every Scene that is added to the controller using the addScene method. For more information on Scene options see {@link ScrollMagic.Scene}.\n\t * @param {number} [options.loglevel=2] Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.\n\t ** `0` => silent\n\t ** `1` => errors\n\t ** `2` => errors, warnings\n\t ** `3` => errors, warnings, debuginfo\n\t * @param {boolean} [options.refreshInterval=100] - Some changes don't call events by default, like changing the container size or moving a scene trigger element.  \n\t This interval polls these parameters to fire the necessary events.  \n\t If you don't use custom containers, trigger elements or have static layouts, where the positions of the trigger elements don't change, you can set this to 0 disable interval checking and improve performance.\n\t *\n\t */\n\tScrollMagic.Controller = function (options) {\n/*\n\t * ----------------------------------------------------------------\n\t * settings\n\t * ----------------------------------------------------------------\n\t */\n\t\tvar\n\t\tNAMESPACE = 'ScrollMagic.Controller',\n\t\t\tSCROLL_DIRECTION_FORWARD = 'FORWARD',\n\t\t\tSCROLL_DIRECTION_REVERSE = 'REVERSE',\n\t\t\tSCROLL_DIRECTION_PAUSED = 'PAUSED',\n\t\t\tDEFAULT_OPTIONS = CONTROLLER_OPTIONS.defaults;\n\n/*\n\t * ----------------------------------------------------------------\n\t * private vars\n\t * ----------------------------------------------------------------\n\t */\n\t\tvar\n\t\tController = this,\n\t\t\t_options = _util.extend({}, DEFAULT_OPTIONS, options),\n\t\t\t_sceneObjects = [],\n\t\t\t_updateScenesOnNextCycle = false,\n\t\t\t// can be boolean (true => all scenes) or an array of scenes to be updated\n\t\t\t_scrollPos = 0,\n\t\t\t_scrollDirection = SCROLL_DIRECTION_PAUSED,\n\t\t\t_isDocument = true,\n\t\t\t_viewPortSize = 0,\n\t\t\t_enabled = true,\n\t\t\t_updateTimeout, _refreshTimeout;\n\n/*\n\t * ----------------------------------------------------------------\n\t * private functions\n\t * ----------------------------------------------------------------\n\t */\n\n\t\t/**\n\t\t * Internal constructor function of the ScrollMagic Controller\n\t\t * @private\n\t\t */\n\t\tvar construct = function () {\n\t\t\tfor (var key in _options) {\n\t\t\t\tif (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n\t\t\t\t\tlog(2, \"WARNING: Unknown option \\\"\" + key + \"\\\"\");\n\t\t\t\t\tdelete _options[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\t_options.container = _util.get.elements(_options.container)[0];\n\t\t\t// check ScrollContainer\n\t\t\tif (!_options.container) {\n\t\t\t\tlog(1, \"ERROR creating object \" + NAMESPACE + \": No valid scroll container supplied\");\n\t\t\t\tthrow NAMESPACE + \" init failed.\"; // cancel\n\t\t\t}\n\t\t\t_isDocument = _options.container === window || _options.container === document.body || !document.body.contains(_options.container);\n\t\t\t// normalize to window\n\t\t\tif (_isDocument) {\n\t\t\t\t_options.container = window;\n\t\t\t}\n\t\t\t// update container size immediately\n\t\t\t_viewPortSize = getViewportSize();\n\t\t\t// set event handlers\n\t\t\t_options.container.addEventListener(\"resize\", onChange);\n\t\t\t_options.container.addEventListener(\"scroll\", onChange);\n\n\t\t\t_options.refreshInterval = parseInt(_options.refreshInterval) || DEFAULT_OPTIONS.refreshInterval;\n\t\t\tscheduleRefresh();\n\n\t\t\tlog(3, \"added new \" + NAMESPACE + \" controller (v\" + ScrollMagic.version + \")\");\n\t\t};\n\n\t\t/**\n\t\t * Schedule the next execution of the refresh function\n\t\t * @private\n\t\t */\n\t\tvar scheduleRefresh = function () {\n\t\t\tif (_options.refreshInterval > 0) {\n\t\t\t\t_refreshTimeout = window.setTimeout(refresh, _options.refreshInterval);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Default function to get scroll pos - overwriteable using `Controller.scrollPos(newFunction)`\n\t\t * @private\n\t\t */\n\t\tvar getScrollPos = function () {\n\t\t\treturn _options.vertical ? _util.get.scrollTop(_options.container) : _util.get.scrollLeft(_options.container);\n\t\t};\n\n\t\t/**\n\t\t * Returns the current viewport Size (width vor horizontal, height for vertical)\n\t\t * @private\n\t\t */\n\t\tvar getViewportSize = function () {\n\t\t\treturn _options.vertical ? _util.get.height(_options.container) : _util.get.width(_options.container);\n\t\t};\n\n\t\t/**\n\t\t * Default function to set scroll pos - overwriteable using `Controller.scrollTo(newFunction)`\n\t\t * Make available publicly for pinned mousewheel workaround.\n\t\t * @private\n\t\t */\n\t\tvar setScrollPos = this._setScrollPos = function (pos) {\n\t\t\tif (_options.vertical) {\n\t\t\t\tif (_isDocument) {\n\t\t\t\t\twindow.scrollTo(_util.get.scrollLeft(), pos);\n\t\t\t\t} else {\n\t\t\t\t\t_options.container.scrollTop = pos;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (_isDocument) {\n\t\t\t\t\twindow.scrollTo(pos, _util.get.scrollTop());\n\t\t\t\t} else {\n\t\t\t\t\t_options.container.scrollLeft = pos;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Handle updates in cycles instead of on scroll (performance)\n\t\t * @private\n\t\t */\n\t\tvar updateScenes = function () {\n\t\t\tif (_enabled && _updateScenesOnNextCycle) {\n\t\t\t\t// determine scenes to update\n\t\t\t\tvar scenesToUpdate = _util.type.Array(_updateScenesOnNextCycle) ? _updateScenesOnNextCycle : _sceneObjects.slice(0);\n\t\t\t\t// reset scenes\n\t\t\t\t_updateScenesOnNextCycle = false;\n\t\t\t\tvar oldScrollPos = _scrollPos;\n\t\t\t\t// update scroll pos now instead of onChange, as it might have changed since scheduling (i.e. in-browser smooth scroll)\n\t\t\t\t_scrollPos = Controller.scrollPos();\n\t\t\t\tvar deltaScroll = _scrollPos - oldScrollPos;\n\t\t\t\tif (deltaScroll !== 0) { // scroll position changed?\n\t\t\t\t\t_scrollDirection = (deltaScroll > 0) ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_REVERSE;\n\t\t\t\t}\n\t\t\t\t// reverse order of scenes if scrolling reverse\n\t\t\t\tif (_scrollDirection === SCROLL_DIRECTION_REVERSE) {\n\t\t\t\t\tscenesToUpdate.reverse();\n\t\t\t\t}\n\t\t\t\t// update scenes\n\t\t\t\tscenesToUpdate.forEach(function (scene, index) {\n\t\t\t\t\tlog(3, \"updating Scene \" + (index + 1) + \"/\" + scenesToUpdate.length + \" (\" + _sceneObjects.length + \" total)\");\n\t\t\t\t\tscene.update(true);\n\t\t\t\t});\n\t\t\t\tif (scenesToUpdate.length === 0 && _options.loglevel >= 3) {\n\t\t\t\t\tlog(3, \"updating 0 Scenes (nothing added to controller)\");\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Initializes rAF callback\n\t\t * @private\n\t\t */\n\t\tvar debounceUpdate = function () {\n\t\t\t_updateTimeout = _util.rAF(updateScenes);\n\t\t};\n\n\t\t/**\n\t\t * Handles Container changes\n\t\t * @private\n\t\t */\n\t\tvar onChange = function (e) {\n\t\t\tlog(3, \"event fired causing an update:\", e.type);\n\t\t\tif (e.type == \"resize\") {\n\t\t\t\t// resize\n\t\t\t\t_viewPortSize = getViewportSize();\n\t\t\t\t_scrollDirection = SCROLL_DIRECTION_PAUSED;\n\t\t\t}\n\t\t\t// schedule update\n\t\t\tif (_updateScenesOnNextCycle !== true) {\n\t\t\t\t_updateScenesOnNextCycle = true;\n\t\t\t\tdebounceUpdate();\n\t\t\t}\n\t\t};\n\n\t\tvar refresh = function () {\n\t\t\tif (!_isDocument) {\n\t\t\t\t// simulate resize event. Only works for viewport relevant param (performance)\n\t\t\t\tif (_viewPortSize != getViewportSize()) {\n\t\t\t\t\tvar resizeEvent;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tresizeEvent = new Event('resize', {\n\t\t\t\t\t\t\tbubbles: false,\n\t\t\t\t\t\t\tcancelable: false\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (e) { // stupid IE\n\t\t\t\t\t\tresizeEvent = document.createEvent(\"Event\");\n\t\t\t\t\t\tresizeEvent.initEvent(\"resize\", false, false);\n\t\t\t\t\t}\n\t\t\t\t\t_options.container.dispatchEvent(resizeEvent);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_sceneObjects.forEach(function (scene, index) { // refresh all scenes\n\t\t\t\tscene.refresh();\n\t\t\t});\n\t\t\tscheduleRefresh();\n\t\t};\n\n\t\t/**\n\t\t * Send a debug message to the console.\n\t\t * provided publicly with _log for plugins\n\t\t * @private\n\t\t *\n\t\t * @param {number} loglevel - The loglevel required to initiate output for the message.\n\t\t * @param {...mixed} output - One or more variables that should be passed to the console.\n\t\t */\n\t\tvar log = this._log = function (loglevel, output) {\n\t\t\tif (_options.loglevel >= loglevel) {\n\t\t\t\tArray.prototype.splice.call(arguments, 1, 0, \"(\" + NAMESPACE + \") ->\");\n\t\t\t\t_util.log.apply(window, arguments);\n\t\t\t}\n\t\t};\n\t\t// for scenes we have getters for each option, but for the controller we don't, so we need to make it available externally for plugins\n\t\tthis._options = _options;\n\n\t\t/**\n\t\t * Sort scenes in ascending order of their start offset.\n\t\t * @private\n\t\t *\n\t\t * @param {array} ScenesArray - an array of ScrollMagic Scenes that should be sorted\n\t\t * @return {array} The sorted array of Scenes.\n\t\t */\n\t\tvar sortScenes = function (ScenesArray) {\n\t\t\tif (ScenesArray.length <= 1) {\n\t\t\t\treturn ScenesArray;\n\t\t\t} else {\n\t\t\t\tvar scenes = ScenesArray.slice(0);\n\t\t\t\tscenes.sort(function (a, b) {\n\t\t\t\t\treturn a.scrollOffset() > b.scrollOffset() ? 1 : -1;\n\t\t\t\t});\n\t\t\t\treturn scenes;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * ----------------------------------------------------------------\n\t\t * public functions\n\t\t * ----------------------------------------------------------------\n\t\t */\n\n\t\t/**\n\t\t * Add one ore more scene(s) to the controller.  \n\t\t * This is the equivalent to `Scene.addTo(controller)`.\n\t\t * @public\n\t\t * @example\n\t\t * // with a previously defined scene\n\t\t * controller.addScene(scene);\n\t\t *\n\t\t * // with a newly created scene.\n\t\t * controller.addScene(new ScrollMagic.Scene({duration : 0}));\n\t\t *\n\t\t * // adding multiple scenes\n\t\t * controller.addScene([scene, scene2, new ScrollMagic.Scene({duration : 0})]);\n\t\t *\n\t\t * @param {(ScrollMagic.Scene|array)} newScene - ScrollMagic Scene or Array of Scenes to be added to the controller.\n\t\t * @return {Controller} Parent object for chaining.\n\t\t */\n\t\tthis.addScene = function (newScene) {\n\t\t\tif (_util.type.Array(newScene)) {\n\t\t\t\tnewScene.forEach(function (scene, index) {\n\t\t\t\t\tController.addScene(scene);\n\t\t\t\t});\n\t\t\t} else if (newScene instanceof ScrollMagic.Scene) {\n\t\t\t\tif (newScene.controller() !== Controller) {\n\t\t\t\t\tnewScene.addTo(Controller);\n\t\t\t\t} else if (_sceneObjects.indexOf(newScene) < 0) {\n\t\t\t\t\t// new scene\n\t\t\t\t\t_sceneObjects.push(newScene); // add to array\n\t\t\t\t\t_sceneObjects = sortScenes(_sceneObjects); // sort\n\t\t\t\t\tnewScene.on(\"shift.controller_sort\", function () { // resort whenever scene moves\n\t\t\t\t\t\t_sceneObjects = sortScenes(_sceneObjects);\n\t\t\t\t\t});\n\t\t\t\t\t// insert Global defaults.\n\t\t\t\t\tfor (var key in _options.globalSceneOptions) {\n\t\t\t\t\t\tif (newScene[key]) {\n\t\t\t\t\t\t\tnewScene[key].call(newScene, _options.globalSceneOptions[key]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlog(3, \"adding Scene (now \" + _sceneObjects.length + \" total)\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR: invalid argument supplied for '.addScene()'\");\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * Remove one ore more scene(s) from the controller.  \n\t\t * This is the equivalent to `Scene.remove()`.\n\t\t * @public\n\t\t * @example\n\t\t * // remove a scene from the controller\n\t\t * controller.removeScene(scene);\n\t\t *\n\t\t * // remove multiple scenes from the controller\n\t\t * controller.removeScene([scene, scene2, scene3]);\n\t\t *\n\t\t * @param {(ScrollMagic.Scene|array)} Scene - ScrollMagic Scene or Array of Scenes to be removed from the controller.\n\t\t * @returns {Controller} Parent object for chaining.\n\t\t */\n\t\tthis.removeScene = function (Scene) {\n\t\t\tif (_util.type.Array(Scene)) {\n\t\t\t\tScene.forEach(function (scene, index) {\n\t\t\t\t\tController.removeScene(scene);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvar index = _sceneObjects.indexOf(Scene);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tScene.off(\"shift.controller_sort\");\n\t\t\t\t\t_sceneObjects.splice(index, 1);\n\t\t\t\t\tlog(3, \"removing Scene (now \" + _sceneObjects.length + \" left)\");\n\t\t\t\t\tScene.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * Update one ore more scene(s) according to the scroll position of the container.  \n\t\t * This is the equivalent to `Scene.update()`.  \n\t\t * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  \n\t\t * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.  \n\t\t * _**Note:** This method gets called constantly whenever Controller detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._\n\t\t * @public\n\t\t * @example\n\t\t * // update a specific scene on next cycle\n\t\t * controller.updateScene(scene);\n\t\t *\n\t\t * // update a specific scene immediately\n\t\t * controller.updateScene(scene, true);\n\t\t *\n\t\t * // update multiple scenes scene on next cycle\n\t\t * controller.updateScene([scene1, scene2, scene3]);\n\t\t *\n\t\t * @param {ScrollMagic.Scene} Scene - ScrollMagic Scene or Array of Scenes that is/are supposed to be updated.\n\t\t * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle.  \n\t\t This is useful when changing multiple properties of the scene - this way it will only be updated once all new properties are set (updateScenes).\n\t\t * @return {Controller} Parent object for chaining.\n\t\t */\n\t\tthis.updateScene = function (Scene, immediately) {\n\t\t\tif (_util.type.Array(Scene)) {\n\t\t\t\tScene.forEach(function (scene, index) {\n\t\t\t\t\tController.updateScene(scene, immediately);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (immediately) {\n\t\t\t\t\tScene.update(true);\n\t\t\t\t} else if (_updateScenesOnNextCycle !== true && Scene instanceof ScrollMagic.Scene) { // if _updateScenesOnNextCycle is true, all connected scenes are already scheduled for update\n\t\t\t\t\t// prep array for next update cycle\n\t\t\t\t\t_updateScenesOnNextCycle = _updateScenesOnNextCycle || [];\n\t\t\t\t\tif (_updateScenesOnNextCycle.indexOf(Scene) == -1) {\n\t\t\t\t\t\t_updateScenesOnNextCycle.push(Scene);\n\t\t\t\t\t}\n\t\t\t\t\t_updateScenesOnNextCycle = sortScenes(_updateScenesOnNextCycle); // sort\n\t\t\t\t\tdebounceUpdate();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * Updates the controller params and calls updateScene on every scene, that is attached to the controller.  \n\t\t * See `Controller.updateScene()` for more information about what this means.  \n\t\t * In most cases you will not need this function, as it is called constantly, whenever ScrollMagic detects a state change event, like resize or scroll.  \n\t\t * The only application for this method is when ScrollMagic fails to detect these events.  \n\t\t * One application is with some external scroll libraries (like iScroll) that move an internal container to a negative offset instead of actually scrolling. In this case the update on the controller needs to be called whenever the child container's position changes.\n\t\t * For this case there will also be the need to provide a custom function to calculate the correct scroll position. See `Controller.scrollPos()` for details.\n\t\t * @public\n\t\t * @example\n\t\t * // update the controller on next cycle (saves performance due to elimination of redundant updates)\n\t\t * controller.update();\n\t\t *\n\t\t * // update the controller immediately\n\t\t * controller.update(true);\n\t\t *\n\t\t * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance)\n\t\t * @return {Controller} Parent object for chaining.\n\t\t */\n\t\tthis.update = function (immediately) {\n\t\t\tonChange({\n\t\t\t\ttype: \"resize\"\n\t\t\t}); // will update size and set _updateScenesOnNextCycle to true\n\t\t\tif (immediately) {\n\t\t\t\tupdateScenes();\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * Scroll to a numeric scroll offset, a DOM element, the start of a scene or provide an alternate method for scrolling.  \n\t\t * For vertical controllers it will change the top scroll offset and for horizontal applications it will change the left offset.\n\t\t * @public\n\t\t *\n\t\t * @since 1.1.0\n\t\t * @example\n\t\t * // scroll to an offset of 100\n\t\t * controller.scrollTo(100);\n\t\t *\n\t\t * // scroll to a DOM element\n\t\t * controller.scrollTo(\"#anchor\");\n\t\t *\n\t\t * // scroll to the beginning of a scene\n\t\t * var scene = new ScrollMagic.Scene({offset: 200});\n\t\t * controller.scrollTo(scene);\n\t\t *\n\t\t * // define a new scroll position modification function (jQuery animate instead of jump)\n\t\t * controller.scrollTo(function (newScrollPos) {\n\t\t *\t$(\"html, body\").animate({scrollTop: newScrollPos});\n\t\t * });\n\t\t * controller.scrollTo(100); // call as usual, but the new function will be used instead\n\t\t *\n\t\t * // define a new scroll function with an additional parameter\n\t\t * controller.scrollTo(function (newScrollPos, message) {\n\t\t *  console.log(message);\n\t\t *\t$(this).animate({scrollTop: newScrollPos});\n\t\t * });\n\t\t * // call as usual, but supply an extra parameter to the defined custom function\n\t\t * controller.scrollTo(100, \"my message\");\n\t\t *\n\t\t * // define a new scroll function with an additional parameter containing multiple variables\n\t\t * controller.scrollTo(function (newScrollPos, options) {\n\t\t *  someGlobalVar = options.a + options.b;\n\t\t *\t$(this).animate({scrollTop: newScrollPos});\n\t\t * });\n\t\t * // call as usual, but supply an extra parameter containing multiple options\n\t\t * controller.scrollTo(100, {a: 1, b: 2});\n\t\t *\n\t\t * // define a new scroll function with a callback supplied as an additional parameter\n\t\t * controller.scrollTo(function (newScrollPos, callback) {\n\t\t *\t$(this).animate({scrollTop: newScrollPos}, 400, \"swing\", callback);\n\t\t * });\n\t\t * // call as usual, but supply an extra parameter, which is used as a callback in the previously defined custom scroll function\n\t\t * controller.scrollTo(100, function() {\n\t\t *\tconsole.log(\"scroll has finished.\");\n\t\t * });\n\t\t *\n\t\t * @param {mixed} scrollTarget - The supplied argument can be one of these types:\n\t\t * 1. `number` -> The container will scroll to this new scroll offset.\n\t\t * 2. `string` or `object` -> Can be a selector or a DOM object.  \n\t\t *  The container will scroll to the position of this element.\n\t\t * 3. `ScrollMagic Scene` -> The container will scroll to the start of this scene.\n\t\t * 4. `function` -> This function will be used for future scroll position modifications.  \n\t\t *  This provides a way for you to change the behaviour of scrolling and adding new behaviour like animation. The function receives the new scroll position as a parameter and a reference to the container element using `this`.  \n\t\t *  It may also optionally receive an optional additional parameter (see below)  \n\t\t *  _**NOTE:**  \n\t\t *  All other options will still work as expected, using the new function to scroll._\n\t\t * @param {mixed} [additionalParameter] - If a custom scroll function was defined (see above 4.), you may want to supply additional parameters to it, when calling it. You can do this using this parameter – see examples for details. Please note, that this parameter will have no effect, if you use the default scrolling function.\n\t\t * @returns {Controller} Parent object for chaining.\n\t\t */\n\t\tthis.scrollTo = function (scrollTarget, additionalParameter) {\n\t\t\tif (_util.type.Number(scrollTarget)) { // excecute\n\t\t\t\tsetScrollPos.call(_options.container, scrollTarget, additionalParameter);\n\t\t\t} else if (scrollTarget instanceof ScrollMagic.Scene) { // scroll to scene\n\t\t\t\tif (scrollTarget.controller() === Controller) { // check if the controller is associated with this scene\n\t\t\t\t\tController.scrollTo(scrollTarget.scrollOffset(), additionalParameter);\n\t\t\t\t} else {\n\t\t\t\t\tlog(2, \"scrollTo(): The supplied scene does not belong to this controller. Scroll cancelled.\", scrollTarget);\n\t\t\t\t}\n\t\t\t} else if (_util.type.Function(scrollTarget)) { // assign new scroll function\n\t\t\t\tsetScrollPos = scrollTarget;\n\t\t\t} else { // scroll to element\n\t\t\t\tvar elem = _util.get.elements(scrollTarget)[0];\n\t\t\t\tif (elem) {\n\t\t\t\t\t// if parent is pin spacer, use spacer position instead so correct start position is returned for pinned elements.\n\t\t\t\t\twhile (elem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {\n\t\t\t\t\t\telem = elem.parentNode;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar\n\t\t\t\t\tparam = _options.vertical ? \"top\" : \"left\",\n\t\t\t\t\t\t// which param is of interest ?\n\t\t\t\t\t\tcontainerOffset = _util.get.offset(_options.container),\n\t\t\t\t\t\t// container position is needed because element offset is returned in relation to document, not in relation to container.\n\t\t\t\t\t\telementOffset = _util.get.offset(elem);\n\n\t\t\t\t\tif (!_isDocument) { // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent\n\t\t\t\t\t\tcontainerOffset[param] -= Controller.scrollPos();\n\t\t\t\t\t}\n\n\t\t\t\t\tController.scrollTo(elementOffset[param] - containerOffset[param], additionalParameter);\n\t\t\t\t} else {\n\t\t\t\t\tlog(2, \"scrollTo(): The supplied argument is invalid. Scroll cancelled.\", scrollTarget);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * **Get** the current scrollPosition or **Set** a new method to calculate it.  \n\t\t * -> **GET**:\n\t\t * When used as a getter this function will return the current scroll position.  \n\t\t * To get a cached value use Controller.info(\"scrollPos\"), which will be updated in the update cycle.  \n\t\t * For vertical controllers it will return the top scroll offset and for horizontal applications it will return the left offset.\n\t\t *\n\t\t * -> **SET**:\n\t\t * When used as a setter this method prodes a way to permanently overwrite the controller's scroll position calculation.  \n\t\t * A typical usecase is when the scroll position is not reflected by the containers scrollTop or scrollLeft values, but for example by the inner offset of a child container.  \n\t\t * Moving a child container inside a parent is a commonly used method for several scrolling frameworks, including iScroll.  \n\t\t * By providing an alternate calculation function you can make sure ScrollMagic receives the correct scroll position.  \n\t\t * Please also bear in mind that your function should return y values for vertical scrolls an x for horizontals.\n\t\t *\n\t\t * To change the current scroll position please use `Controller.scrollTo()`.\n\t\t * @public\n\t\t *\n\t\t * @example\n\t\t * // get the current scroll Position\n\t\t * var scrollPos = controller.scrollPos();\n\t\t *\n\t\t * // set a new scroll position calculation method\n\t\t * controller.scrollPos(function () {\n\t\t *\treturn this.info(\"vertical\") ? -mychildcontainer.y : -mychildcontainer.x\n\t\t * });\n\t\t *\n\t\t * @param {function} [scrollPosMethod] - The function to be used for the scroll position calculation of the container.\n\t\t * @returns {(number|Controller)} Current scroll position or parent object for chaining.\n\t\t */\n\t\tthis.scrollPos = function (scrollPosMethod) {\n\t\t\tif (!arguments.length) { // get\n\t\t\t\treturn getScrollPos.call(Controller);\n\t\t\t} else { // set\n\t\t\t\tif (_util.type.Function(scrollPosMethod)) {\n\t\t\t\t\tgetScrollPos = scrollPosMethod;\n\t\t\t\t} else {\n\t\t\t\t\tlog(2, \"Provided value for method 'scrollPos' is not a function. To change the current scroll position use 'scrollTo()'.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * **Get** all infos or one in particular about the controller.\n\t\t * @public\n\t\t * @example\n\t\t * // returns the current scroll position (number)\n\t\t * var scrollPos = controller.info(\"scrollPos\");\n\t\t *\n\t\t * // returns all infos as an object\n\t\t * var infos = controller.info();\n\t\t *\n\t\t * @param {string} [about] - If passed only this info will be returned instead of an object containing all.  \n\t\t Valid options are:\n\t\t ** `\"size\"` => the current viewport size of the container\n\t\t ** `\"vertical\"` => true if vertical scrolling, otherwise false\n\t\t ** `\"scrollPos\"` => the current scroll position\n\t\t ** `\"scrollDirection\"` => the last known direction of the scroll\n\t\t ** `\"container\"` => the container element\n\t\t ** `\"isDocument\"` => true if container element is the document.\n\t\t * @returns {(mixed|object)} The requested info(s).\n\t\t */\n\t\tthis.info = function (about) {\n\t\t\tvar values = {\n\t\t\t\tsize: _viewPortSize,\n\t\t\t\t// contains height or width (in regard to orientation);\n\t\t\t\tvertical: _options.vertical,\n\t\t\t\tscrollPos: _scrollPos,\n\t\t\t\tscrollDirection: _scrollDirection,\n\t\t\t\tcontainer: _options.container,\n\t\t\t\tisDocument: _isDocument\n\t\t\t};\n\t\t\tif (!arguments.length) { // get all as an object\n\t\t\t\treturn values;\n\t\t\t} else if (values[about] !== undefined) {\n\t\t\t\treturn values[about];\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR: option \\\"\" + about + \"\\\" is not available\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * **Get** or **Set** the current loglevel option value.\n\t\t * @public\n\t\t *\n\t\t * @example\n\t\t * // get the current value\n\t\t * var loglevel = controller.loglevel();\n\t\t *\n\t\t * // set a new value\n\t\t * controller.loglevel(3);\n\t\t *\n\t\t * @param {number} [newLoglevel] - The new loglevel setting of the Controller. `[0-3]`\n\t\t * @returns {(number|Controller)} Current loglevel or parent object for chaining.\n\t\t */\n\t\tthis.loglevel = function (newLoglevel) {\n\t\t\tif (!arguments.length) { // get\n\t\t\t\treturn _options.loglevel;\n\t\t\t} else if (_options.loglevel != newLoglevel) { // set\n\t\t\t\t_options.loglevel = newLoglevel;\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * **Get** or **Set** the current enabled state of the controller.  \n\t\t * This can be used to disable all Scenes connected to the controller without destroying or removing them.\n\t\t * @public\n\t\t *\n\t\t * @example\n\t\t * // get the current value\n\t\t * var enabled = controller.enabled();\n\t\t *\n\t\t * // disable the controller\n\t\t * controller.enabled(false);\n\t\t *\n\t\t * @param {boolean} [newState] - The new enabled state of the controller `true` or `false`.\n\t\t * @returns {(boolean|Controller)} Current enabled state or parent object for chaining.\n\t\t */\n\t\tthis.enabled = function (newState) {\n\t\t\tif (!arguments.length) { // get\n\t\t\t\treturn _enabled;\n\t\t\t} else if (_enabled != newState) { // set\n\t\t\t\t_enabled = !! newState;\n\t\t\t\tController.updateScene(_sceneObjects, true);\n\t\t\t}\n\t\t\treturn Controller;\n\t\t};\n\n\t\t/**\n\t\t * Destroy the Controller, all Scenes and everything.\n\t\t * @public\n\t\t *\n\t\t * @example\n\t\t * // without resetting the scenes\n\t\t * controller = controller.destroy();\n\t\t *\n\t\t * // with scene reset\n\t\t * controller = controller.destroy(true);\n\t\t *\n\t\t * @param {boolean} [resetScenes=false] - If `true` the pins and tweens (if existent) of all scenes will be reset.\n\t\t * @returns {null} Null to unset handler variables.\n\t\t */\n\t\tthis.destroy = function (resetScenes) {\n\t\t\twindow.clearTimeout(_refreshTimeout);\n\t\t\tvar i = _sceneObjects.length;\n\t\t\twhile (i--) {\n\t\t\t\t_sceneObjects[i].destroy(resetScenes);\n\t\t\t}\n\t\t\t_options.container.removeEventListener(\"resize\", onChange);\n\t\t\t_options.container.removeEventListener(\"scroll\", onChange);\n\t\t\t_util.cAF(_updateTimeout);\n\t\t\tlog(3, \"destroyed \" + NAMESPACE + \" (reset: \" + (resetScenes ? \"true\" : \"false\") + \")\");\n\t\t\treturn null;\n\t\t};\n\n\t\t// INIT\n\t\tconstruct();\n\t\treturn Controller;\n\t};\n\n\t// store pagewide controller options\n\tvar CONTROLLER_OPTIONS = {\n\t\tdefaults: {\n\t\t\tcontainer: window,\n\t\t\tvertical: true,\n\t\t\tglobalSceneOptions: {},\n\t\t\tloglevel: 2,\n\t\t\trefreshInterval: 100\n\t\t}\n\t};\n/*\n * method used to add an option to ScrollMagic Scenes.\n */\n\tScrollMagic.Controller.addOption = function (name, defaultValue) {\n\t\tCONTROLLER_OPTIONS.defaults[name] = defaultValue;\n\t};\n\t// instance extension function for plugins\n\tScrollMagic.Controller.extend = function (extension) {\n\t\tvar oldClass = this;\n\t\tScrollMagic.Controller = function () {\n\t\t\toldClass.apply(this, arguments);\n\t\t\tthis.$super = _util.extend({}, this); // copy parent state\n\t\t\treturn extension.apply(this, arguments) || this;\n\t\t};\n\t\t_util.extend(ScrollMagic.Controller, oldClass); // copy properties\n\t\tScrollMagic.Controller.prototype = oldClass.prototype; // copy prototype\n\t\tScrollMagic.Controller.prototype.constructor = ScrollMagic.Controller; // restore constructor\n\t};\n\n\n\t/**\n\t * A Scene defines where the controller should react and how.\n\t *\n\t * @class\n\t *\n\t * @example\n\t * // create a standard scene and add it to a controller\n\t * new ScrollMagic.Scene()\n\t *\t\t.addTo(controller);\n\t *\n\t * // create a scene with custom options and assign a handler to it.\n\t * var scene = new ScrollMagic.Scene({\n\t * \t\tduration: 100,\n\t *\t\toffset: 200,\n\t *\t\ttriggerHook: \"onEnter\",\n\t *\t\treverse: false\n\t * });\n\t *\n\t * @param {object} [options] - Options for the Scene. The options can be updated at any time.  \n\t Instead of setting the options for each scene individually you can also set them globally in the controller as the controllers `globalSceneOptions` option. The object accepts the same properties as the ones below.  \n\t When a scene is added to the controller the options defined using the Scene constructor will be overwritten by those set in `globalSceneOptions`.\n\t * @param {(number|function)} [options.duration=0] - The duration of the scene. \n\t If `0` tweens will auto-play when reaching the scene start point, pins will be pinned indefinetly starting at the start position.  \n\t A function retuning the duration value is also supported. Please see `Scene.duration()` for details.\n\t * @param {number} [options.offset=0] - Offset Value for the Trigger Position. If no triggerElement is defined this will be the scroll distance from the start of the page, after which the scene will start.\n\t * @param {(string|object)} [options.triggerElement=null] - Selector or DOM object that defines the start of the scene. If undefined the scene will start right at the start of the page (unless an offset is set).\n\t * @param {(number|string)} [options.triggerHook=\"onCenter\"] - Can be a number between 0 and 1 defining the position of the trigger Hook in relation to the viewport.  \n\t Can also be defined using a string:\n\t ** `\"onEnter\"` => `1`\n\t ** `\"onCenter\"` => `0.5`\n\t ** `\"onLeave\"` => `0`\n\t * @param {boolean} [options.reverse=true] - Should the scene reverse, when scrolling up?\n\t * @param {number} [options.loglevel=2] - Loglevel for debugging. Note that logging is disabled in the minified version of ScrollMagic.\n\t ** `0` => silent\n\t ** `1` => errors\n\t ** `2` => errors, warnings\n\t ** `3` => errors, warnings, debuginfo\n\t * \n\t */\n\tScrollMagic.Scene = function (options) {\n\n/*\n\t * ----------------------------------------------------------------\n\t * settings\n\t * ----------------------------------------------------------------\n\t */\n\n\t\tvar\n\t\tNAMESPACE = 'ScrollMagic.Scene',\n\t\t\tSCENE_STATE_BEFORE = 'BEFORE',\n\t\t\tSCENE_STATE_DURING = 'DURING',\n\t\t\tSCENE_STATE_AFTER = 'AFTER',\n\t\t\tDEFAULT_OPTIONS = SCENE_OPTIONS.defaults;\n\n/*\n\t * ----------------------------------------------------------------\n\t * private vars\n\t * ----------------------------------------------------------------\n\t */\n\n\t\tvar\n\t\tScene = this,\n\t\t\t_options = _util.extend({}, DEFAULT_OPTIONS, options),\n\t\t\t_state = SCENE_STATE_BEFORE,\n\t\t\t_progress = 0,\n\t\t\t_scrollOffset = {\n\t\t\t\tstart: 0,\n\t\t\t\tend: 0\n\t\t\t},\n\t\t\t// reflects the controllers's scroll position for the start and end of the scene respectively\n\t\t\t_triggerPos = 0,\n\t\t\t_enabled = true,\n\t\t\t_durationUpdateMethod, _controller;\n\n\t\t/**\n\t\t * Internal constructor function of the ScrollMagic Scene\n\t\t * @private\n\t\t */\n\t\tvar construct = function () {\n\t\t\tfor (var key in _options) { // check supplied options\n\t\t\t\tif (!DEFAULT_OPTIONS.hasOwnProperty(key)) {\n\t\t\t\t\tlog(2, \"WARNING: Unknown option \\\"\" + key + \"\\\"\");\n\t\t\t\t\tdelete _options[key];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// add getters/setters for all possible options\n\t\t\tfor (var optionName in DEFAULT_OPTIONS) {\n\t\t\t\taddSceneOption(optionName);\n\t\t\t}\n\t\t\t// validate all options\n\t\t\tvalidateOption();\n\t\t};\n\n/*\n * ----------------------------------------------------------------\n * Event Management\n * ----------------------------------------------------------------\n */\n\n\t\tvar _listeners = {};\n\t\t/**\n\t\t * Scene start event.  \n\t\t * Fires whenever the scroll position its the starting point of the scene.  \n\t\t * It will also fire when scrolling back up going over the start position of the scene. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.\n\t\t *\n\t\t * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\n\t\t *\n\t\t * @event ScrollMagic.Scene#start\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"start\", function (event) {\n\t\t * \tconsole.log(\"Hit start point of scene.\");\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {number} event.progress - Reflects the current progress of the scene\n\t\t * @property {string} event.state - The current state of the scene `\"BEFORE\"` or `\"DURING\"`\n\t\t * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\n\t\t */\n\t\t/**\n\t\t * Scene end event.  \n\t\t * Fires whenever the scroll position its the ending point of the scene.  \n\t\t * It will also fire when scrolling back up from after the scene and going over its end position. If you want something to happen only when scrolling down/right, use the scrollDirection parameter passed to the callback.\n\t\t *\n\t\t * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\n\t\t *\n\t\t * @event ScrollMagic.Scene#end\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"end\", function (event) {\n\t\t * \tconsole.log(\"Hit end point of scene.\");\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {number} event.progress - Reflects the current progress of the scene\n\t\t * @property {string} event.state - The current state of the scene `\"DURING\"` or `\"AFTER\"`\n\t\t * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\n\t\t */\n\t\t/**\n\t\t * Scene enter event.  \n\t\t * Fires whenever the scene enters the \"DURING\" state.  \n\t\t * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene enters its active scroll timeframe, regardless of the scroll-direction.\n\t\t *\n\t\t * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\n\t\t *\n\t\t * @event ScrollMagic.Scene#enter\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"enter\", function (event) {\n\t\t * \tconsole.log(\"Scene entered.\");\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {number} event.progress - Reflects the current progress of the scene\n\t\t * @property {string} event.state - The current state of the scene - always `\"DURING\"`\n\t\t * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\n\t\t */\n\t\t/**\n\t\t * Scene leave event.  \n\t\t * Fires whenever the scene's state goes from \"DURING\" to either \"BEFORE\" or \"AFTER\".  \n\t\t * Keep in mind that it doesn't matter if the scene plays forward or backward: This event always fires when the scene leaves its active scroll timeframe, regardless of the scroll-direction.\n\t\t *\n\t\t * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\n\t\t *\n\t\t * @event ScrollMagic.Scene#leave\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"leave\", function (event) {\n\t\t * \tconsole.log(\"Scene left.\");\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {number} event.progress - Reflects the current progress of the scene\n\t\t * @property {string} event.state - The current state of the scene `\"BEFORE\"` or `\"AFTER\"`\n\t\t * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\n\t\t */\n\t\t/**\n\t\t * Scene update event.  \n\t\t * Fires whenever the scene is updated (but not necessarily changes the progress).\n\t\t *\n\t\t * @event ScrollMagic.Scene#update\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"update\", function (event) {\n\t\t * \tconsole.log(\"Scene updated.\");\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {number} event.startPos - The starting position of the scene (in relation to the conainer)\n\t\t * @property {number} event.endPos - The ending position of the scene (in relation to the conainer)\n\t\t * @property {number} event.scrollPos - The current scroll position of the container\n\t\t */\n\t\t/**\n\t\t * Scene progress event.  \n\t\t * Fires whenever the progress of the scene changes.\n\t\t *\n\t\t * For details on this event and the order in which it is fired, please review the {@link Scene.progress} method.\n\t\t *\n\t\t * @event ScrollMagic.Scene#progress\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"progress\", function (event) {\n\t\t * \tconsole.log(\"Scene progress changed to \" + event.progress);\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {number} event.progress - Reflects the current progress of the scene\n\t\t * @property {string} event.state - The current state of the scene `\"BEFORE\"`, `\"DURING\"` or `\"AFTER\"`\n\t\t * @property {string} event.scrollDirection - Indicates which way we are scrolling `\"PAUSED\"`, `\"FORWARD\"` or `\"REVERSE\"`\n\t\t */\n\t\t/**\n\t\t * Scene change event.  \n\t\t * Fires whenvever a property of the scene is changed.\n\t\t *\n\t\t * @event ScrollMagic.Scene#change\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"change\", function (event) {\n\t\t * \tconsole.log(\"Scene Property \\\"\" + event.what + \"\\\" changed to \" + event.newval);\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {string} event.what - Indicates what value has been changed\n\t\t * @property {mixed} event.newval - The new value of the changed property\n\t\t */\n\t\t/**\n\t\t * Scene shift event.  \n\t\t * Fires whenvever the start or end **scroll offset** of the scene change.\n\t\t * This happens explicitely, when one of these values change: `offset`, `duration` or `triggerHook`.\n\t\t * It will fire implicitly when the `triggerElement` changes, if the new element has a different position (most cases).\n\t\t * It will also fire implicitly when the size of the container changes and the triggerHook is anything other than `onLeave`.\n\t\t *\n\t\t * @event ScrollMagic.Scene#shift\n\t\t * @since 1.1.0\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"shift\", function (event) {\n\t\t * \tconsole.log(\"Scene moved, because the \" + event.reason + \" has changed.)\");\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {string} event.reason - Indicates why the scene has shifted\n\t\t */\n\t\t/**\n\t\t * Scene destroy event.  \n\t\t * Fires whenvever the scene is destroyed.\n\t\t * This can be used to tidy up custom behaviour used in events.\n\t\t *\n\t\t * @event ScrollMagic.Scene#destroy\n\t\t * @since 1.1.0\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"enter\", function (event) {\n\t\t *        // add custom action\n\t\t *        $(\"#my-elem\").left(\"200\");\n\t\t *      })\n\t\t *      .on(\"destroy\", function (event) {\n\t\t *        // reset my element to start position\n\t\t *        if (event.reset) {\n\t\t *          $(\"#my-elem\").left(\"0\");\n\t\t *        }\n\t\t *      });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {boolean} event.reset - Indicates if the destroy method was called with reset `true` or `false`.\n\t\t */\n\t\t/**\n\t\t * Scene add event.  \n\t\t * Fires when the scene is added to a controller.\n\t\t * This is mostly used by plugins to know that change might be due.\n\t\t *\n\t\t * @event ScrollMagic.Scene#add\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"add\", function (event) {\n\t\t * \tconsole.log('Scene was added to a new controller.');\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t * @property {boolean} event.controller - The controller object the scene was added to.\n\t\t */\n\t\t/**\n\t\t * Scene remove event.  \n\t\t * Fires when the scene is removed from a controller.\n\t\t * This is mostly used by plugins to know that change might be due.\n\t\t *\n\t\t * @event ScrollMagic.Scene#remove\n\t\t * @since 2.0.0\n\t\t *\n\t\t * @example\n\t\t * scene.on(\"remove\", function (event) {\n\t\t * \tconsole.log('Scene was removed from its controller.');\n\t\t * });\n\t\t *\n\t\t * @property {object} event - The event Object passed to each callback\n\t\t * @property {string} event.type - The name of the event\n\t\t * @property {Scene} event.target - The Scene object that triggered this event\n\t\t */\n\n\t\t/**\n\t\t * Add one ore more event listener.  \n\t\t * The callback function will be fired at the respective event, and an object containing relevant data will be passed to the callback.\n\t\t * @method ScrollMagic.Scene#on\n\t\t *\n\t\t * @example\n\t\t * function callback (event) {\n\t\t * \t\tconsole.log(\"Event fired! (\" + event.type + \")\");\n\t\t * }\n\t\t * // add listeners\n\t\t * scene.on(\"change update progress start end enter leave\", callback);\n\t\t *\n\t\t * @param {string} names - The name or names of the event the callback should be attached to.\n\t\t * @param {function} callback - A function that should be executed, when the event is dispatched. An event object will be passed to the callback.\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.on = function (names, callback) {\n\t\t\tif (_util.type.Function(callback)) {\n\t\t\t\tnames = names.trim().split(' ');\n\t\t\t\tnames.forEach(function (fullname) {\n\t\t\t\t\tvar\n\t\t\t\t\tnameparts = fullname.split('.'),\n\t\t\t\t\t\teventname = nameparts[0],\n\t\t\t\t\t\tnamespace = nameparts[1];\n\t\t\t\t\tif (eventname != \"*\") { // disallow wildcards\n\t\t\t\t\t\tif (!_listeners[eventname]) {\n\t\t\t\t\t\t\t_listeners[eventname] = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t_listeners[eventname].push({\n\t\t\t\t\t\t\tnamespace: namespace || '',\n\t\t\t\t\t\t\tcallback: callback\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR when calling '.on()': Supplied callback for '\" + names + \"' is not a valid function!\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * Remove one or more event listener.\n\t\t * @method ScrollMagic.Scene#off\n\t\t *\n\t\t * @example\n\t\t * function callback (event) {\n\t\t * \t\tconsole.log(\"Event fired! (\" + event.type + \")\");\n\t\t * }\n\t\t * // add listeners\n\t\t * scene.on(\"change update\", callback);\n\t\t * // remove listeners\n\t\t * scene.off(\"change update\", callback);\n\t\t *\n\t\t * @param {string} names - The name or names of the event that should be removed.\n\t\t * @param {function} [callback] - A specific callback function that should be removed. If none is passed all callbacks to the event listener will be removed.\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.off = function (names, callback) {\n\t\t\tif (!names) {\n\t\t\t\tlog(1, \"ERROR: Invalid event name supplied.\");\n\t\t\t\treturn Scene;\n\t\t\t}\n\t\t\tnames = names.trim().split(' ');\n\t\t\tnames.forEach(function (fullname, key) {\n\t\t\t\tvar\n\t\t\t\tnameparts = fullname.split('.'),\n\t\t\t\t\teventname = nameparts[0],\n\t\t\t\t\tnamespace = nameparts[1] || '',\n\t\t\t\t\tremoveList = eventname === '*' ? Object.keys(_listeners) : [eventname];\n\t\t\t\tremoveList.forEach(function (remove) {\n\t\t\t\t\tvar\n\t\t\t\t\tlist = _listeners[remove] || [],\n\t\t\t\t\t\ti = list.length;\n\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\tvar listener = list[i];\n\t\t\t\t\t\tif (listener && (namespace === listener.namespace || namespace === '*') && (!callback || callback == listener.callback)) {\n\t\t\t\t\t\t\tlist.splice(i, 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!list.length) {\n\t\t\t\t\t\tdelete _listeners[remove];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * Trigger an event.\n\t\t * @method ScrollMagic.Scene#trigger\n\t\t *\n\t\t * @example\n\t\t * this.trigger(\"change\");\n\t\t *\n\t\t * @param {string} name - The name of the event that should be triggered.\n\t\t * @param {object} [vars] - An object containing info that should be passed to the callback.\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.trigger = function (name, vars) {\n\t\t\tif (name) {\n\t\t\t\tvar\n\t\t\t\tnameparts = name.trim().split('.'),\n\t\t\t\t\teventname = nameparts[0],\n\t\t\t\t\tnamespace = nameparts[1],\n\t\t\t\t\tlisteners = _listeners[eventname];\n\t\t\t\tlog(3, 'event fired:', eventname, vars ? \"->\" : '', vars || '');\n\t\t\t\tif (listeners) {\n\t\t\t\t\tlisteners.forEach(function (listener, key) {\n\t\t\t\t\t\tif (!namespace || namespace === listener.namespace) {\n\t\t\t\t\t\t\tlistener.callback.call(Scene, new ScrollMagic.Event(eventname, listener.namespace, Scene, vars));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog(1, \"ERROR: Invalid event name supplied.\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t// set event listeners\n\t\tScene.on(\"change.internal\", function (e) {\n\t\t\tif (e.what !== \"loglevel\" && e.what !== \"tweenChanges\") { // no need for a scene update scene with these options...\n\t\t\t\tif (e.what === \"triggerElement\") {\n\t\t\t\t\tupdateTriggerElementPosition();\n\t\t\t\t} else if (e.what === \"reverse\") { // the only property left that may have an impact on the current scene state. Everything else is handled by the shift event.\n\t\t\t\t\tScene.update();\n\t\t\t\t}\n\t\t\t}\n\t\t}).on(\"shift.internal\", function (e) {\n\t\t\tupdateScrollOffset();\n\t\t\tScene.update(); // update scene to reflect new position\n\t\t});\n\n\t\t/**\n\t\t * Send a debug message to the console.\n\t\t * @private\n\t\t * but provided publicly with _log for plugins\n\t\t *\n\t\t * @param {number} loglevel - The loglevel required to initiate output for the message.\n\t\t * @param {...mixed} output - One or more variables that should be passed to the console.\n\t\t */\n\t\tvar log = this._log = function (loglevel, output) {\n\t\t\tif (_options.loglevel >= loglevel) {\n\t\t\t\tArray.prototype.splice.call(arguments, 1, 0, \"(\" + NAMESPACE + \") ->\");\n\t\t\t\t_util.log.apply(window, arguments);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Add the scene to a controller.  \n\t\t * This is the equivalent to `Controller.addScene(scene)`.\n\t\t * @method ScrollMagic.Scene#addTo\n\t\t *\n\t\t * @example\n\t\t * // add a scene to a ScrollMagic Controller\n\t\t * scene.addTo(controller);\n\t\t *\n\t\t * @param {ScrollMagic.Controller} controller - The controller to which the scene should be added.\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.addTo = function (controller) {\n\t\t\tif (!(controller instanceof ScrollMagic.Controller)) {\n\t\t\t\tlog(1, \"ERROR: supplied argument of 'addTo()' is not a valid ScrollMagic Controller\");\n\t\t\t} else if (_controller != controller) {\n\t\t\t\t// new controller\n\t\t\t\tif (_controller) { // was associated to a different controller before, so remove it...\n\t\t\t\t\t_controller.removeScene(Scene);\n\t\t\t\t}\n\t\t\t\t_controller = controller;\n\t\t\t\tvalidateOption();\n\t\t\t\tupdateDuration(true);\n\t\t\t\tupdateTriggerElementPosition(true);\n\t\t\t\tupdateScrollOffset();\n\t\t\t\t_controller.info(\"container\").addEventListener('resize', onContainerResize);\n\t\t\t\tcontroller.addScene(Scene);\n\t\t\t\tScene.trigger(\"add\", {\n\t\t\t\t\tcontroller: _controller\n\t\t\t\t});\n\t\t\t\tlog(3, \"added \" + NAMESPACE + \" to controller\");\n\t\t\t\tScene.update();\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * **Get** or **Set** the current enabled state of the scene.  \n\t\t * This can be used to disable this scene without removing or destroying it.\n\t\t * @method ScrollMagic.Scene#enabled\n\t\t *\n\t\t * @example\n\t\t * // get the current value\n\t\t * var enabled = scene.enabled();\n\t\t *\n\t\t * // disable the scene\n\t\t * scene.enabled(false);\n\t\t *\n\t\t * @param {boolean} [newState] - The new enabled state of the scene `true` or `false`.\n\t\t * @returns {(boolean|Scene)} Current enabled state or parent object for chaining.\n\t\t */\n\t\tthis.enabled = function (newState) {\n\t\t\tif (!arguments.length) { // get\n\t\t\t\treturn _enabled;\n\t\t\t} else if (_enabled != newState) { // set\n\t\t\t\t_enabled = !! newState;\n\t\t\t\tScene.update(true);\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * Remove the scene from the controller.  \n\t\t * This is the equivalent to `Controller.removeScene(scene)`.\n\t\t * The scene will not be updated anymore until you readd it to a controller.\n\t\t * To remove the pin or the tween you need to call removeTween() or removePin() respectively.\n\t\t * @method ScrollMagic.Scene#remove\n\t\t * @example\n\t\t * // remove the scene from its controller\n\t\t * scene.remove();\n\t\t *\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.remove = function () {\n\t\t\tif (_controller) {\n\t\t\t\t_controller.info(\"container\").removeEventListener('resize', onContainerResize);\n\t\t\t\tvar tmpParent = _controller;\n\t\t\t\t_controller = undefined;\n\t\t\t\ttmpParent.removeScene(Scene);\n\t\t\t\tScene.trigger(\"remove\");\n\t\t\t\tlog(3, \"removed \" + NAMESPACE + \" from controller\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * Destroy the scene and everything.\n\t\t * @method ScrollMagic.Scene#destroy\n\t\t * @example\n\t\t * // destroy the scene without resetting the pin and tween to their initial positions\n\t\t * scene = scene.destroy();\n\t\t *\n\t\t * // destroy the scene and reset the pin and tween\n\t\t * scene = scene.destroy(true);\n\t\t *\n\t\t * @param {boolean} [reset=false] - If `true` the pin and tween (if existent) will be reset.\n\t\t * @returns {null} Null to unset handler variables.\n\t\t */\n\t\tthis.destroy = function (reset) {\n\t\t\tScene.trigger(\"destroy\", {\n\t\t\t\treset: reset\n\t\t\t});\n\t\t\tScene.remove();\n\t\t\tScene.off(\"*.*\");\n\t\t\tlog(3, \"destroyed \" + NAMESPACE + \" (reset: \" + (reset ? \"true\" : \"false\") + \")\");\n\t\t\treturn null;\n\t\t};\n\n\n\t\t/**\n\t\t * Updates the Scene to reflect the current state.  \n\t\t * This is the equivalent to `Controller.updateScene(scene, immediately)`.  \n\t\t * The update method calculates the scene's start and end position (based on the trigger element, trigger hook, duration and offset) and checks it against the current scroll position of the container.  \n\t\t * It then updates the current scene state accordingly (or does nothing, if the state is already correct) – Pins will be set to their correct position and tweens will be updated to their correct progress.\n\t\t * This means an update doesn't necessarily result in a progress change. The `progress` event will be fired if the progress has indeed changed between this update and the last.  \n\t\t * _**NOTE:** This method gets called constantly whenever ScrollMagic detects a change. The only application for you is if you change something outside of the realm of ScrollMagic, like moving the trigger or changing tween parameters._\n\t\t * @method ScrollMagic.Scene#update\n\t\t * @example\n\t\t * // update the scene on next tick\n\t\t * scene.update();\n\t\t *\n\t\t * // update the scene immediately\n\t\t * scene.update(true);\n\t\t *\n\t\t * @fires Scene.update\n\t\t *\n\t\t * @param {boolean} [immediately=false] - If `true` the update will be instant, if `false` it will wait until next update cycle (better performance).\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.update = function (immediately) {\n\t\t\tif (_controller) {\n\t\t\t\tif (immediately) {\n\t\t\t\t\tif (_controller.enabled() && _enabled) {\n\t\t\t\t\t\tvar\n\t\t\t\t\t\tscrollPos = _controller.info(\"scrollPos\"),\n\t\t\t\t\t\t\tnewProgress;\n\n\t\t\t\t\t\tif (_options.duration > 0) {\n\t\t\t\t\t\t\tnewProgress = (scrollPos - _scrollOffset.start) / (_scrollOffset.end - _scrollOffset.start);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnewProgress = scrollPos >= _scrollOffset.start ? 1 : 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tScene.trigger(\"update\", {\n\t\t\t\t\t\t\tstartPos: _scrollOffset.start,\n\t\t\t\t\t\t\tendPos: _scrollOffset.end,\n\t\t\t\t\t\t\tscrollPos: scrollPos\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tScene.progress(newProgress);\n\t\t\t\t\t} else if (_pin && _state === SCENE_STATE_DURING) {\n\t\t\t\t\t\tupdatePinState(true); // unpin in position\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_controller.updateScene(Scene, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * Updates dynamic scene variables like the trigger element position or the duration.\n\t\t * This method is automatically called in regular intervals from the controller. See {@link ScrollMagic.Controller} option `refreshInterval`.\n\t\t * \n\t\t * You can call it to minimize lag, for example when you intentionally change the position of the triggerElement.\n\t\t * If you don't it will simply be updated in the next refresh interval of the container, which is usually sufficient.\n\t\t *\n\t\t * @method ScrollMagic.Scene#refresh\n\t\t * @since 1.1.0\n\t\t * @example\n\t\t * scene = new ScrollMagic.Scene({triggerElement: \"#trigger\"});\n\t\t * \n\t\t * // change the position of the trigger\n\t\t * $(\"#trigger\").css(\"top\", 500);\n\t\t * // immediately let the scene know of this change\n\t\t * scene.refresh();\n\t\t *\n\t\t * @fires {@link Scene.shift}, if the trigger element position or the duration changed\n\t\t * @fires {@link Scene.change}, if the duration changed\n\t\t *\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.refresh = function () {\n\t\t\tupdateDuration();\n\t\t\tupdateTriggerElementPosition();\n\t\t\t// update trigger element position\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * **Get** or **Set** the scene's progress.  \n\t\t * Usually it shouldn't be necessary to use this as a setter, as it is set automatically by scene.update().  \n\t\t * The order in which the events are fired depends on the duration of the scene:\n\t\t *  1. Scenes with `duration == 0`:  \n\t\t *  Scenes that have no duration by definition have no ending. Thus the `end` event will never be fired.  \n\t\t *  When the trigger position of the scene is passed the events are always fired in this order:  \n\t\t *  `enter`, `start`, `progress` when scrolling forward  \n\t\t *  and  \n\t\t *  `progress`, `start`, `leave` when scrolling in reverse\n\t\t *  2. Scenes with `duration > 0`:  \n\t\t *  Scenes with a set duration have a defined start and end point.  \n\t\t *  When scrolling past the start position of the scene it will fire these events in this order:  \n\t\t *  `enter`, `start`, `progress`  \n\t\t *  When continuing to scroll and passing the end point it will fire these events:  \n\t\t *  `progress`, `end`, `leave`  \n\t\t *  When reversing through the end point these events are fired:  \n\t\t *  `enter`, `end`, `progress`  \n\t\t *  And when continuing to scroll past the start position in reverse it will fire:  \n\t\t *  `progress`, `start`, `leave`  \n\t\t *  In between start and end the `progress` event will be called constantly, whenever the progress changes.\n\t\t * \n\t\t * In short:  \n\t\t * `enter` events will always trigger **before** the progress update and `leave` envents will trigger **after** the progress update.  \n\t\t * `start` and `end` will always trigger at their respective position.\n\t\t * \n\t\t * Please review the event descriptions for details on the events and the event object that is passed to the callback.\n\t\t * \n\t\t * @method ScrollMagic.Scene#progress\n\t\t * @example\n\t\t * // get the current scene progress\n\t\t * var progress = scene.progress();\n\t\t *\n\t\t * // set new scene progress\n\t\t * scene.progress(0.3);\n\t\t *\n\t\t * @fires {@link Scene.enter}, when used as setter\n\t\t * @fires {@link Scene.start}, when used as setter\n\t\t * @fires {@link Scene.progress}, when used as setter\n\t\t * @fires {@link Scene.end}, when used as setter\n\t\t * @fires {@link Scene.leave}, when used as setter\n\t\t *\n\t\t * @param {number} [progress] - The new progress value of the scene `[0-1]`.\n\t\t * @returns {number} `get` -  Current scene progress.\n\t\t * @returns {Scene} `set` -  Parent object for chaining.\n\t\t */\n\t\tthis.progress = function (progress) {\n\t\t\tif (!arguments.length) { // get\n\t\t\t\treturn _progress;\n\t\t\t} else { // set\n\t\t\t\tvar\n\t\t\t\tdoUpdate = false,\n\t\t\t\t\toldState = _state,\n\t\t\t\t\tscrollDirection = _controller ? _controller.info(\"scrollDirection\") : 'PAUSED',\n\t\t\t\t\treverseOrForward = _options.reverse || progress >= _progress;\n\t\t\t\tif (_options.duration === 0) {\n\t\t\t\t\t// zero duration scenes\n\t\t\t\t\tdoUpdate = _progress != progress;\n\t\t\t\t\t_progress = progress < 1 && reverseOrForward ? 0 : 1;\n\t\t\t\t\t_state = _progress === 0 ? SCENE_STATE_BEFORE : SCENE_STATE_DURING;\n\t\t\t\t} else {\n\t\t\t\t\t// scenes with start and end\n\t\t\t\t\tif (progress < 0 && _state !== SCENE_STATE_BEFORE && reverseOrForward) {\n\t\t\t\t\t\t// go back to initial state\n\t\t\t\t\t\t_progress = 0;\n\t\t\t\t\t\t_state = SCENE_STATE_BEFORE;\n\t\t\t\t\t\tdoUpdate = true;\n\t\t\t\t\t} else if (progress >= 0 && progress < 1 && reverseOrForward) {\n\t\t\t\t\t\t_progress = progress;\n\t\t\t\t\t\t_state = SCENE_STATE_DURING;\n\t\t\t\t\t\tdoUpdate = true;\n\t\t\t\t\t} else if (progress >= 1 && _state !== SCENE_STATE_AFTER) {\n\t\t\t\t\t\t_progress = 1;\n\t\t\t\t\t\t_state = SCENE_STATE_AFTER;\n\t\t\t\t\t\tdoUpdate = true;\n\t\t\t\t\t} else if (_state === SCENE_STATE_DURING && !reverseOrForward) {\n\t\t\t\t\t\tupdatePinState(); // in case we scrolled backwards mid-scene and reverse is disabled => update the pin position, so it doesn't move back as well.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (doUpdate) {\n\t\t\t\t\t// fire events\n\t\t\t\t\tvar\n\t\t\t\t\teventVars = {\n\t\t\t\t\t\tprogress: _progress,\n\t\t\t\t\t\tstate: _state,\n\t\t\t\t\t\tscrollDirection: scrollDirection\n\t\t\t\t\t},\n\t\t\t\t\t\tstateChanged = _state != oldState;\n\n\t\t\t\t\tvar trigger = function (eventName) { // tmp helper to simplify code\n\t\t\t\t\t\tScene.trigger(eventName, eventVars);\n\t\t\t\t\t};\n\n\t\t\t\t\tif (stateChanged) { // enter events\n\t\t\t\t\t\tif (oldState !== SCENE_STATE_DURING) {\n\t\t\t\t\t\t\ttrigger(\"enter\");\n\t\t\t\t\t\t\ttrigger(oldState === SCENE_STATE_BEFORE ? \"start\" : \"end\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttrigger(\"progress\");\n\t\t\t\t\tif (stateChanged) { // leave events\n\t\t\t\t\t\tif (_state !== SCENE_STATE_DURING) {\n\t\t\t\t\t\t\ttrigger(_state === SCENE_STATE_BEFORE ? \"start\" : \"end\");\n\t\t\t\t\t\t\ttrigger(\"leave\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn Scene;\n\t\t\t}\n\t\t};\n\n\n\t\t/**\n\t\t * Update the start and end scrollOffset of the container.\n\t\t * The positions reflect what the controller's scroll position will be at the start and end respectively.\n\t\t * Is called, when:\n\t\t *   - Scene event \"change\" is called with: offset, triggerHook, duration \n\t\t *   - scroll container event \"resize\" is called\n\t\t *   - the position of the triggerElement changes\n\t\t *   - the controller changes -> addTo()\n\t\t * @private\n\t\t */\n\t\tvar updateScrollOffset = function () {\n\t\t\t_scrollOffset = {\n\t\t\t\tstart: _triggerPos + _options.offset\n\t\t\t};\n\t\t\tif (_controller && _options.triggerElement) {\n\t\t\t\t// take away triggerHook portion to get relative to top\n\t\t\t\t_scrollOffset.start -= _controller.info(\"size\") * _options.triggerHook;\n\t\t\t}\n\t\t\t_scrollOffset.end = _scrollOffset.start + _options.duration;\n\t\t};\n\n\t\t/**\n\t\t * Updates the duration if set to a dynamic function.\n\t\t * This method is called when the scene is added to a controller and in regular intervals from the controller through scene.refresh().\n\t\t * \n\t\t * @fires {@link Scene.change}, if the duration changed\n\t\t * @fires {@link Scene.shift}, if the duration changed\n\t\t *\n\t\t * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.\n\t\t * @private\n\t\t */\n\t\tvar updateDuration = function (suppressEvents) {\n\t\t\t// update duration\n\t\t\tif (_durationUpdateMethod) {\n\t\t\t\tvar varname = \"duration\";\n\t\t\t\tif (changeOption(varname, _durationUpdateMethod.call(Scene)) && !suppressEvents) { // set\n\t\t\t\t\tScene.trigger(\"change\", {\n\t\t\t\t\t\twhat: varname,\n\t\t\t\t\t\tnewval: _options[varname]\n\t\t\t\t\t});\n\t\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\t\treason: varname\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Updates the position of the triggerElement, if present.\n\t\t * This method is called ...\n\t\t *  - ... when the triggerElement is changed\n\t\t *  - ... when the scene is added to a (new) controller\n\t\t *  - ... in regular intervals from the controller through scene.refresh().\n\t\t * \n\t\t * @fires {@link Scene.shift}, if the position changed\n\t\t *\n\t\t * @param {boolean} [suppressEvents=false] - If true the shift event will be suppressed.\n\t\t * @private\n\t\t */\n\t\tvar updateTriggerElementPosition = function (suppressEvents) {\n\t\t\tvar\n\t\t\telementPos = 0,\n\t\t\t\ttelem = _options.triggerElement;\n\t\t\tif (_controller && telem) {\n\t\t\t\tvar\n\t\t\t\tcontrollerInfo = _controller.info(),\n\t\t\t\t\tcontainerOffset = _util.get.offset(controllerInfo.container),\n\t\t\t\t\t// container position is needed because element offset is returned in relation to document, not in relation to container.\n\t\t\t\t\tparam = controllerInfo.vertical ? \"top\" : \"left\"; // which param is of interest ?\n\t\t\t\t// if parent is spacer, use spacer position instead so correct start position is returned for pinned elements.\n\t\t\t\twhile (telem.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) {\n\t\t\t\t\ttelem = telem.parentNode;\n\t\t\t\t}\n\n\t\t\t\tvar elementOffset = _util.get.offset(telem);\n\n\t\t\t\tif (!controllerInfo.isDocument) { // container is not the document root, so substract scroll Position to get correct trigger element position relative to scrollcontent\n\t\t\t\t\tcontainerOffset[param] -= _controller.scrollPos();\n\t\t\t\t}\n\n\t\t\t\telementPos = elementOffset[param] - containerOffset[param];\n\t\t\t}\n\t\t\tvar changed = elementPos != _triggerPos;\n\t\t\t_triggerPos = elementPos;\n\t\t\tif (changed && !suppressEvents) {\n\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\treason: \"triggerElementPosition\"\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Trigger a shift event, when the container is resized and the triggerHook is > 1.\n\t\t * @private\n\t\t */\n\t\tvar onContainerResize = function (e) {\n\t\t\tif (_options.triggerHook > 0) {\n\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\treason: \"containerResize\"\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tvar _validate = _util.extend(SCENE_OPTIONS.validate, {\n\t\t\t// validation for duration handled internally for reference to private var _durationMethod\n\t\t\tduration: function (val) {\n\t\t\t\tif (_util.type.String(val) && val.match(/^(\\.|\\d)*\\d+%$/)) {\n\t\t\t\t\t// percentage value\n\t\t\t\t\tvar perc = parseFloat(val) / 100;\n\t\t\t\t\tval = function () {\n\t\t\t\t\t\treturn _controller ? _controller.info(\"size\") * perc : 0;\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tif (_util.type.Function(val)) {\n\t\t\t\t\t// function\n\t\t\t\t\t_durationUpdateMethod = val;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = parseFloat(_durationUpdateMethod());\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tval = -1; // will cause error below\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// val has to be float\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (!_util.type.Number(val) || val < 0) {\n\t\t\t\t\tif (_durationUpdateMethod) {\n\t\t\t\t\t\t_durationUpdateMethod = undefined;\n\t\t\t\t\t\tthrow [\"Invalid return value of supplied function for option \\\"duration\\\":\", val];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow [\"Invalid value for option \\\"duration\\\":\", val];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t}\n\t\t});\n\n\t\t/**\n\t\t * Checks the validity of a specific or all options and reset to default if neccessary.\n\t\t * @private\n\t\t */\n\t\tvar validateOption = function (check) {\n\t\t\tcheck = arguments.length ? [check] : Object.keys(_validate);\n\t\t\tcheck.forEach(function (optionName, key) {\n\t\t\t\tvar value;\n\t\t\t\tif (_validate[optionName]) { // there is a validation method for this option\n\t\t\t\t\ttry { // validate value\n\t\t\t\t\t\tvalue = _validate[optionName](_options[optionName]);\n\t\t\t\t\t} catch (e) { // validation failed -> reset to default\n\t\t\t\t\t\tvalue = DEFAULT_OPTIONS[optionName];\n\t\t\t\t\t\tvar logMSG = _util.type.String(e) ? [e] : e;\n\t\t\t\t\t\tif (_util.type.Array(logMSG)) {\n\t\t\t\t\t\t\tlogMSG[0] = \"ERROR: \" + logMSG[0];\n\t\t\t\t\t\t\tlogMSG.unshift(1); // loglevel 1 for error msg\n\t\t\t\t\t\t\tlog.apply(this, logMSG);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlog(1, \"ERROR: Problem executing validation callback for option '\" + optionName + \"':\", e.message);\n\t\t\t\t\t\t}\n\t\t\t\t\t} finally {\n\t\t\t\t\t\t_options[optionName] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * Helper used by the setter/getters for scene options\n\t\t * @private\n\t\t */\n\t\tvar changeOption = function (varname, newval) {\n\t\t\tvar\n\t\t\tchanged = false,\n\t\t\t\toldval = _options[varname];\n\t\t\tif (_options[varname] != newval) {\n\t\t\t\t_options[varname] = newval;\n\t\t\t\tvalidateOption(varname); // resets to default if necessary\n\t\t\t\tchanged = oldval != _options[varname];\n\t\t\t}\n\t\t\treturn changed;\n\t\t};\n\n\t\t// generate getters/setters for all options\n\t\tvar addSceneOption = function (optionName) {\n\t\t\tif (!Scene[optionName]) {\n\t\t\t\tScene[optionName] = function (newVal) {\n\t\t\t\t\tif (!arguments.length) { // get\n\t\t\t\t\t\treturn _options[optionName];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (optionName === \"duration\") { // new duration is set, so any previously set function must be unset\n\t\t\t\t\t\t\t_durationUpdateMethod = undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (changeOption(optionName, newVal)) { // set\n\t\t\t\t\t\t\tScene.trigger(\"change\", {\n\t\t\t\t\t\t\t\twhat: optionName,\n\t\t\t\t\t\t\t\tnewval: _options[optionName]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tif (SCENE_OPTIONS.shifts.indexOf(optionName) > -1) {\n\t\t\t\t\t\t\t\tScene.trigger(\"shift\", {\n\t\t\t\t\t\t\t\t\treason: optionName\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn Scene;\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * **Get** or **Set** the duration option value.\n\t\t * As a setter it also accepts a function returning a numeric value.  \n\t\t * This is particularly useful for responsive setups.\n\t\t *\n\t\t * The duration is updated using the supplied function every time `Scene.refresh()` is called, which happens periodically from the controller (see ScrollMagic.Controller option `refreshInterval`).  \n\t\t * _**NOTE:** Be aware that it's an easy way to kill performance, if you supply a function that has high CPU demand.  \n\t\t * Even for size and position calculations it is recommended to use a variable to cache the value. (see example)  \n\t\t * This counts double if you use the same function for multiple scenes._\n\t\t *\n\t\t * @method ScrollMagic.Scene#duration\n\t\t * @example\n\t\t * // get the current duration value\n\t\t * var duration = scene.duration();\n\t\t *\n\t\t * // set a new duration\n\t\t * scene.duration(300);\n\t\t *\n\t\t * // use a function to automatically adjust the duration to the window height.\n\t\t * var durationValueCache;\n\t\t * function getDuration () {\n\t\t *   return durationValueCache;\n\t\t * }\n\t\t * function updateDuration (e) {\n\t\t *   durationValueCache = window.innerHeight;\n\t\t * }\n\t\t * $(window).on(\"resize\", updateDuration); // update the duration when the window size changes\n\t\t * $(window).triggerHandler(\"resize\"); // set to initial value\n\t\t * scene.duration(getDuration); // supply duration method\n\t\t *\n\t\t * @fires {@link Scene.change}, when used as setter\n\t\t * @fires {@link Scene.shift}, when used as setter\n\t\t * @param {(number|function)} [newDuration] - The new duration of the scene.\n\t\t * @returns {number} `get` -  Current scene duration.\n\t\t * @returns {Scene} `set` -  Parent object for chaining.\n\t\t */\n\n\t\t/**\n\t\t * **Get** or **Set** the offset option value.\n\t\t * @method ScrollMagic.Scene#offset\n\t\t * @example\n\t\t * // get the current offset\n\t\t * var offset = scene.offset();\n\t\t *\n\t\t * // set a new offset\n\t\t * scene.offset(100);\n\t\t *\n\t\t * @fires {@link Scene.change}, when used as setter\n\t\t * @fires {@link Scene.shift}, when used as setter\n\t\t * @param {number} [newOffset] - The new offset of the scene.\n\t\t * @returns {number} `get` -  Current scene offset.\n\t\t * @returns {Scene} `set` -  Parent object for chaining.\n\t\t */\n\n\t\t/**\n\t\t * **Get** or **Set** the triggerElement option value.\n\t\t * Does **not** fire `Scene.shift`, because changing the trigger Element doesn't necessarily mean the start position changes. This will be determined in `Scene.refresh()`, which is automatically triggered.\n\t\t * @method ScrollMagic.Scene#triggerElement\n\t\t * @example\n\t\t * // get the current triggerElement\n\t\t * var triggerElement = scene.triggerElement();\n\t\t *\n\t\t * // set a new triggerElement using a selector\n\t\t * scene.triggerElement(\"#trigger\");\n\t\t * // set a new triggerElement using a DOM object\n\t\t * scene.triggerElement(document.getElementById(\"trigger\"));\n\t\t *\n\t\t * @fires {@link Scene.change}, when used as setter\n\t\t * @param {(string|object)} [newTriggerElement] - The new trigger element for the scene.\n\t\t * @returns {(string|object)} `get` -  Current triggerElement.\n\t\t * @returns {Scene} `set` -  Parent object for chaining.\n\t\t */\n\n\t\t/**\n\t\t * **Get** or **Set** the triggerHook option value.\n\t\t * @method ScrollMagic.Scene#triggerHook\n\t\t * @example\n\t\t * // get the current triggerHook value\n\t\t * var triggerHook = scene.triggerHook();\n\t\t *\n\t\t * // set a new triggerHook using a string\n\t\t * scene.triggerHook(\"onLeave\");\n\t\t * // set a new triggerHook using a number\n\t\t * scene.triggerHook(0.7);\n\t\t *\n\t\t * @fires {@link Scene.change}, when used as setter\n\t\t * @fires {@link Scene.shift}, when used as setter\n\t\t * @param {(number|string)} [newTriggerHook] - The new triggerHook of the scene. See {@link Scene} parameter description for value options.\n\t\t * @returns {number} `get` -  Current triggerHook (ALWAYS numerical).\n\t\t * @returns {Scene} `set` -  Parent object for chaining.\n\t\t */\n\n\t\t/**\n\t\t * **Get** or **Set** the reverse option value.\n\t\t * @method ScrollMagic.Scene#reverse\n\t\t * @example\n\t\t * // get the current reverse option\n\t\t * var reverse = scene.reverse();\n\t\t *\n\t\t * // set new reverse option\n\t\t * scene.reverse(false);\n\t\t *\n\t\t * @fires {@link Scene.change}, when used as setter\n\t\t * @param {boolean} [newReverse] - The new reverse setting of the scene.\n\t\t * @returns {boolean} `get` -  Current reverse option value.\n\t\t * @returns {Scene} `set` -  Parent object for chaining.\n\t\t */\n\n\t\t/**\n\t\t * **Get** or **Set** the loglevel option value.\n\t\t * @method ScrollMagic.Scene#loglevel\n\t\t * @example\n\t\t * // get the current loglevel\n\t\t * var loglevel = scene.loglevel();\n\t\t *\n\t\t * // set new loglevel\n\t\t * scene.loglevel(3);\n\t\t *\n\t\t * @fires {@link Scene.change}, when used as setter\n\t\t * @param {number} [newLoglevel] - The new loglevel setting of the scene. `[0-3]`\n\t\t * @returns {number} `get` -  Current loglevel.\n\t\t * @returns {Scene} `set` -  Parent object for chaining.\n\t\t */\n\n\t\t/**\n\t\t * **Get** the associated controller.\n\t\t * @method ScrollMagic.Scene#controller\n\t\t * @example\n\t\t * // get the controller of a scene\n\t\t * var controller = scene.controller();\n\t\t *\n\t\t * @returns {ScrollMagic.Controller} Parent controller or `undefined`\n\t\t */\n\t\tthis.controller = function () {\n\t\t\treturn _controller;\n\t\t};\n\n\t\t/**\n\t\t * **Get** the current state.\n\t\t * @method ScrollMagic.Scene#state\n\t\t * @example\n\t\t * // get the current state\n\t\t * var state = scene.state();\n\t\t *\n\t\t * @returns {string} `\"BEFORE\"`, `\"DURING\"` or `\"AFTER\"`\n\t\t */\n\t\tthis.state = function () {\n\t\t\treturn _state;\n\t\t};\n\n\t\t/**\n\t\t * **Get** the current scroll offset for the start of the scene.  \n\t\t * Mind, that the scrollOffset is related to the size of the container, if `triggerHook` is bigger than `0` (or `\"onLeave\"`).  \n\t\t * This means, that resizing the container or changing the `triggerHook` will influence the scene's start offset.\n\t\t * @method ScrollMagic.Scene#scrollOffset\n\t\t * @example\n\t\t * // get the current scroll offset for the start and end of the scene.\n\t\t * var start = scene.scrollOffset();\n\t\t * var end = scene.scrollOffset() + scene.duration();\n\t\t * console.log(\"the scene starts at\", start, \"and ends at\", end);\n\t\t *\n\t\t * @returns {number} The scroll offset (of the container) at which the scene will trigger. Y value for vertical and X value for horizontal scrolls.\n\t\t */\n\t\tthis.scrollOffset = function () {\n\t\t\treturn _scrollOffset.start;\n\t\t};\n\n\t\t/**\n\t\t * **Get** the trigger position of the scene (including the value of the `offset` option).  \n\t\t * @method ScrollMagic.Scene#triggerPosition\n\t\t * @example\n\t\t * // get the scene's trigger position\n\t\t * var triggerPosition = scene.triggerPosition();\n\t\t *\n\t\t * @returns {number} Start position of the scene. Top position value for vertical and left position value for horizontal scrolls.\n\t\t */\n\t\tthis.triggerPosition = function () {\n\t\t\tvar pos = _options.offset; // the offset is the basis\n\t\t\tif (_controller) {\n\t\t\t\t// get the trigger position\n\t\t\t\tif (_options.triggerElement) {\n\t\t\t\t\t// Element as trigger\n\t\t\t\t\tpos += _triggerPos;\n\t\t\t\t} else {\n\t\t\t\t\t// return the height of the triggerHook to start at the beginning\n\t\t\t\t\tpos += _controller.info(\"size\") * Scene.triggerHook();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn pos;\n\t\t};\n\n\t\tvar\n\t\t_pin, _pinOptions;\n\n\t\tScene.on(\"shift.internal\", function (e) {\n\t\t\tvar durationChanged = e.reason === \"duration\";\n\t\t\tif ((_state === SCENE_STATE_AFTER && durationChanged) || (_state === SCENE_STATE_DURING && _options.duration === 0)) {\n\t\t\t\t// if [duration changed after a scene (inside scene progress updates pin position)] or [duration is 0, we are in pin phase and some other value changed].\n\t\t\t\tupdatePinState();\n\t\t\t}\n\t\t\tif (durationChanged) {\n\t\t\t\tupdatePinDimensions();\n\t\t\t}\n\t\t}).on(\"progress.internal\", function (e) {\n\t\t\tupdatePinState();\n\t\t}).on(\"add.internal\", function (e) {\n\t\t\tupdatePinDimensions();\n\t\t}).on(\"destroy.internal\", function (e) {\n\t\t\tScene.removePin(e.reset);\n\t\t});\n\t\t/**\n\t\t * Update the pin state.\n\t\t * @private\n\t\t */\n\t\tvar updatePinState = function (forceUnpin) {\n\t\t\tif (_pin && _controller) {\n\t\t\t\tvar\n\t\t\t\tcontainerInfo = _controller.info(),\n\t\t\t\t\tpinTarget = _pinOptions.spacer.firstChild; // may be pin element or another spacer, if cascading pins\n\t\t\t\tif (!forceUnpin && _state === SCENE_STATE_DURING) { // during scene or if duration is 0 and we are past the trigger\n\t\t\t\t\t// pinned state\n\t\t\t\t\tif (_util.css(pinTarget, \"position\") != \"fixed\") {\n\t\t\t\t\t\t// change state before updating pin spacer (position changes due to fixed collapsing might occur.)\n\t\t\t\t\t\t_util.css(pinTarget, {\n\t\t\t\t\t\t\t\"position\": \"fixed\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// update pin spacer\n\t\t\t\t\t\tupdatePinDimensions();\n\t\t\t\t\t}\n\n\t\t\t\t\tvar\n\t\t\t\t\tfixedPos = _util.get.offset(_pinOptions.spacer, true),\n\t\t\t\t\t\t// get viewport position of spacer\n\t\t\t\t\t\tscrollDistance = _options.reverse || _options.duration === 0 ? containerInfo.scrollPos - _scrollOffset.start // quicker\n\t\t\t\t\t\t: Math.round(_progress * _options.duration * 10) / 10; // if no reverse and during pin the position needs to be recalculated using the progress\n\t\t\t\t\t// add scrollDistance\n\t\t\t\t\tfixedPos[containerInfo.vertical ? \"top\" : \"left\"] += scrollDistance;\n\n\t\t\t\t\t// set new values\n\t\t\t\t\t_util.css(_pinOptions.spacer.firstChild, {\n\t\t\t\t\t\ttop: fixedPos.top,\n\t\t\t\t\t\tleft: fixedPos.left\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// unpinned state\n\t\t\t\t\tvar\n\t\t\t\t\tnewCSS = {\n\t\t\t\t\t\tposition: _pinOptions.inFlow ? \"relative\" : \"absolute\",\n\t\t\t\t\t\ttop: 0,\n\t\t\t\t\t\tleft: 0\n\t\t\t\t\t},\n\t\t\t\t\t\tchange = _util.css(pinTarget, \"position\") != newCSS.position;\n\n\t\t\t\t\tif (!_pinOptions.pushFollowers) {\n\t\t\t\t\t\tnewCSS[containerInfo.vertical ? \"top\" : \"left\"] = _options.duration * _progress;\n\t\t\t\t\t} else if (_options.duration > 0) { // only concerns scenes with duration\n\t\t\t\t\t\tif (_state === SCENE_STATE_AFTER && parseFloat(_util.css(_pinOptions.spacer, \"padding-top\")) === 0) {\n\t\t\t\t\t\t\tchange = true; // if in after state but havent updated spacer yet (jumped past pin)\n\t\t\t\t\t\t} else if (_state === SCENE_STATE_BEFORE && parseFloat(_util.css(_pinOptions.spacer, \"padding-bottom\")) === 0) { // before\n\t\t\t\t\t\t\tchange = true; // jumped past fixed state upward direction\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// set new values\n\t\t\t\t\t_util.css(pinTarget, newCSS);\n\t\t\t\t\tif (change) {\n\t\t\t\t\t\t// update pin spacer if state changed\n\t\t\t\t\t\tupdatePinDimensions();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Update the pin spacer and/or element size.\n\t\t * The size of the spacer needs to be updated whenever the duration of the scene changes, if it is to push down following elements.\n\t\t * @private\n\t\t */\n\t\tvar updatePinDimensions = function () {\n\t\t\tif (_pin && _controller && _pinOptions.inFlow) { // no spacerresize, if original position is absolute\n\t\t\t\tvar\n\t\t\t\tafter = (_state === SCENE_STATE_AFTER),\n\t\t\t\t\tbefore = (_state === SCENE_STATE_BEFORE),\n\t\t\t\t\tduring = (_state === SCENE_STATE_DURING),\n\t\t\t\t\tvertical = _controller.info(\"vertical\"),\n\t\t\t\t\tpinTarget = _pinOptions.spacer.firstChild,\n\t\t\t\t\t// usually the pined element but can also be another spacer (cascaded pins)\n\t\t\t\t\tmarginCollapse = _util.isMarginCollapseType(_util.css(_pinOptions.spacer, \"display\")),\n\t\t\t\t\tcss = {};\n\n\t\t\t\t// set new size\n\t\t\t\t// if relsize: spacer -> pin | else: pin -> spacer\n\t\t\t\tif (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {\n\t\t\t\t\tif (during) {\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"width\": _util.get.width(_pinOptions.spacer)\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"width\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// minwidth is needed for cascaded pins.\n\t\t\t\t\tcss[\"min-width\"] = _util.get.width(vertical ? _pin : pinTarget, true, true);\n\t\t\t\t\tcss.width = during ? css[\"min-width\"] : \"auto\";\n\t\t\t\t}\n\t\t\t\tif (_pinOptions.relSize.height) {\n\t\t\t\t\tif (during) {\n\t\t\t\t\t\t// the only padding the spacer should ever include is the duration (if pushFollowers = true), so we need to substract that.\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"height\": _util.get.height(_pinOptions.spacer) - (_pinOptions.pushFollowers ? _options.duration : 0)\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_util.css(_pin, {\n\t\t\t\t\t\t\t\"height\": \"100%\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// margin is only included if it's a cascaded pin to resolve an IE9 bug\n\t\t\t\t\tcss[\"min-height\"] = _util.get.height(vertical ? pinTarget : _pin, true, !marginCollapse); // needed for cascading pins\n\t\t\t\t\tcss.height = during ? css[\"min-height\"] : \"auto\";\n\t\t\t\t}\n\n\t\t\t\t// add space for duration if pushFollowers is true\n\t\t\t\tif (_pinOptions.pushFollowers) {\n\t\t\t\t\tcss[\"padding\" + (vertical ? \"Top\" : \"Left\")] = _options.duration * _progress;\n\t\t\t\t\tcss[\"padding\" + (vertical ? \"Bottom\" : \"Right\")] = _options.duration * (1 - _progress);\n\t\t\t\t}\n\t\t\t\t_util.css(_pinOptions.spacer, css);\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Updates the Pin state (in certain scenarios)\n\t\t * If the controller container is not the document and we are mid-pin-phase scrolling or resizing the main document can result to wrong pin positions.\n\t\t * So this function is called on resize and scroll of the document.\n\t\t * @private\n\t\t */\n\t\tvar updatePinInContainer = function () {\n\t\t\tif (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info(\"isDocument\")) {\n\t\t\t\tupdatePinState();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Updates the Pin spacer size state (in certain scenarios)\n\t\t * If container is resized during pin and relatively sized the size of the pin might need to be updated...\n\t\t * So this function is called on resize of the container.\n\t\t * @private\n\t\t */\n\t\tvar updateRelativePinSpacer = function () {\n\t\t\tif (_controller && _pin && // well, duh\n\t\t\t_state === SCENE_STATE_DURING && // element in pinned state?\n\t\t\t( // is width or height relatively sized, but not in relation to body? then we need to recalc.\n\t\t\t((_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) && _util.get.width(window) != _util.get.width(_pinOptions.spacer.parentNode)) || (_pinOptions.relSize.height && _util.get.height(window) != _util.get.height(_pinOptions.spacer.parentNode)))) {\n\t\t\t\tupdatePinDimensions();\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Is called, when the mousewhel is used while over a pinned element inside a div container.\n\t\t * If the scene is in fixed state scroll events would be counted towards the body. This forwards the event to the scroll container.\n\t\t * @private\n\t\t */\n\t\tvar onMousewheelOverPin = function (e) {\n\t\t\tif (_controller && _pin && _state === SCENE_STATE_DURING && !_controller.info(\"isDocument\")) { // in pin state\n\t\t\t\te.preventDefault();\n\t\t\t\t_controller._setScrollPos(_controller.info(\"scrollPos\") - ((e.wheelDelta || e[_controller.info(\"vertical\") ? \"wheelDeltaY\" : \"wheelDeltaX\"]) / 3 || -e.detail * 30));\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * Pin an element for the duration of the tween.  \n\t\t * If the scene duration is 0 the element will only be unpinned, if the user scrolls back past the start position.  \n\t\t * Make sure only one pin is applied to an element at the same time.\n\t\t * An element can be pinned multiple times, but only successively.\n\t\t * _**NOTE:** The option `pushFollowers` has no effect, when the scene duration is 0._\n\t\t * @method ScrollMagic.Scene#setPin\n\t\t * @example\n\t\t * // pin element and push all following elements down by the amount of the pin duration.\n\t\t * scene.setPin(\"#pin\");\n\t\t *\n\t\t * // pin element and keeping all following elements in their place. The pinned element will move past them.\n\t\t * scene.setPin(\"#pin\", {pushFollowers: false});\n\t\t *\n\t\t * @param {(string|object)} element - A Selector targeting an element or a DOM object that is supposed to be pinned.\n\t\t * @param {object} [settings] - settings for the pin\n\t\t * @param {boolean} [settings.pushFollowers=true] - If `true` following elements will be \"pushed\" down for the duration of the pin, if `false` the pinned element will just scroll past them.  \n\t\t Ignored, when duration is `0`.\n\t\t * @param {string} [settings.spacerClass=\"scrollmagic-pin-spacer\"] - Classname of the pin spacer element, which is used to replace the element.\n\t\t *\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.setPin = function (element, settings) {\n\t\t\tvar\n\t\t\tdefaultSettings = {\n\t\t\t\tpushFollowers: true,\n\t\t\t\tspacerClass: \"scrollmagic-pin-spacer\"\n\t\t\t};\n\t\t\tsettings = _util.extend({}, defaultSettings, settings);\n\n\t\t\t// validate Element\n\t\t\telement = _util.get.elements(element)[0];\n\t\t\tif (!element) {\n\t\t\t\tlog(1, \"ERROR calling method 'setPin()': Invalid pin element supplied.\");\n\t\t\t\treturn Scene; // cancel\n\t\t\t} else if (_util.css(element, \"position\") === \"fixed\") {\n\t\t\t\tlog(1, \"ERROR calling method 'setPin()': Pin does not work with elements that are positioned 'fixed'.\");\n\t\t\t\treturn Scene; // cancel\n\t\t\t}\n\n\t\t\tif (_pin) { // preexisting pin?\n\t\t\t\tif (_pin === element) {\n\t\t\t\t\t// same pin we already have -> do nothing\n\t\t\t\t\treturn Scene; // cancel\n\t\t\t\t} else {\n\t\t\t\t\t// kill old pin\n\t\t\t\t\tScene.removePin();\n\t\t\t\t}\n\n\t\t\t}\n\t\t\t_pin = element;\n\n\t\t\tvar\n\t\t\tparentDisplay = _pin.parentNode.style.display,\n\t\t\t\tboundsParams = [\"top\", \"left\", \"bottom\", \"right\", \"margin\", \"marginLeft\", \"marginRight\", \"marginTop\", \"marginBottom\"];\n\n\t\t\t_pin.parentNode.style.display = 'none'; // hack start to force css to return stylesheet values instead of calculated px values.\n\t\t\tvar\n\t\t\tinFlow = _util.css(_pin, \"position\") != \"absolute\",\n\t\t\t\tpinCSS = _util.css(_pin, boundsParams.concat([\"display\"])),\n\t\t\t\tsizeCSS = _util.css(_pin, [\"width\", \"height\"]);\n\t\t\t_pin.parentNode.style.display = parentDisplay; // hack end.\n\t\t\tif (!inFlow && settings.pushFollowers) {\n\t\t\t\tlog(2, \"WARNING: If the pinned element is positioned absolutely pushFollowers will be disabled.\");\n\t\t\t\tsettings.pushFollowers = false;\n\t\t\t}\n\t\t\twindow.setTimeout(function () { // wait until all finished, because with responsive duration it will only be set after scene is added to controller\n\t\t\t\tif (_pin && _options.duration === 0 && settings.pushFollowers) {\n\t\t\t\t\tlog(2, \"WARNING: pushFollowers =\", true, \"has no effect, when scene duration is 0.\");\n\t\t\t\t}\n\t\t\t}, 0);\n\n\t\t\t// create spacer and insert\n\t\t\tvar\n\t\t\tspacer = _pin.parentNode.insertBefore(document.createElement('div'), _pin),\n\t\t\t\tspacerCSS = _util.extend(pinCSS, {\n\t\t\t\t\tposition: inFlow ? \"relative\" : \"absolute\",\n\t\t\t\t\tboxSizing: \"content-box\",\n\t\t\t\t\tmozBoxSizing: \"content-box\",\n\t\t\t\t\twebkitBoxSizing: \"content-box\"\n\t\t\t\t});\n\n\t\t\tif (!inFlow) { // copy size if positioned absolutely, to work for bottom/right positioned elements.\n\t\t\t\t_util.extend(spacerCSS, _util.css(_pin, [\"width\", \"height\"]));\n\t\t\t}\n\n\t\t\t_util.css(spacer, spacerCSS);\n\t\t\tspacer.setAttribute(PIN_SPACER_ATTRIBUTE, \"\");\n\t\t\t_util.addClass(spacer, settings.spacerClass);\n\n\t\t\t// set the pin Options\n\t\t\t_pinOptions = {\n\t\t\t\tspacer: spacer,\n\t\t\t\trelSize: { // save if size is defined using % values. if so, handle spacer resize differently...\n\t\t\t\t\twidth: sizeCSS.width.slice(-1) === \"%\",\n\t\t\t\t\theight: sizeCSS.height.slice(-1) === \"%\",\n\t\t\t\t\tautoFullWidth: sizeCSS.width === \"auto\" && inFlow && _util.isMarginCollapseType(pinCSS.display)\n\t\t\t\t},\n\t\t\t\tpushFollowers: settings.pushFollowers,\n\t\t\t\tinFlow: inFlow,\n\t\t\t\t// stores if the element takes up space in the document flow\n\t\t\t};\n\n\t\t\tif (!_pin.___origStyle) {\n\t\t\t\t_pin.___origStyle = {};\n\t\t\t\tvar\n\t\t\t\tpinInlineCSS = _pin.style,\n\t\t\t\t\tcopyStyles = boundsParams.concat([\"width\", \"height\", \"position\", \"boxSizing\", \"mozBoxSizing\", \"webkitBoxSizing\"]);\n\t\t\t\tcopyStyles.forEach(function (val) {\n\t\t\t\t\t_pin.___origStyle[val] = pinInlineCSS[val] || \"\";\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// if relative size, transfer it to spacer and make pin calculate it...\n\t\t\tif (_pinOptions.relSize.width) {\n\t\t\t\t_util.css(spacer, {\n\t\t\t\t\twidth: sizeCSS.width\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (_pinOptions.relSize.height) {\n\t\t\t\t_util.css(spacer, {\n\t\t\t\t\theight: sizeCSS.height\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// now place the pin element inside the spacer\t\n\t\t\tspacer.appendChild(_pin);\n\t\t\t// and set new css\n\t\t\t_util.css(_pin, {\n\t\t\t\tposition: inFlow ? \"relative\" : \"absolute\",\n\t\t\t\tmargin: \"auto\",\n\t\t\t\ttop: \"auto\",\n\t\t\t\tleft: \"auto\",\n\t\t\t\tbottom: \"auto\",\n\t\t\t\tright: \"auto\"\n\t\t\t});\n\n\t\t\tif (_pinOptions.relSize.width || _pinOptions.relSize.autoFullWidth) {\n\t\t\t\t_util.css(_pin, {\n\t\t\t\t\tboxSizing: \"border-box\",\n\t\t\t\t\tmozBoxSizing: \"border-box\",\n\t\t\t\t\twebkitBoxSizing: \"border-box\"\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// add listener to document to update pin position in case controller is not the document.\n\t\t\twindow.addEventListener('scroll', updatePinInContainer);\n\t\t\twindow.addEventListener('resize', updatePinInContainer);\n\t\t\twindow.addEventListener('resize', updateRelativePinSpacer);\n\t\t\t// add mousewheel listener to catch scrolls over fixed elements\n\t\t\t_pin.addEventListener(\"mousewheel\", onMousewheelOverPin);\n\t\t\t_pin.addEventListener(\"DOMMouseScroll\", onMousewheelOverPin);\n\n\t\t\tlog(3, \"added pin\");\n\n\t\t\t// finally update the pin to init\n\t\t\tupdatePinState();\n\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * Remove the pin from the scene.\n\t\t * @method ScrollMagic.Scene#removePin\n\t\t * @example\n\t\t * // remove the pin from the scene without resetting it (the spacer is not removed)\n\t\t * scene.removePin();\n\t\t *\n\t\t * // remove the pin from the scene and reset the pin element to its initial position (spacer is removed)\n\t\t * scene.removePin(true);\n\t\t *\n\t\t * @param {boolean} [reset=false] - If `false` the spacer will not be removed and the element's position will not be reset.\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.removePin = function (reset) {\n\t\t\tif (_pin) {\n\t\t\t\tif (_state === SCENE_STATE_DURING) {\n\t\t\t\t\tupdatePinState(true); // force unpin at position\n\t\t\t\t}\n\t\t\t\tif (reset || !_controller) { // if there's no controller no progress was made anyway...\n\t\t\t\t\tvar pinTarget = _pinOptions.spacer.firstChild; // usually the pin element, but may be another spacer (cascaded pins)...\n\t\t\t\t\tif (pinTarget.hasAttribute(PIN_SPACER_ATTRIBUTE)) { // copy margins to child spacer\n\t\t\t\t\t\tvar\n\t\t\t\t\t\tstyle = _pinOptions.spacer.style,\n\t\t\t\t\t\t\tvalues = [\"margin\", \"marginLeft\", \"marginRight\", \"marginTop\", \"marginBottom\"];\n\t\t\t\t\t\tmargins = {};\n\t\t\t\t\t\tvalues.forEach(function (val) {\n\t\t\t\t\t\t\tmargins[val] = style[val] || \"\";\n\t\t\t\t\t\t});\n\t\t\t\t\t\t_util.css(pinTarget, margins);\n\t\t\t\t\t}\n\t\t\t\t\t_pinOptions.spacer.parentNode.insertBefore(pinTarget, _pinOptions.spacer);\n\t\t\t\t\t_pinOptions.spacer.parentNode.removeChild(_pinOptions.spacer);\n\t\t\t\t\tif (!_pin.parentNode.hasAttribute(PIN_SPACER_ATTRIBUTE)) { // if it's the last pin for this element -> restore inline styles\n\t\t\t\t\t\t// TODO: only correctly set for first pin (when cascading) - how to fix?\n\t\t\t\t\t\t_util.css(_pin, _pin.___origStyle);\n\t\t\t\t\t\tdelete _pin.___origStyle;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twindow.removeEventListener('scroll', updatePinInContainer);\n\t\t\t\twindow.removeEventListener('resize', updatePinInContainer);\n\t\t\t\twindow.removeEventListener('resize', updateRelativePinSpacer);\n\t\t\t\t_pin.removeEventListener(\"mousewheel\", onMousewheelOverPin);\n\t\t\t\t_pin.removeEventListener(\"DOMMouseScroll\", onMousewheelOverPin);\n\t\t\t\t_pin = undefined;\n\t\t\t\tlog(3, \"removed pin (reset: \" + (reset ? \"true\" : \"false\") + \")\");\n\t\t\t}\n\t\t\treturn Scene;\n\t\t};\n\n\n\t\tvar\n\t\t_cssClasses, _cssClassElems = [];\n\n\t\tScene.on(\"destroy.internal\", function (e) {\n\t\t\tScene.removeClassToggle(e.reset);\n\t\t});\n\t\t/**\n\t\t * Define a css class modification while the scene is active.  \n\t\t * When the scene triggers the classes will be added to the supplied element and removed, when the scene is over.\n\t\t * If the scene duration is 0 the classes will only be removed if the user scrolls back past the start position.\n\t\t * @method ScrollMagic.Scene#setClassToggle\n\t\t * @example\n\t\t * // add the class 'myclass' to the element with the id 'my-elem' for the duration of the scene\n\t\t * scene.setClassToggle(\"#my-elem\", \"myclass\");\n\t\t *\n\t\t * // add multiple classes to multiple elements defined by the selector '.classChange'\n\t\t * scene.setClassToggle(\".classChange\", \"class1 class2 class3\");\n\t\t *\n\t\t * @param {(string|object)} element - A Selector targeting one or more elements or a DOM object that is supposed to be modified.\n\t\t * @param {string} classes - One or more Classnames (separated by space) that should be added to the element during the scene.\n\t\t *\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.setClassToggle = function (element, classes) {\n\t\t\tvar elems = _util.get.elements(element);\n\t\t\tif (elems.length === 0 || !_util.type.String(classes)) {\n\t\t\t\tlog(1, \"ERROR calling method 'setClassToggle()': Invalid \" + (elems.length === 0 ? \"element\" : \"classes\") + \" supplied.\");\n\t\t\t\treturn Scene;\n\t\t\t}\n\t\t\tif (_cssClassElems.length > 0) {\n\t\t\t\t// remove old ones\n\t\t\t\tScene.removeClassToggle();\n\t\t\t}\n\t\t\t_cssClasses = classes;\n\t\t\t_cssClassElems = elems;\n\t\t\tScene.on(\"enter.internal_class leave.internal_class\", function (e) {\n\t\t\t\tvar toggle = e.type === \"enter\" ? _util.addClass : _util.removeClass;\n\t\t\t\t_cssClassElems.forEach(function (elem, key) {\n\t\t\t\t\ttoggle(elem, _cssClasses);\n\t\t\t\t});\n\t\t\t});\n\t\t\treturn Scene;\n\t\t};\n\n\t\t/**\n\t\t * Remove the class binding from the scene.\n\t\t * @method ScrollMagic.Scene#removeClassToggle\n\t\t * @example\n\t\t * // remove class binding from the scene without reset\n\t\t * scene.removeClassToggle();\n\t\t *\n\t\t * // remove class binding and remove the changes it caused\n\t\t * scene.removeClassToggle(true);\n\t\t *\n\t\t * @param {boolean} [reset=false] - If `false` and the classes are currently active, they will remain on the element. If `true` they will be removed.\n\t\t * @returns {Scene} Parent object for chaining.\n\t\t */\n\t\tthis.removeClassToggle = function (reset) {\n\t\t\tif (reset) {\n\t\t\t\t_cssClassElems.forEach(function (elem, key) {\n\t\t\t\t\t_util.removeClass(elem, _cssClasses);\n\t\t\t\t});\n\t\t\t}\n\t\t\tScene.off(\"start.internal_class end.internal_class\");\n\t\t\t_cssClasses = undefined;\n\t\t\t_cssClassElems = [];\n\t\t\treturn Scene;\n\t\t};\n\n\t\t// INIT\n\t\tconstruct();\n\t\treturn Scene;\n\t};\n\n\t// store pagewide scene options\n\tvar SCENE_OPTIONS = {\n\t\tdefaults: {\n\t\t\tduration: 0,\n\t\t\toffset: 0,\n\t\t\ttriggerElement: undefined,\n\t\t\ttriggerHook: 0.5,\n\t\t\treverse: true,\n\t\t\tloglevel: 2\n\t\t},\n\t\tvalidate: {\n\t\t\toffset: function (val) {\n\t\t\t\tval = parseFloat(val);\n\t\t\t\tif (!_util.type.Number(val)) {\n\t\t\t\t\tthrow [\"Invalid value for option \\\"offset\\\":\", val];\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t},\n\t\t\ttriggerElement: function (val) {\n\t\t\t\tval = val || undefined;\n\t\t\t\tif (val) {\n\t\t\t\t\tvar elem = _util.get.elements(val)[0];\n\t\t\t\t\tif (elem) {\n\t\t\t\t\t\tval = elem;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow [\"Element defined in option \\\"triggerElement\\\" was not found:\", val];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t},\n\t\t\ttriggerHook: function (val) {\n\t\t\t\tvar translate = {\n\t\t\t\t\t\"onCenter\": 0.5,\n\t\t\t\t\t\"onEnter\": 1,\n\t\t\t\t\t\"onLeave\": 0\n\t\t\t\t};\n\t\t\t\tif (_util.type.Number(val)) {\n\t\t\t\t\tval = Math.max(0, Math.min(parseFloat(val), 1)); //  make sure its betweeen 0 and 1\n\t\t\t\t} else if (val in translate) {\n\t\t\t\t\tval = translate[val];\n\t\t\t\t} else {\n\t\t\t\t\tthrow [\"Invalid value for option \\\"triggerHook\\\": \", val];\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t},\n\t\t\treverse: function (val) {\n\t\t\t\treturn !!val; // force boolean\n\t\t\t},\n\t\t\tloglevel: function (val) {\n\t\t\t\tval = parseInt(val);\n\t\t\t\tif (!_util.type.Number(val) || val < 0 || val > 3) {\n\t\t\t\t\tthrow [\"Invalid value for option \\\"loglevel\\\":\", val];\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t}\n\t\t},\n\t\t// holder for  validation methods. duration validation is handled in 'getters-setters.js'\n\t\tshifts: [\"duration\", \"offset\", \"triggerHook\"],\n\t\t// list of options that trigger a `shift` event\n\t};\n/*\n * method used to add an option to ScrollMagic Scenes.\n * TODO: DOC (private for dev)\n */\n\tScrollMagic.Scene.addOption = function (name, defaultValue, validationCallback, shifts) {\n\t\tif (!(name in SCENE_OPTIONS.defaults)) {\n\t\t\tSCENE_OPTIONS.defaults[name] = defaultValue;\n\t\t\tSCENE_OPTIONS.validate[name] = validationCallback;\n\t\t\tif (shifts) {\n\t\t\t\tSCENE_OPTIONS.shifts.push(name);\n\t\t\t}\n\t\t} else {\n\t\t\tScrollMagic._util.log(1, \"[static] ScrollMagic.Scene -> Cannot add Scene option '\" + name + \"', because it already exists.\");\n\t\t}\n\t};\n\t// instance extension function for plugins\n\t// TODO: DOC (private for dev)\n\tScrollMagic.Scene.extend = function (extension) {\n\t\tvar oldClass = this;\n\t\tScrollMagic.Scene = function () {\n\t\t\toldClass.apply(this, arguments);\n\t\t\tthis.$super = _util.extend({}, this); // copy parent state\n\t\t\treturn extension.apply(this, arguments) || this;\n\t\t};\n\t\t_util.extend(ScrollMagic.Scene, oldClass); // copy properties\n\t\tScrollMagic.Scene.prototype = oldClass.prototype; // copy prototype\n\t\tScrollMagic.Scene.prototype.constructor = ScrollMagic.Scene; // restore constructor\n\t};\n\n\n\t/**\n\t * TODO: DOCS (private for dev)\n\t * @class\n\t * @private\n\t */\n\n\tScrollMagic.Event = function (type, namespace, target, vars) {\n\t\tvars = vars || {};\n\t\tfor (var key in vars) {\n\t\t\tthis[key] = vars[key];\n\t\t}\n\t\tthis.type = type;\n\t\tthis.target = this.currentTarget = target;\n\t\tthis.namespace = namespace || '';\n\t\tthis.timeStamp = this.timestamp = Date.now();\n\t\treturn this;\n\t};\n\n/*\n * TODO: DOCS (private for dev)\n */\n\n\tvar _util = ScrollMagic._util = (function (window) {\n\t\tvar U = {},\n\t\t\ti;\n\n\t\t/**\n\t\t * ------------------------------\n\t\t * internal helpers\n\t\t * ------------------------------\n\t\t */\n\n\t\t// parse float and fall back to 0.\n\t\tvar floatval = function (number) {\n\t\t\treturn parseFloat(number) || 0;\n\t\t};\n\t\t// get current style IE safe (otherwise IE would return calculated values for 'auto')\n\t\tvar _getComputedStyle = function (elem) {\n\t\t\treturn elem.currentStyle ? elem.currentStyle : window.getComputedStyle(elem);\n\t\t};\n\n\t\t// get element dimension (width or height)\n\t\tvar _dimension = function (which, elem, outer, includeMargin) {\n\t\t\telem = (elem === document) ? window : elem;\n\t\t\tif (elem === window) {\n\t\t\t\tincludeMargin = false;\n\t\t\t} else if (!_type.DomElement(elem)) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\twhich = which.charAt(0).toUpperCase() + which.substr(1).toLowerCase();\n\t\t\tvar dimension = (outer ? elem['offset' + which] || elem['outer' + which] : elem['client' + which] || elem['inner' + which]) || 0;\n\t\t\tif (outer && includeMargin) {\n\t\t\t\tvar style = _getComputedStyle(elem);\n\t\t\t\tdimension += which === 'Height' ? floatval(style.marginTop) + floatval(style.marginBottom) : floatval(style.marginLeft) + floatval(style.marginRight);\n\t\t\t}\n\t\t\treturn dimension;\n\t\t};\n\t\t// converts 'margin-top' into 'marginTop'\n\t\tvar _camelCase = function (str) {\n\t\t\treturn str.replace(/^[^a-z]+([a-z])/g, '$1').replace(/-([a-z])/g, function (g) {\n\t\t\t\treturn g[1].toUpperCase();\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * ------------------------------\n\t\t * external helpers\n\t\t * ------------------------------\n\t\t */\n\n\t\t// extend obj – same as jQuery.extend({}, objA, objB)\n\t\tU.extend = function (obj) {\n\t\t\tobj = obj || {};\n\t\t\tfor (i = 1; i < arguments.length; i++) {\n\t\t\t\tif (!arguments[i]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (var key in arguments[i]) {\n\t\t\t\t\tif (arguments[i].hasOwnProperty(key)) {\n\t\t\t\t\t\tobj[key] = arguments[i][key];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\t// check if a css display type results in margin-collapse or not\n\t\tU.isMarginCollapseType = function (str) {\n\t\t\treturn [\"block\", \"flex\", \"list-item\", \"table\", \"-webkit-box\"].indexOf(str) > -1;\n\t\t};\n\n\t\t// implementation of requestAnimationFrame\n\t\t// based on https://gist.github.com/paulirish/1579671\n\t\tvar\n\t\tlastTime = 0,\n\t\t\tvendors = ['ms', 'moz', 'webkit', 'o'];\n\t\tvar _requestAnimationFrame = window.requestAnimationFrame;\n\t\tvar _cancelAnimationFrame = window.cancelAnimationFrame;\n\t\t// try vendor prefixes if the above doesn't work\n\t\tfor (i = 0; !_requestAnimationFrame && i < vendors.length; ++i) {\n\t\t\t_requestAnimationFrame = window[vendors[i] + 'RequestAnimationFrame'];\n\t\t\t_cancelAnimationFrame = window[vendors[i] + 'CancelAnimationFrame'] || window[vendors[i] + 'CancelRequestAnimationFrame'];\n\t\t}\n\n\t\t// fallbacks\n\t\tif (!_requestAnimationFrame) {\n\t\t\t_requestAnimationFrame = function (callback) {\n\t\t\t\tvar\n\t\t\t\tcurrTime = new Date().getTime(),\n\t\t\t\t\ttimeToCall = Math.max(0, 16 - (currTime - lastTime)),\n\t\t\t\t\tid = window.setTimeout(function () {\n\t\t\t\t\t\tcallback(currTime + timeToCall);\n\t\t\t\t\t}, timeToCall);\n\t\t\t\tlastTime = currTime + timeToCall;\n\t\t\t\treturn id;\n\t\t\t};\n\t\t}\n\t\tif (!_cancelAnimationFrame) {\n\t\t\t_cancelAnimationFrame = function (id) {\n\t\t\t\twindow.clearTimeout(id);\n\t\t\t};\n\t\t}\n\t\tU.rAF = _requestAnimationFrame.bind(window);\n\t\tU.cAF = _cancelAnimationFrame.bind(window);\n\n\t\tvar\n\t\tloglevels = [\"error\", \"warn\", \"log\"],\n\t\t\tconsole = window.console || {};\n\n\t\tconsole.log = console.log ||\n\t\tfunction () {}; // no console log, well - do nothing then...\n\t\t// make sure methods for all levels exist.\n\t\tfor (i = 0; i < loglevels.length; i++) {\n\t\t\tvar method = loglevels[i];\n\t\t\tif (!console[method]) {\n\t\t\t\tconsole[method] = console.log; // prefer .log over nothing\n\t\t\t}\n\t\t}\n\t\tU.log = function (loglevel) {\n\t\t\tif (loglevel > loglevels.length || loglevel <= 0) loglevel = loglevels.length;\n\t\t\tvar now = new Date(),\n\t\t\t\ttime = (\"0\" + now.getHours()).slice(-2) + \":\" + (\"0\" + now.getMinutes()).slice(-2) + \":\" + (\"0\" + now.getSeconds()).slice(-2) + \":\" + (\"00\" + now.getMilliseconds()).slice(-3),\n\t\t\t\tmethod = loglevels[loglevel - 1],\n\t\t\t\targs = Array.prototype.splice.call(arguments, 1),\n\t\t\t\tfunc = Function.prototype.bind.call(console[method], console);\n\t\t\targs.unshift(time);\n\t\t\tfunc.apply(console, args);\n\t\t};\n\n\t\t/**\n\t\t * ------------------------------\n\t\t * type testing\n\t\t * ------------------------------\n\t\t */\n\n\t\tvar _type = U.type = function (v) {\n\t\t\treturn Object.prototype.toString.call(v).replace(/^\\[object (.+)\\]$/, \"$1\").toLowerCase();\n\t\t};\n\t\t_type.String = function (v) {\n\t\t\treturn _type(v) === 'string';\n\t\t};\n\t\t_type.Function = function (v) {\n\t\t\treturn _type(v) === 'function';\n\t\t};\n\t\t_type.Array = function (v) {\n\t\t\treturn Array.isArray(v);\n\t\t};\n\t\t_type.Number = function (v) {\n\t\t\treturn !_type.Array(v) && (v - parseFloat(v) + 1) >= 0;\n\t\t};\n\t\t_type.DomElement = function (o) {\n\t\t\treturn (\n\t\t\ttypeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n\t\t\to && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\");\n\t\t};\n\n\t\t/**\n\t\t * ------------------------------\n\t\t * DOM Element info\n\t\t * ------------------------------\n\t\t */\n\t\t// always returns a list of matching DOM elements, from a selector, a DOM element or an list of elements or even an array of selectors\n\t\tvar _get = U.get = {};\n\t\t_get.elements = function (selector) {\n\t\t\tvar arr = [];\n\t\t\tif (_type.String(selector)) {\n\t\t\t\ttry {\n\t\t\t\t\tselector = document.querySelectorAll(selector);\n\t\t\t\t} catch (e) { // invalid selector\n\t\t\t\t\treturn arr;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (_type(selector) === 'nodelist' || _type.Array(selector)) {\n\t\t\t\tfor (var i = 0, ref = arr.length = selector.length; i < ref; i++) { // list of elements\n\t\t\t\t\tvar elem = selector[i];\n\t\t\t\t\tarr[i] = _type.DomElement(elem) ? elem : _get.elements(elem); // if not an element, try to resolve recursively\n\t\t\t\t}\n\t\t\t} else if (_type.DomElement(selector) || selector === document || selector === window) {\n\t\t\t\tarr = [selector]; // only the element\n\t\t\t}\n\t\t\treturn arr;\n\t\t};\n\t\t// get scroll top value\n\t\t_get.scrollTop = function (elem) {\n\t\t\treturn (elem && typeof elem.scrollTop === 'number') ? elem.scrollTop : window.pageYOffset || 0;\n\t\t};\n\t\t// get scroll left value\n\t\t_get.scrollLeft = function (elem) {\n\t\t\treturn (elem && typeof elem.scrollLeft === 'number') ? elem.scrollLeft : window.pageXOffset || 0;\n\t\t};\n\t\t// get element height\n\t\t_get.width = function (elem, outer, includeMargin) {\n\t\t\treturn _dimension('width', elem, outer, includeMargin);\n\t\t};\n\t\t// get element width\n\t\t_get.height = function (elem, outer, includeMargin) {\n\t\t\treturn _dimension('height', elem, outer, includeMargin);\n\t\t};\n\n\t\t// get element position (optionally relative to viewport)\n\t\t_get.offset = function (elem, relativeToViewport) {\n\t\t\tvar offset = {\n\t\t\t\ttop: 0,\n\t\t\t\tleft: 0\n\t\t\t};\n\t\t\tif (elem && elem.getBoundingClientRect) { // check if available\n\t\t\t\tvar rect = elem.getBoundingClientRect();\n\t\t\t\toffset.top = rect.top;\n\t\t\t\toffset.left = rect.left;\n\t\t\t\tif (!relativeToViewport) { // clientRect is by default relative to viewport...\n\t\t\t\t\toffset.top += _get.scrollTop();\n\t\t\t\t\toffset.left += _get.scrollLeft();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn offset;\n\t\t};\n\n\t\t/**\n\t\t * ------------------------------\n\t\t * DOM Element manipulation\n\t\t * ------------------------------\n\t\t */\n\n\t\tU.addClass = function (elem, classname) {\n\t\t\tif (classname) {\n\t\t\t\tif (elem.classList) elem.classList.add(classname);\n\t\t\t\telse elem.className += ' ' + classname;\n\t\t\t}\n\t\t};\n\t\tU.removeClass = function (elem, classname) {\n\t\t\tif (classname) {\n\t\t\t\tif (elem.classList) elem.classList.remove(classname);\n\t\t\t\telse elem.className = elem.className.replace(new RegExp('(^|\\\\b)' + classname.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n\t\t\t}\n\t\t};\n\t\t// if options is string -> returns css value\n\t\t// if options is array -> returns object with css value pairs\n\t\t// if options is object -> set new css values\n\t\tU.css = function (elem, options) {\n\t\t\tif (_type.String(options)) {\n\t\t\t\treturn _getComputedStyle(elem)[_camelCase(options)];\n\t\t\t} else if (_type.Array(options)) {\n\t\t\t\tvar\n\t\t\t\tobj = {},\n\t\t\t\t\tstyle = _getComputedStyle(elem);\n\t\t\t\toptions.forEach(function (option, key) {\n\t\t\t\t\tobj[option] = style[_camelCase(option)];\n\t\t\t\t});\n\t\t\t\treturn obj;\n\t\t\t} else {\n\t\t\t\tfor (var option in options) {\n\t\t\t\t\tvar val = options[option];\n\t\t\t\t\tif (val == parseFloat(val)) { // assume pixel for seemingly numerical values\n\t\t\t\t\t\tval += 'px';\n\t\t\t\t\t}\n\t\t\t\t\telem.style[_camelCase(option)] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn U;\n\t}(window || {}));\n\n\tScrollMagic.Scene.prototype.addIndicators = function () {\n\t\tScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling addIndicators() due to missing Plugin \\'debug.addIndicators\\'. Please make sure to include plugins/debug.addIndicators.js');\n\t\treturn this;\n\t}\n\tScrollMagic.Scene.prototype.removeIndicators = function () {\n\t\tScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeIndicators() due to missing Plugin \\'debug.addIndicators\\'. Please make sure to include plugins/debug.addIndicators.js');\n\t\treturn this;\n\t}\n\tScrollMagic.Scene.prototype.setTween = function () {\n\t\tScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setTween() due to missing Plugin \\'animation.gsap\\'. Please make sure to include plugins/animation.gsap.js');\n\t\treturn this;\n\t}\n\tScrollMagic.Scene.prototype.removeTween = function () {\n\t\tScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeTween() due to missing Plugin \\'animation.gsap\\'. Please make sure to include plugins/animation.gsap.js');\n\t\treturn this;\n\t}\n\tScrollMagic.Scene.prototype.setVelocity = function () {\n\t\tScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling setVelocity() due to missing Plugin \\'animation.velocity\\'. Please make sure to include plugins/animation.velocity.js');\n\t\treturn this;\n\t}\n\tScrollMagic.Scene.prototype.removeVelocity = function () {\n\t\tScrollMagic._util.log(1, '(ScrollMagic.Scene) -> ERROR calling removeVelocity() due to missing Plugin \\'animation.velocity\\'. Please make sure to include plugins/animation.velocity.js');\n\t\treturn this;\n\t}\n\n\treturn ScrollMagic;\n}));","/*\n     _ _      _       _\n ___| (_) ___| | __  (_)___\n/ __| | |/ __| |/ /  | / __|\n\\__ \\ | | (__|   < _ | \\__ \\\n|___/_|_|\\___|_|\\_(_)/ |___/\n                   |__/\n\n Version: 1.6.0\n  Author: Ken Wheeler\n Website: http://kenwheeler.github.io\n    Docs: http://kenwheeler.github.io/slick\n    Repo: http://github.com/kenwheeler/slick\n  Issues: http://github.com/kenwheeler/slick/issues\n\n */\n/* global window, document, define, jQuery, setInterval, clearInterval */\n(function(factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        define(['jquery'], factory);\n    } else if (typeof exports !== 'undefined') {\n        module.exports = factory(require('jquery'));\n    } else {\n        factory(jQuery);\n    }\n\n}(function($) {\n    'use strict';\n    var Slick = window.Slick || {};\n\n    Slick = (function() {\n\n        var instanceUid = 0;\n\n        function Slick(element, settings) {\n\n            var _ = this, dataSettings;\n\n            _.defaults = {\n                accessibility: true,\n                adaptiveHeight: false,\n                appendArrows: $(element),\n                appendDots: $(element),\n                arrows: true,\n                asNavFor: null,\n                prevArrow: '<button type=\"button\" data-role=\"none\" class=\"slick-prev\" aria-label=\"Previous\" tabindex=\"0\" role=\"button\">Previous</button>',\n                nextArrow: '<button type=\"button\" data-role=\"none\" class=\"slick-next\" aria-label=\"Next\" tabindex=\"0\" role=\"button\">Next</button>',\n                autoplay: false,\n                autoplaySpeed: 3000,\n                centerMode: false,\n                centerPadding: '50px',\n                cssEase: 'ease',\n                customPaging: function(slider, i) {\n                    return $('<button type=\"button\" data-role=\"none\" role=\"button\" tabindex=\"0\" />').text(i + 1);\n                },\n                dots: false,\n                dotsClass: 'slick-dots',\n                draggable: true,\n                easing: 'linear',\n                edgeFriction: 0.35,\n                fade: false,\n                focusOnSelect: false,\n                infinite: true,\n                initialSlide: 0,\n                lazyLoad: 'ondemand',\n                mobileFirst: false,\n                pauseOnHover: true,\n                pauseOnFocus: true,\n                pauseOnDotsHover: false,\n                respondTo: 'window',\n                responsive: null,\n                rows: 1,\n                rtl: false,\n                slide: '',\n                slidesPerRow: 1,\n                slidesToShow: 1,\n                slidesToScroll: 1,\n                speed: 500,\n                swipe: true,\n                swipeToSlide: false,\n                touchMove: true,\n                touchThreshold: 5,\n                useCSS: true,\n                useTransform: true,\n                variableWidth: false,\n                vertical: false,\n                verticalSwiping: false,\n                waitForAnimate: true,\n                zIndex: 1000\n            };\n\n            _.initials = {\n                animating: false,\n                dragging: false,\n                autoPlayTimer: null,\n                currentDirection: 0,\n                currentLeft: null,\n                currentSlide: 0,\n                direction: 1,\n                $dots: null,\n                listWidth: null,\n                listHeight: null,\n                loadIndex: 0,\n                $nextArrow: null,\n                $prevArrow: null,\n                slideCount: null,\n                slideWidth: null,\n                $slideTrack: null,\n                $slides: null,\n                sliding: false,\n                slideOffset: 0,\n                swipeLeft: null,\n                $list: null,\n                touchObject: {},\n                transformsEnabled: false,\n                unslicked: false\n            };\n\n            $.extend(_, _.initials);\n\n            _.activeBreakpoint = null;\n            _.animType = null;\n            _.animProp = null;\n            _.breakpoints = [];\n            _.breakpointSettings = [];\n            _.cssTransitions = false;\n            _.focussed = false;\n            _.interrupted = false;\n            _.hidden = 'hidden';\n            _.paused = true;\n            _.positionProp = null;\n            _.respondTo = null;\n            _.rowCount = 1;\n            _.shouldClick = true;\n            _.$slider = $(element);\n            _.$slidesCache = null;\n            _.transformType = null;\n            _.transitionType = null;\n            _.visibilityChange = 'visibilitychange';\n            _.windowWidth = 0;\n            _.windowTimer = null;\n\n            dataSettings = $(element).data('slick') || {};\n\n            _.options = $.extend({}, _.defaults, settings, dataSettings);\n\n            _.currentSlide = _.options.initialSlide;\n\n            _.originalSettings = _.options;\n\n            if (typeof document.mozHidden !== 'undefined') {\n                _.hidden = 'mozHidden';\n                _.visibilityChange = 'mozvisibilitychange';\n            } else if (typeof document.webkitHidden !== 'undefined') {\n                _.hidden = 'webkitHidden';\n                _.visibilityChange = 'webkitvisibilitychange';\n            }\n\n            _.autoPlay = $.proxy(_.autoPlay, _);\n            _.autoPlayClear = $.proxy(_.autoPlayClear, _);\n            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);\n            _.changeSlide = $.proxy(_.changeSlide, _);\n            _.clickHandler = $.proxy(_.clickHandler, _);\n            _.selectHandler = $.proxy(_.selectHandler, _);\n            _.setPosition = $.proxy(_.setPosition, _);\n            _.swipeHandler = $.proxy(_.swipeHandler, _);\n            _.dragHandler = $.proxy(_.dragHandler, _);\n            _.keyHandler = $.proxy(_.keyHandler, _);\n\n            _.instanceUid = instanceUid++;\n\n            // A simple way to check for HTML strings\n            // Strict HTML recognition (must start with <)\n            // Extracted from jQuery v1.11 source\n            _.htmlExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*)$/;\n\n\n            _.registerBreakpoints();\n            _.init(true);\n\n        }\n\n        return Slick;\n\n    }());\n\n    Slick.prototype.activateADA = function() {\n        var _ = this;\n\n        _.$slideTrack.find('.slick-active').attr({\n            'aria-hidden': 'false'\n        }).find('a, input, button, select').attr({\n            'tabindex': '0'\n        });\n\n    };\n\n    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            addBefore = index;\n            index = null;\n        } else if (index < 0 || (index >= _.slideCount)) {\n            return false;\n        }\n\n        _.unload();\n\n        if (typeof(index) === 'number') {\n            if (index === 0 && _.$slides.length === 0) {\n                $(markup).appendTo(_.$slideTrack);\n            } else if (addBefore) {\n                $(markup).insertBefore(_.$slides.eq(index));\n            } else {\n                $(markup).insertAfter(_.$slides.eq(index));\n            }\n        } else {\n            if (addBefore === true) {\n                $(markup).prependTo(_.$slideTrack);\n            } else {\n                $(markup).appendTo(_.$slideTrack);\n            }\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slides.each(function(index, element) {\n            $(element).attr('data-slick-index', index);\n        });\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.animateHeight = function() {\n        var _ = this;\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.animate({\n                height: targetHeight\n            }, _.options.speed);\n        }\n    };\n\n    Slick.prototype.animateSlide = function(targetLeft, callback) {\n\n        var animProps = {},\n            _ = this;\n\n        _.animateHeight();\n\n        if (_.options.rtl === true && _.options.vertical === false) {\n            targetLeft = -targetLeft;\n        }\n        if (_.transformsEnabled === false) {\n            if (_.options.vertical === false) {\n                _.$slideTrack.animate({\n                    left: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            } else {\n                _.$slideTrack.animate({\n                    top: targetLeft\n                }, _.options.speed, _.options.easing, callback);\n            }\n\n        } else {\n\n            if (_.cssTransitions === false) {\n                if (_.options.rtl === true) {\n                    _.currentLeft = -(_.currentLeft);\n                }\n                $({\n                    animStart: _.currentLeft\n                }).animate({\n                    animStart: targetLeft\n                }, {\n                    duration: _.options.speed,\n                    easing: _.options.easing,\n                    step: function(now) {\n                        now = Math.ceil(now);\n                        if (_.options.vertical === false) {\n                            animProps[_.animType] = 'translate(' +\n                                now + 'px, 0px)';\n                            _.$slideTrack.css(animProps);\n                        } else {\n                            animProps[_.animType] = 'translate(0px,' +\n                                now + 'px)';\n                            _.$slideTrack.css(animProps);\n                        }\n                    },\n                    complete: function() {\n                        if (callback) {\n                            callback.call();\n                        }\n                    }\n                });\n\n            } else {\n\n                _.applyTransition();\n                targetLeft = Math.ceil(targetLeft);\n\n                if (_.options.vertical === false) {\n                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';\n                } else {\n                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';\n                }\n                _.$slideTrack.css(animProps);\n\n                if (callback) {\n                    setTimeout(function() {\n\n                        _.disableTransition();\n\n                        callback.call();\n                    }, _.options.speed);\n                }\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.getNavTarget = function() {\n\n        var _ = this,\n            asNavFor = _.options.asNavFor;\n\n        if ( asNavFor && asNavFor !== null ) {\n            asNavFor = $(asNavFor).not(_.$slider);\n        }\n\n        return asNavFor;\n\n    };\n\n    Slick.prototype.asNavFor = function(index) {\n\n        var _ = this,\n            asNavFor = _.getNavTarget();\n\n        if ( asNavFor !== null && typeof asNavFor === 'object' ) {\n            asNavFor.each(function() {\n                var target = $(this).slick('getSlick');\n                if(!target.unslicked) {\n                    target.slideHandler(index, true);\n                }\n            });\n        }\n\n    };\n\n    Slick.prototype.applyTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        if (_.options.fade === false) {\n            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;\n        } else {\n            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;\n        }\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.autoPlay = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        if ( _.slideCount > _.options.slidesToShow ) {\n            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );\n        }\n\n    };\n\n    Slick.prototype.autoPlayClear = function() {\n\n        var _ = this;\n\n        if (_.autoPlayTimer) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n    };\n\n    Slick.prototype.autoPlayIterator = function() {\n\n        var _ = this,\n            slideTo = _.currentSlide + _.options.slidesToScroll;\n\n        if ( !_.paused && !_.interrupted && !_.focussed ) {\n\n            if ( _.options.infinite === false ) {\n\n                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {\n                    _.direction = 0;\n                }\n\n                else if ( _.direction === 0 ) {\n\n                    slideTo = _.currentSlide - _.options.slidesToScroll;\n\n                    if ( _.currentSlide - 1 === 0 ) {\n                        _.direction = 1;\n                    }\n\n                }\n\n            }\n\n            _.slideHandler( slideTo );\n\n        }\n\n    };\n\n    Slick.prototype.buildArrows = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true ) {\n\n            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');\n            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');\n\n            if( _.slideCount > _.options.slidesToShow ) {\n\n                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');\n\n                if (_.htmlExpr.test(_.options.prevArrow)) {\n                    _.$prevArrow.prependTo(_.options.appendArrows);\n                }\n\n                if (_.htmlExpr.test(_.options.nextArrow)) {\n                    _.$nextArrow.appendTo(_.options.appendArrows);\n                }\n\n                if (_.options.infinite !== true) {\n                    _.$prevArrow\n                        .addClass('slick-disabled')\n                        .attr('aria-disabled', 'true');\n                }\n\n            } else {\n\n                _.$prevArrow.add( _.$nextArrow )\n\n                    .addClass('slick-hidden')\n                    .attr({\n                        'aria-disabled': 'true',\n                        'tabindex': '-1'\n                    });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.buildDots = function() {\n\n        var _ = this,\n            i, dot;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$slider.addClass('slick-dotted');\n\n            dot = $('<ul />').addClass(_.options.dotsClass);\n\n            for (i = 0; i <= _.getDotCount(); i += 1) {\n                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));\n            }\n\n            _.$dots = dot.appendTo(_.options.appendDots);\n\n            _.$dots.find('li').first().addClass('slick-active').attr('aria-hidden', 'false');\n\n        }\n\n    };\n\n    Slick.prototype.buildOut = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slider\n                .children( _.options.slide + ':not(.slick-cloned)')\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        _.$slides.each(function(index, element) {\n            $(element)\n                .attr('data-slick-index', index)\n                .data('originalStyling', $(element).attr('style') || '');\n        });\n\n        _.$slider.addClass('slick-slider');\n\n        _.$slideTrack = (_.slideCount === 0) ?\n            $('<div class=\"slick-track\"/>').appendTo(_.$slider) :\n            _.$slides.wrapAll('<div class=\"slick-track\"/>').parent();\n\n        _.$list = _.$slideTrack.wrap(\n            '<div aria-live=\"polite\" class=\"slick-list\"/>').parent();\n        _.$slideTrack.css('opacity', 0);\n\n        if (_.options.centerMode === true || _.options.swipeToSlide === true) {\n            _.options.slidesToScroll = 1;\n        }\n\n        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');\n\n        _.setupInfinite();\n\n        _.buildArrows();\n\n        _.buildDots();\n\n        _.updateDots();\n\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        if (_.options.draggable === true) {\n            _.$list.addClass('draggable');\n        }\n\n    };\n\n    Slick.prototype.buildRows = function() {\n\n        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;\n\n        newSlides = document.createDocumentFragment();\n        originalSlides = _.$slider.children();\n\n        if(_.options.rows > 1) {\n\n            slidesPerSection = _.options.slidesPerRow * _.options.rows;\n            numOfSlides = Math.ceil(\n                originalSlides.length / slidesPerSection\n            );\n\n            for(a = 0; a < numOfSlides; a++){\n                var slide = document.createElement('div');\n                for(b = 0; b < _.options.rows; b++) {\n                    var row = document.createElement('div');\n                    for(c = 0; c < _.options.slidesPerRow; c++) {\n                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));\n                        if (originalSlides.get(target)) {\n                            row.appendChild(originalSlides.get(target));\n                        }\n                    }\n                    slide.appendChild(row);\n                }\n                newSlides.appendChild(slide);\n            }\n\n            _.$slider.empty().append(newSlides);\n            _.$slider.children().children().children()\n                .css({\n                    'width':(100 / _.options.slidesPerRow) + '%',\n                    'display': 'inline-block'\n                });\n\n        }\n\n    };\n\n    Slick.prototype.checkResponsive = function(initial, forceUpdate) {\n\n        var _ = this,\n            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;\n        var sliderWidth = _.$slider.width();\n        var windowWidth = window.innerWidth || $(window).width();\n\n        if (_.respondTo === 'window') {\n            respondToWidth = windowWidth;\n        } else if (_.respondTo === 'slider') {\n            respondToWidth = sliderWidth;\n        } else if (_.respondTo === 'min') {\n            respondToWidth = Math.min(windowWidth, sliderWidth);\n        }\n\n        if ( _.options.responsive &&\n            _.options.responsive.length &&\n            _.options.responsive !== null) {\n\n            targetBreakpoint = null;\n\n            for (breakpoint in _.breakpoints) {\n                if (_.breakpoints.hasOwnProperty(breakpoint)) {\n                    if (_.originalSettings.mobileFirst === false) {\n                        if (respondToWidth < _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    } else {\n                        if (respondToWidth > _.breakpoints[breakpoint]) {\n                            targetBreakpoint = _.breakpoints[breakpoint];\n                        }\n                    }\n                }\n            }\n\n            if (targetBreakpoint !== null) {\n                if (_.activeBreakpoint !== null) {\n                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {\n                        _.activeBreakpoint =\n                            targetBreakpoint;\n                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                            _.unslick(targetBreakpoint);\n                        } else {\n                            _.options = $.extend({}, _.originalSettings,\n                                _.breakpointSettings[\n                                    targetBreakpoint]);\n                            if (initial === true) {\n                                _.currentSlide = _.options.initialSlide;\n                            }\n                            _.refresh(initial);\n                        }\n                        triggerBreakpoint = targetBreakpoint;\n                    }\n                } else {\n                    _.activeBreakpoint = targetBreakpoint;\n                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {\n                        _.unslick(targetBreakpoint);\n                    } else {\n                        _.options = $.extend({}, _.originalSettings,\n                            _.breakpointSettings[\n                                targetBreakpoint]);\n                        if (initial === true) {\n                            _.currentSlide = _.options.initialSlide;\n                        }\n                        _.refresh(initial);\n                    }\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            } else {\n                if (_.activeBreakpoint !== null) {\n                    _.activeBreakpoint = null;\n                    _.options = _.originalSettings;\n                    if (initial === true) {\n                        _.currentSlide = _.options.initialSlide;\n                    }\n                    _.refresh(initial);\n                    triggerBreakpoint = targetBreakpoint;\n                }\n            }\n\n            // only trigger breakpoints during an actual break. not on initialize.\n            if( !initial && triggerBreakpoint !== false ) {\n                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);\n            }\n        }\n\n    };\n\n    Slick.prototype.changeSlide = function(event, dontAnimate) {\n\n        var _ = this,\n            $target = $(event.currentTarget),\n            indexOffset, slideOffset, unevenOffset;\n\n        // If target is a link, prevent default action.\n        if($target.is('a')) {\n            event.preventDefault();\n        }\n\n        // If target is not the <li> element (ie: a child), find the <li>.\n        if(!$target.is('li')) {\n            $target = $target.closest('li');\n        }\n\n        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);\n        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;\n\n        switch (event.data.message) {\n\n            case 'previous':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'next':\n                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;\n                if (_.slideCount > _.options.slidesToShow) {\n                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);\n                }\n                break;\n\n            case 'index':\n                var index = event.data.index === 0 ? 0 :\n                    event.data.index || $target.index() * _.options.slidesToScroll;\n\n                _.slideHandler(_.checkNavigable(index), false, dontAnimate);\n                $target.children().trigger('focus');\n                break;\n\n            default:\n                return;\n        }\n\n    };\n\n    Slick.prototype.checkNavigable = function(index) {\n\n        var _ = this,\n            navigables, prevNavigable;\n\n        navigables = _.getNavigableIndexes();\n        prevNavigable = 0;\n        if (index > navigables[navigables.length - 1]) {\n            index = navigables[navigables.length - 1];\n        } else {\n            for (var n in navigables) {\n                if (index < navigables[n]) {\n                    index = prevNavigable;\n                    break;\n                }\n                prevNavigable = navigables[n];\n            }\n        }\n\n        return index;\n    };\n\n    Slick.prototype.cleanUpEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots && _.$dots !== null) {\n\n            $('li', _.$dots)\n                .off('click.slick', _.changeSlide)\n                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n        _.$slider.off('focus.slick blur.slick');\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);\n            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);\n        }\n\n        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);\n        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);\n        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);\n        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);\n\n        _.$list.off('click.slick', _.clickHandler);\n\n        $(document).off(_.visibilityChange, _.visibility);\n\n        _.cleanUpSlideEvents();\n\n        if (_.options.accessibility === true) {\n            _.$list.off('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().off('click.slick', _.selectHandler);\n        }\n\n        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);\n\n        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);\n\n        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);\n\n        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);\n        $(document).off('ready.slick.slick-' + _.instanceUid, _.setPosition);\n\n    };\n\n    Slick.prototype.cleanUpSlideEvents = function() {\n\n        var _ = this;\n\n        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));\n        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n    };\n\n    Slick.prototype.cleanUpRows = function() {\n\n        var _ = this, originalSlides;\n\n        if(_.options.rows > 1) {\n            originalSlides = _.$slides.children().children();\n            originalSlides.removeAttr('style');\n            _.$slider.empty().append(originalSlides);\n        }\n\n    };\n\n    Slick.prototype.clickHandler = function(event) {\n\n        var _ = this;\n\n        if (_.shouldClick === false) {\n            event.stopImmediatePropagation();\n            event.stopPropagation();\n            event.preventDefault();\n        }\n\n    };\n\n    Slick.prototype.destroy = function(refresh) {\n\n        var _ = this;\n\n        _.autoPlayClear();\n\n        _.touchObject = {};\n\n        _.cleanUpEvents();\n\n        $('.slick-cloned', _.$slider).detach();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n\n        if ( _.$prevArrow && _.$prevArrow.length ) {\n\n            _.$prevArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.prevArrow )) {\n                _.$prevArrow.remove();\n            }\n        }\n\n        if ( _.$nextArrow && _.$nextArrow.length ) {\n\n            _.$nextArrow\n                .removeClass('slick-disabled slick-arrow slick-hidden')\n                .removeAttr('aria-hidden aria-disabled tabindex')\n                .css('display','');\n\n            if ( _.htmlExpr.test( _.options.nextArrow )) {\n                _.$nextArrow.remove();\n            }\n\n        }\n\n\n        if (_.$slides) {\n\n            _.$slides\n                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')\n                .removeAttr('aria-hidden')\n                .removeAttr('data-slick-index')\n                .each(function(){\n                    $(this).attr('style', $(this).data('originalStyling'));\n                });\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slideTrack.detach();\n\n            _.$list.detach();\n\n            _.$slider.append(_.$slides);\n        }\n\n        _.cleanUpRows();\n\n        _.$slider.removeClass('slick-slider');\n        _.$slider.removeClass('slick-initialized');\n        _.$slider.removeClass('slick-dotted');\n\n        _.unslicked = true;\n\n        if(!refresh) {\n            _.$slider.trigger('destroy', [_]);\n        }\n\n    };\n\n    Slick.prototype.disableTransition = function(slide) {\n\n        var _ = this,\n            transition = {};\n\n        transition[_.transitionType] = '';\n\n        if (_.options.fade === false) {\n            _.$slideTrack.css(transition);\n        } else {\n            _.$slides.eq(slide).css(transition);\n        }\n\n    };\n\n    Slick.prototype.fadeSlide = function(slideIndex, callback) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).css({\n                zIndex: _.options.zIndex\n            });\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 1\n            }, _.options.speed, _.options.easing, callback);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 1,\n                zIndex: _.options.zIndex\n            });\n\n            if (callback) {\n                setTimeout(function() {\n\n                    _.disableTransition(slideIndex);\n\n                    callback.call();\n                }, _.options.speed);\n            }\n\n        }\n\n    };\n\n    Slick.prototype.fadeSlideOut = function(slideIndex) {\n\n        var _ = this;\n\n        if (_.cssTransitions === false) {\n\n            _.$slides.eq(slideIndex).animate({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            }, _.options.speed, _.options.easing);\n\n        } else {\n\n            _.applyTransition(slideIndex);\n\n            _.$slides.eq(slideIndex).css({\n                opacity: 0,\n                zIndex: _.options.zIndex - 2\n            });\n\n        }\n\n    };\n\n    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {\n\n        var _ = this;\n\n        if (filter !== null) {\n\n            _.$slidesCache = _.$slides;\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.focusHandler = function() {\n\n        var _ = this;\n\n        _.$slider\n            .off('focus.slick blur.slick')\n            .on('focus.slick blur.slick',\n                '*:not(.slick-arrow)', function(event) {\n\n            event.stopImmediatePropagation();\n            var $sf = $(this);\n\n            setTimeout(function() {\n\n                if( _.options.pauseOnFocus ) {\n                    _.focussed = $sf.is(':focus');\n                    _.autoPlay();\n                }\n\n            }, 0);\n\n        });\n    };\n\n    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {\n\n        var _ = this;\n        return _.currentSlide;\n\n    };\n\n    Slick.prototype.getDotCount = function() {\n\n        var _ = this;\n\n        var breakPoint = 0;\n        var counter = 0;\n        var pagerQty = 0;\n\n        if (_.options.infinite === true) {\n            while (breakPoint < _.slideCount) {\n                ++pagerQty;\n                breakPoint = counter + _.options.slidesToScroll;\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n            }\n        } else if (_.options.centerMode === true) {\n            pagerQty = _.slideCount;\n        } else if(!_.options.asNavFor) {\n            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);\n        }else {\n            while (breakPoint < _.slideCount) {\n                ++pagerQty;\n                breakPoint = counter + _.options.slidesToScroll;\n                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n            }\n        }\n\n        return pagerQty - 1;\n\n    };\n\n    Slick.prototype.getLeft = function(slideIndex) {\n\n        var _ = this,\n            targetLeft,\n            verticalHeight,\n            verticalOffset = 0,\n            targetSlide;\n\n        _.slideOffset = 0;\n        verticalHeight = _.$slides.first().outerHeight(true);\n\n        if (_.options.infinite === true) {\n            if (_.slideCount > _.options.slidesToShow) {\n                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;\n                verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;\n            }\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {\n                    if (slideIndex > _.slideCount) {\n                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;\n                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;\n                    } else {\n                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;\n                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;\n                    }\n                }\n            }\n        } else {\n            if (slideIndex + _.options.slidesToShow > _.slideCount) {\n                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;\n                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;\n            }\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.slideOffset = 0;\n            verticalOffset = 0;\n        }\n\n        if (_.options.centerMode === true && _.options.infinite === true) {\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;\n        } else if (_.options.centerMode === true) {\n            _.slideOffset = 0;\n            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);\n        }\n\n        if (_.options.vertical === false) {\n            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;\n        } else {\n            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;\n        }\n\n        if (_.options.variableWidth === true) {\n\n            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n            } else {\n                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);\n            }\n\n            if (_.options.rtl === true) {\n                if (targetSlide[0]) {\n                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                } else {\n                    targetLeft =  0;\n                }\n            } else {\n                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n            }\n\n            if (_.options.centerMode === true) {\n                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);\n                } else {\n                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);\n                }\n\n                if (_.options.rtl === true) {\n                    if (targetSlide[0]) {\n                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;\n                    } else {\n                        targetLeft =  0;\n                    }\n                } else {\n                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;\n                }\n\n                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;\n            }\n        }\n\n        return targetLeft;\n\n    };\n\n    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {\n\n        var _ = this;\n\n        return _.options[option];\n\n    };\n\n    Slick.prototype.getNavigableIndexes = function() {\n\n        var _ = this,\n            breakPoint = 0,\n            counter = 0,\n            indexes = [],\n            max;\n\n        if (_.options.infinite === false) {\n            max = _.slideCount;\n        } else {\n            breakPoint = _.options.slidesToScroll * -1;\n            counter = _.options.slidesToScroll * -1;\n            max = _.slideCount * 2;\n        }\n\n        while (breakPoint < max) {\n            indexes.push(breakPoint);\n            breakPoint = counter + _.options.slidesToScroll;\n            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;\n        }\n\n        return indexes;\n\n    };\n\n    Slick.prototype.getSlick = function() {\n\n        return this;\n\n    };\n\n    Slick.prototype.getSlideCount = function() {\n\n        var _ = this,\n            slidesTraversed, swipedSlide, centerOffset;\n\n        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;\n\n        if (_.options.swipeToSlide === true) {\n            _.$slideTrack.find('.slick-slide').each(function(index, slide) {\n                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {\n                    swipedSlide = slide;\n                    return false;\n                }\n            });\n\n            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;\n\n            return slidesTraversed;\n\n        } else {\n            return _.options.slidesToScroll;\n        }\n\n    };\n\n    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'index',\n                index: parseInt(slide)\n            }\n        }, dontAnimate);\n\n    };\n\n    Slick.prototype.init = function(creation) {\n\n        var _ = this;\n\n        if (!$(_.$slider).hasClass('slick-initialized')) {\n\n            $(_.$slider).addClass('slick-initialized');\n\n            _.buildRows();\n            _.buildOut();\n            _.setProps();\n            _.startLoad();\n            _.loadSlider();\n            _.initializeEvents();\n            _.updateArrows();\n            _.updateDots();\n            _.checkResponsive(true);\n            _.focusHandler();\n\n        }\n\n        if (creation) {\n            _.$slider.trigger('init', [_]);\n        }\n\n        if (_.options.accessibility === true) {\n            _.initADA();\n        }\n\n        if ( _.options.autoplay ) {\n\n            _.paused = false;\n            _.autoPlay();\n\n        }\n\n    };\n\n    Slick.prototype.initADA = function() {\n        var _ = this;\n        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({\n            'aria-hidden': 'true',\n            'tabindex': '-1'\n        }).find('a, input, button, select').attr({\n            'tabindex': '-1'\n        });\n\n        _.$slideTrack.attr('role', 'listbox');\n\n        _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {\n            $(this).attr({\n                'role': 'option',\n                'aria-describedby': 'slick-slide' + _.instanceUid + i + ''\n            });\n        });\n\n        if (_.$dots !== null) {\n            _.$dots.attr('role', 'tablist').find('li').each(function(i) {\n                $(this).attr({\n                    'role': 'presentation',\n                    'aria-selected': 'false',\n                    'aria-controls': 'navigation' + _.instanceUid + i + '',\n                    'id': 'slick-slide' + _.instanceUid + i + ''\n                });\n            })\n                .first().attr('aria-selected', 'true').end()\n                .find('button').attr('role', 'button').end()\n                .closest('div').attr('role', 'toolbar');\n        }\n        _.activateADA();\n\n    };\n\n    Slick.prototype.initArrowEvents = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n            _.$prevArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'previous'\n               }, _.changeSlide);\n            _.$nextArrow\n               .off('click.slick')\n               .on('click.slick', {\n                    message: 'next'\n               }, _.changeSlide);\n        }\n\n    };\n\n    Slick.prototype.initDotEvents = function() {\n\n        var _ = this;\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n            $('li', _.$dots).on('click.slick', {\n                message: 'index'\n            }, _.changeSlide);\n        }\n\n        if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {\n\n            $('li', _.$dots)\n                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))\n                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initSlideEvents = function() {\n\n        var _ = this;\n\n        if ( _.options.pauseOnHover ) {\n\n            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));\n            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));\n\n        }\n\n    };\n\n    Slick.prototype.initializeEvents = function() {\n\n        var _ = this;\n\n        _.initArrowEvents();\n\n        _.initDotEvents();\n        _.initSlideEvents();\n\n        _.$list.on('touchstart.slick mousedown.slick', {\n            action: 'start'\n        }, _.swipeHandler);\n        _.$list.on('touchmove.slick mousemove.slick', {\n            action: 'move'\n        }, _.swipeHandler);\n        _.$list.on('touchend.slick mouseup.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n        _.$list.on('touchcancel.slick mouseleave.slick', {\n            action: 'end'\n        }, _.swipeHandler);\n\n        _.$list.on('click.slick', _.clickHandler);\n\n        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));\n\n        if (_.options.accessibility === true) {\n            _.$list.on('keydown.slick', _.keyHandler);\n        }\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));\n\n        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));\n\n        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);\n\n        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);\n        $(document).on('ready.slick.slick-' + _.instanceUid, _.setPosition);\n\n    };\n\n    Slick.prototype.initUI = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.show();\n            _.$nextArrow.show();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.show();\n\n        }\n\n    };\n\n    Slick.prototype.keyHandler = function(event) {\n\n        var _ = this;\n         //Dont slide if the cursor is inside the form fields and arrow keys are pressed\n        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {\n            if (event.keyCode === 37 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'next' :  'previous'\n                    }\n                });\n            } else if (event.keyCode === 39 && _.options.accessibility === true) {\n                _.changeSlide({\n                    data: {\n                        message: _.options.rtl === true ? 'previous' : 'next'\n                    }\n                });\n            }\n        }\n\n    };\n\n    Slick.prototype.lazyLoad = function() {\n\n        var _ = this,\n            loadRange, cloneRange, rangeStart, rangeEnd;\n\n        function loadImages(imagesScope) {\n\n            $('img[data-lazy]', imagesScope).each(function() {\n\n                var image = $(this),\n                    imageSource = $(this).attr('data-lazy'),\n                    imageToLoad = document.createElement('img');\n\n                imageToLoad.onload = function() {\n\n                    image\n                        .animate({ opacity: 0 }, 100, function() {\n                            image\n                                .attr('src', imageSource)\n                                .animate({ opacity: 1 }, 200, function() {\n                                    image\n                                        .removeAttr('data-lazy')\n                                        .removeClass('slick-loading');\n                                });\n                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);\n                        });\n\n                };\n\n                imageToLoad.onerror = function() {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                };\n\n                imageToLoad.src = imageSource;\n\n            });\n\n        }\n\n        if (_.options.centerMode === true) {\n            if (_.options.infinite === true) {\n                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);\n                rangeEnd = rangeStart + _.options.slidesToShow + 2;\n            } else {\n                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));\n                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;\n            }\n        } else {\n            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;\n            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);\n            if (_.options.fade === true) {\n                if (rangeStart > 0) rangeStart--;\n                if (rangeEnd <= _.slideCount) rangeEnd++;\n            }\n        }\n\n        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);\n        loadImages(loadRange);\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-slide');\n            loadImages(cloneRange);\n        } else\n        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);\n            loadImages(cloneRange);\n        } else if (_.currentSlide === 0) {\n            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);\n            loadImages(cloneRange);\n        }\n\n    };\n\n    Slick.prototype.loadSlider = function() {\n\n        var _ = this;\n\n        _.setPosition();\n\n        _.$slideTrack.css({\n            opacity: 1\n        });\n\n        _.$slider.removeClass('slick-loading');\n\n        _.initUI();\n\n        if (_.options.lazyLoad === 'progressive') {\n            _.progressiveLazyLoad();\n        }\n\n    };\n\n    Slick.prototype.next = Slick.prototype.slickNext = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'next'\n            }\n        });\n\n    };\n\n    Slick.prototype.orientationChange = function() {\n\n        var _ = this;\n\n        _.checkResponsive();\n        _.setPosition();\n\n    };\n\n    Slick.prototype.pause = Slick.prototype.slickPause = function() {\n\n        var _ = this;\n\n        _.autoPlayClear();\n        _.paused = true;\n\n    };\n\n    Slick.prototype.play = Slick.prototype.slickPlay = function() {\n\n        var _ = this;\n\n        _.autoPlay();\n        _.options.autoplay = true;\n        _.paused = false;\n        _.focussed = false;\n        _.interrupted = false;\n\n    };\n\n    Slick.prototype.postSlide = function(index) {\n\n        var _ = this;\n\n        if( !_.unslicked ) {\n\n            _.$slider.trigger('afterChange', [_, index]);\n\n            _.animating = false;\n\n            _.setPosition();\n\n            _.swipeLeft = null;\n\n            if ( _.options.autoplay ) {\n                _.autoPlay();\n            }\n\n            if (_.options.accessibility === true) {\n                _.initADA();\n            }\n\n        }\n\n    };\n\n    Slick.prototype.prev = Slick.prototype.slickPrev = function() {\n\n        var _ = this;\n\n        _.changeSlide({\n            data: {\n                message: 'previous'\n            }\n        });\n\n    };\n\n    Slick.prototype.preventDefault = function(event) {\n\n        event.preventDefault();\n\n    };\n\n    Slick.prototype.progressiveLazyLoad = function( tryCount ) {\n\n        tryCount = tryCount || 1;\n\n        var _ = this,\n            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),\n            image,\n            imageSource,\n            imageToLoad;\n\n        if ( $imgsToLoad.length ) {\n\n            image = $imgsToLoad.first();\n            imageSource = image.attr('data-lazy');\n            imageToLoad = document.createElement('img');\n\n            imageToLoad.onload = function() {\n\n                image\n                    .attr( 'src', imageSource )\n                    .removeAttr('data-lazy')\n                    .removeClass('slick-loading');\n\n                if ( _.options.adaptiveHeight === true ) {\n                    _.setPosition();\n                }\n\n                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);\n                _.progressiveLazyLoad();\n\n            };\n\n            imageToLoad.onerror = function() {\n\n                if ( tryCount < 3 ) {\n\n                    /**\n                     * try to load the image 3 times,\n                     * leave a slight delay so we don't get\n                     * servers blocking the request.\n                     */\n                    setTimeout( function() {\n                        _.progressiveLazyLoad( tryCount + 1 );\n                    }, 500 );\n\n                } else {\n\n                    image\n                        .removeAttr( 'data-lazy' )\n                        .removeClass( 'slick-loading' )\n                        .addClass( 'slick-lazyload-error' );\n\n                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);\n\n                    _.progressiveLazyLoad();\n\n                }\n\n            };\n\n            imageToLoad.src = imageSource;\n\n        } else {\n\n            _.$slider.trigger('allImagesLoaded', [ _ ]);\n\n        }\n\n    };\n\n    Slick.prototype.refresh = function( initializing ) {\n\n        var _ = this, currentSlide, lastVisibleIndex;\n\n        lastVisibleIndex = _.slideCount - _.options.slidesToShow;\n\n        // in non-infinite sliders, we don't want to go past the\n        // last visible index.\n        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {\n            _.currentSlide = lastVisibleIndex;\n        }\n\n        // if less slides than to show, go to start.\n        if ( _.slideCount <= _.options.slidesToShow ) {\n            _.currentSlide = 0;\n\n        }\n\n        currentSlide = _.currentSlide;\n\n        _.destroy(true);\n\n        $.extend(_, _.initials, { currentSlide: currentSlide });\n\n        _.init();\n\n        if( !initializing ) {\n\n            _.changeSlide({\n                data: {\n                    message: 'index',\n                    index: currentSlide\n                }\n            }, false);\n\n        }\n\n    };\n\n    Slick.prototype.registerBreakpoints = function() {\n\n        var _ = this, breakpoint, currentBreakpoint, l,\n            responsiveSettings = _.options.responsive || null;\n\n        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {\n\n            _.respondTo = _.options.respondTo || 'window';\n\n            for ( breakpoint in responsiveSettings ) {\n\n                l = _.breakpoints.length-1;\n                currentBreakpoint = responsiveSettings[breakpoint].breakpoint;\n\n                if (responsiveSettings.hasOwnProperty(breakpoint)) {\n\n                    // loop through the breakpoints and cut out any existing\n                    // ones with the same breakpoint number, we don't want dupes.\n                    while( l >= 0 ) {\n                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {\n                            _.breakpoints.splice(l,1);\n                        }\n                        l--;\n                    }\n\n                    _.breakpoints.push(currentBreakpoint);\n                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;\n\n                }\n\n            }\n\n            _.breakpoints.sort(function(a, b) {\n                return ( _.options.mobileFirst ) ? a-b : b-a;\n            });\n\n        }\n\n    };\n\n    Slick.prototype.reinit = function() {\n\n        var _ = this;\n\n        _.$slides =\n            _.$slideTrack\n                .children(_.options.slide)\n                .addClass('slick-slide');\n\n        _.slideCount = _.$slides.length;\n\n        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {\n            _.currentSlide = _.currentSlide - _.options.slidesToScroll;\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            _.currentSlide = 0;\n        }\n\n        _.registerBreakpoints();\n\n        _.setProps();\n        _.setupInfinite();\n        _.buildArrows();\n        _.updateArrows();\n        _.initArrowEvents();\n        _.buildDots();\n        _.updateDots();\n        _.initDotEvents();\n        _.cleanUpSlideEvents();\n        _.initSlideEvents();\n\n        _.checkResponsive(false, true);\n\n        if (_.options.focusOnSelect === true) {\n            $(_.$slideTrack).children().on('click.slick', _.selectHandler);\n        }\n\n        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);\n\n        _.setPosition();\n        _.focusHandler();\n\n        _.paused = !_.options.autoplay;\n        _.autoPlay();\n\n        _.$slider.trigger('reInit', [_]);\n\n    };\n\n    Slick.prototype.resize = function() {\n\n        var _ = this;\n\n        if ($(window).width() !== _.windowWidth) {\n            clearTimeout(_.windowDelay);\n            _.windowDelay = window.setTimeout(function() {\n                _.windowWidth = $(window).width();\n                _.checkResponsive();\n                if( !_.unslicked ) { _.setPosition(); }\n            }, 50);\n        }\n    };\n\n    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {\n\n        var _ = this;\n\n        if (typeof(index) === 'boolean') {\n            removeBefore = index;\n            index = removeBefore === true ? 0 : _.slideCount - 1;\n        } else {\n            index = removeBefore === true ? --index : index;\n        }\n\n        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {\n            return false;\n        }\n\n        _.unload();\n\n        if (removeAll === true) {\n            _.$slideTrack.children().remove();\n        } else {\n            _.$slideTrack.children(this.options.slide).eq(index).remove();\n        }\n\n        _.$slides = _.$slideTrack.children(this.options.slide);\n\n        _.$slideTrack.children(this.options.slide).detach();\n\n        _.$slideTrack.append(_.$slides);\n\n        _.$slidesCache = _.$slides;\n\n        _.reinit();\n\n    };\n\n    Slick.prototype.setCSS = function(position) {\n\n        var _ = this,\n            positionProps = {},\n            x, y;\n\n        if (_.options.rtl === true) {\n            position = -position;\n        }\n        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';\n        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';\n\n        positionProps[_.positionProp] = position;\n\n        if (_.transformsEnabled === false) {\n            _.$slideTrack.css(positionProps);\n        } else {\n            positionProps = {};\n            if (_.cssTransitions === false) {\n                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';\n                _.$slideTrack.css(positionProps);\n            } else {\n                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';\n                _.$slideTrack.css(positionProps);\n            }\n        }\n\n    };\n\n    Slick.prototype.setDimensions = function() {\n\n        var _ = this;\n\n        if (_.options.vertical === false) {\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: ('0px ' + _.options.centerPadding)\n                });\n            }\n        } else {\n            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);\n            if (_.options.centerMode === true) {\n                _.$list.css({\n                    padding: (_.options.centerPadding + ' 0px')\n                });\n            }\n        }\n\n        _.listWidth = _.$list.width();\n        _.listHeight = _.$list.height();\n\n\n        if (_.options.vertical === false && _.options.variableWidth === false) {\n            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);\n            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));\n\n        } else if (_.options.variableWidth === true) {\n            _.$slideTrack.width(5000 * _.slideCount);\n        } else {\n            _.slideWidth = Math.ceil(_.listWidth);\n            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));\n        }\n\n        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();\n        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);\n\n    };\n\n    Slick.prototype.setFade = function() {\n\n        var _ = this,\n            targetLeft;\n\n        _.$slides.each(function(index, element) {\n            targetLeft = (_.slideWidth * index) * -1;\n            if (_.options.rtl === true) {\n                $(element).css({\n                    position: 'relative',\n                    right: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            } else {\n                $(element).css({\n                    position: 'relative',\n                    left: targetLeft,\n                    top: 0,\n                    zIndex: _.options.zIndex - 2,\n                    opacity: 0\n                });\n            }\n        });\n\n        _.$slides.eq(_.currentSlide).css({\n            zIndex: _.options.zIndex - 1,\n            opacity: 1\n        });\n\n    };\n\n    Slick.prototype.setHeight = function() {\n\n        var _ = this;\n\n        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {\n            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);\n            _.$list.css('height', targetHeight);\n        }\n\n    };\n\n    Slick.prototype.setOption =\n    Slick.prototype.slickSetOption = function() {\n\n        /**\n         * accepts arguments in format of:\n         *\n         *  - for changing a single option's value:\n         *     .slick(\"setOption\", option, value, refresh )\n         *\n         *  - for changing a set of responsive options:\n         *     .slick(\"setOption\", 'responsive', [{}, ...], refresh )\n         *\n         *  - for updating multiple values at once (not responsive)\n         *     .slick(\"setOption\", { 'option': value, ... }, refresh )\n         */\n\n        var _ = this, l, item, option, value, refresh = false, type;\n\n        if( $.type( arguments[0] ) === 'object' ) {\n\n            option =  arguments[0];\n            refresh = arguments[1];\n            type = 'multiple';\n\n        } else if ( $.type( arguments[0] ) === 'string' ) {\n\n            option =  arguments[0];\n            value = arguments[1];\n            refresh = arguments[2];\n\n            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {\n\n                type = 'responsive';\n\n            } else if ( typeof arguments[1] !== 'undefined' ) {\n\n                type = 'single';\n\n            }\n\n        }\n\n        if ( type === 'single' ) {\n\n            _.options[option] = value;\n\n\n        } else if ( type === 'multiple' ) {\n\n            $.each( option , function( opt, val ) {\n\n                _.options[opt] = val;\n\n            });\n\n\n        } else if ( type === 'responsive' ) {\n\n            for ( item in value ) {\n\n                if( $.type( _.options.responsive ) !== 'array' ) {\n\n                    _.options.responsive = [ value[item] ];\n\n                } else {\n\n                    l = _.options.responsive.length-1;\n\n                    // loop through the responsive object and splice out duplicates.\n                    while( l >= 0 ) {\n\n                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {\n\n                            _.options.responsive.splice(l,1);\n\n                        }\n\n                        l--;\n\n                    }\n\n                    _.options.responsive.push( value[item] );\n\n                }\n\n            }\n\n        }\n\n        if ( refresh ) {\n\n            _.unload();\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.setPosition = function() {\n\n        var _ = this;\n\n        _.setDimensions();\n\n        _.setHeight();\n\n        if (_.options.fade === false) {\n            _.setCSS(_.getLeft(_.currentSlide));\n        } else {\n            _.setFade();\n        }\n\n        _.$slider.trigger('setPosition', [_]);\n\n    };\n\n    Slick.prototype.setProps = function() {\n\n        var _ = this,\n            bodyStyle = document.body.style;\n\n        _.positionProp = _.options.vertical === true ? 'top' : 'left';\n\n        if (_.positionProp === 'top') {\n            _.$slider.addClass('slick-vertical');\n        } else {\n            _.$slider.removeClass('slick-vertical');\n        }\n\n        if (bodyStyle.WebkitTransition !== undefined ||\n            bodyStyle.MozTransition !== undefined ||\n            bodyStyle.msTransition !== undefined) {\n            if (_.options.useCSS === true) {\n                _.cssTransitions = true;\n            }\n        }\n\n        if ( _.options.fade ) {\n            if ( typeof _.options.zIndex === 'number' ) {\n                if( _.options.zIndex < 3 ) {\n                    _.options.zIndex = 3;\n                }\n            } else {\n                _.options.zIndex = _.defaults.zIndex;\n            }\n        }\n\n        if (bodyStyle.OTransform !== undefined) {\n            _.animType = 'OTransform';\n            _.transformType = '-o-transform';\n            _.transitionType = 'OTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.MozTransform !== undefined) {\n            _.animType = 'MozTransform';\n            _.transformType = '-moz-transform';\n            _.transitionType = 'MozTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.webkitTransform !== undefined) {\n            _.animType = 'webkitTransform';\n            _.transformType = '-webkit-transform';\n            _.transitionType = 'webkitTransition';\n            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;\n        }\n        if (bodyStyle.msTransform !== undefined) {\n            _.animType = 'msTransform';\n            _.transformType = '-ms-transform';\n            _.transitionType = 'msTransition';\n            if (bodyStyle.msTransform === undefined) _.animType = false;\n        }\n        if (bodyStyle.transform !== undefined && _.animType !== false) {\n            _.animType = 'transform';\n            _.transformType = 'transform';\n            _.transitionType = 'transition';\n        }\n        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);\n    };\n\n\n    Slick.prototype.setSlideClasses = function(index) {\n\n        var _ = this,\n            centerOffset, allSlides, indexOffset, remainder;\n\n        allSlides = _.$slider\n            .find('.slick-slide')\n            .removeClass('slick-active slick-center slick-current')\n            .attr('aria-hidden', 'true');\n\n        _.$slides\n            .eq(index)\n            .addClass('slick-current');\n\n        if (_.options.centerMode === true) {\n\n            centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n            if (_.options.infinite === true) {\n\n                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {\n\n                    _.$slides\n                        .slice(index - centerOffset, index + centerOffset + 1)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    indexOffset = _.options.slidesToShow + index;\n                    allSlides\n                        .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n                if (index === 0) {\n\n                    allSlides\n                        .eq(allSlides.length - 1 - _.options.slidesToShow)\n                        .addClass('slick-center');\n\n                } else if (index === _.slideCount - 1) {\n\n                    allSlides\n                        .eq(_.options.slidesToShow)\n                        .addClass('slick-center');\n\n                }\n\n            }\n\n            _.$slides\n                .eq(index)\n                .addClass('slick-center');\n\n        } else {\n\n            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {\n\n                _.$slides\n                    .slice(index, index + _.options.slidesToShow)\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else if (allSlides.length <= _.options.slidesToShow) {\n\n                allSlides\n                    .addClass('slick-active')\n                    .attr('aria-hidden', 'false');\n\n            } else {\n\n                remainder = _.slideCount % _.options.slidesToShow;\n                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;\n\n                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {\n\n                    allSlides\n                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                } else {\n\n                    allSlides\n                        .slice(indexOffset, indexOffset + _.options.slidesToShow)\n                        .addClass('slick-active')\n                        .attr('aria-hidden', 'false');\n\n                }\n\n            }\n\n        }\n\n        if (_.options.lazyLoad === 'ondemand') {\n            _.lazyLoad();\n        }\n\n    };\n\n    Slick.prototype.setupInfinite = function() {\n\n        var _ = this,\n            i, slideIndex, infiniteCount;\n\n        if (_.options.fade === true) {\n            _.options.centerMode = false;\n        }\n\n        if (_.options.infinite === true && _.options.fade === false) {\n\n            slideIndex = null;\n\n            if (_.slideCount > _.options.slidesToShow) {\n\n                if (_.options.centerMode === true) {\n                    infiniteCount = _.options.slidesToShow + 1;\n                } else {\n                    infiniteCount = _.options.slidesToShow;\n                }\n\n                for (i = _.slideCount; i > (_.slideCount -\n                        infiniteCount); i -= 1) {\n                    slideIndex = i - 1;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex - _.slideCount)\n                        .prependTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                for (i = 0; i < infiniteCount; i += 1) {\n                    slideIndex = i;\n                    $(_.$slides[slideIndex]).clone(true).attr('id', '')\n                        .attr('data-slick-index', slideIndex + _.slideCount)\n                        .appendTo(_.$slideTrack).addClass('slick-cloned');\n                }\n                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {\n                    $(this).attr('id', '');\n                });\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.interrupt = function( toggle ) {\n\n        var _ = this;\n\n        if( !toggle ) {\n            _.autoPlay();\n        }\n        _.interrupted = toggle;\n\n    };\n\n    Slick.prototype.selectHandler = function(event) {\n\n        var _ = this;\n\n        var targetElement =\n            $(event.target).is('.slick-slide') ?\n                $(event.target) :\n                $(event.target).parents('.slick-slide');\n\n        var index = parseInt(targetElement.attr('data-slick-index'));\n\n        if (!index) index = 0;\n\n        if (_.slideCount <= _.options.slidesToShow) {\n\n            _.setSlideClasses(index);\n            _.asNavFor(index);\n            return;\n\n        }\n\n        _.slideHandler(index);\n\n    };\n\n    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {\n\n        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,\n            _ = this, navTarget;\n\n        sync = sync || false;\n\n        if (_.animating === true && _.options.waitForAnimate === true) {\n            return;\n        }\n\n        if (_.options.fade === true && _.currentSlide === index) {\n            return;\n        }\n\n        if (_.slideCount <= _.options.slidesToShow) {\n            return;\n        }\n\n        if (sync === false) {\n            _.asNavFor(index);\n        }\n\n        targetSlide = index;\n        targetLeft = _.getLeft(targetSlide);\n        slideLeft = _.getLeft(_.currentSlide);\n\n        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;\n\n        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {\n            if (_.options.fade === false) {\n                targetSlide = _.currentSlide;\n                if (dontAnimate !== true) {\n                    _.animateSlide(slideLeft, function() {\n                        _.postSlide(targetSlide);\n                    });\n                } else {\n                    _.postSlide(targetSlide);\n                }\n            }\n            return;\n        }\n\n        if ( _.options.autoplay ) {\n            clearInterval(_.autoPlayTimer);\n        }\n\n        if (targetSlide < 0) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);\n            } else {\n                animSlide = _.slideCount + targetSlide;\n            }\n        } else if (targetSlide >= _.slideCount) {\n            if (_.slideCount % _.options.slidesToScroll !== 0) {\n                animSlide = 0;\n            } else {\n                animSlide = targetSlide - _.slideCount;\n            }\n        } else {\n            animSlide = targetSlide;\n        }\n\n        _.animating = true;\n\n        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);\n\n        oldSlide = _.currentSlide;\n        _.currentSlide = animSlide;\n\n        _.setSlideClasses(_.currentSlide);\n\n        if ( _.options.asNavFor ) {\n\n            navTarget = _.getNavTarget();\n            navTarget = navTarget.slick('getSlick');\n\n            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {\n                navTarget.setSlideClasses(_.currentSlide);\n            }\n\n        }\n\n        _.updateDots();\n        _.updateArrows();\n\n        if (_.options.fade === true) {\n            if (dontAnimate !== true) {\n\n                _.fadeSlideOut(oldSlide);\n\n                _.fadeSlide(animSlide, function() {\n                    _.postSlide(animSlide);\n                });\n\n            } else {\n                _.postSlide(animSlide);\n            }\n            _.animateHeight();\n            return;\n        }\n\n        if (dontAnimate !== true) {\n            _.animateSlide(targetLeft, function() {\n                _.postSlide(animSlide);\n            });\n        } else {\n            _.postSlide(animSlide);\n        }\n\n    };\n\n    Slick.prototype.startLoad = function() {\n\n        var _ = this;\n\n        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$prevArrow.hide();\n            _.$nextArrow.hide();\n\n        }\n\n        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {\n\n            _.$dots.hide();\n\n        }\n\n        _.$slider.addClass('slick-loading');\n\n    };\n\n    Slick.prototype.swipeDirection = function() {\n\n        var xDist, yDist, r, swipeAngle, _ = this;\n\n        xDist = _.touchObject.startX - _.touchObject.curX;\n        yDist = _.touchObject.startY - _.touchObject.curY;\n        r = Math.atan2(yDist, xDist);\n\n        swipeAngle = Math.round(r * 180 / Math.PI);\n        if (swipeAngle < 0) {\n            swipeAngle = 360 - Math.abs(swipeAngle);\n        }\n\n        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {\n            return (_.options.rtl === false ? 'left' : 'right');\n        }\n        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {\n            return (_.options.rtl === false ? 'right' : 'left');\n        }\n        if (_.options.verticalSwiping === true) {\n            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {\n                return 'down';\n            } else {\n                return 'up';\n            }\n        }\n\n        return 'vertical';\n\n    };\n\n    Slick.prototype.swipeEnd = function(event) {\n\n        var _ = this,\n            slideCount,\n            direction;\n\n        _.dragging = false;\n        _.interrupted = false;\n        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;\n\n        if ( _.touchObject.curX === undefined ) {\n            return false;\n        }\n\n        if ( _.touchObject.edgeHit === true ) {\n            _.$slider.trigger('edge', [_, _.swipeDirection() ]);\n        }\n\n        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {\n\n            direction = _.swipeDirection();\n\n            switch ( direction ) {\n\n                case 'left':\n                case 'down':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :\n                            _.currentSlide + _.getSlideCount();\n\n                    _.currentDirection = 0;\n\n                    break;\n\n                case 'right':\n                case 'up':\n\n                    slideCount =\n                        _.options.swipeToSlide ?\n                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :\n                            _.currentSlide - _.getSlideCount();\n\n                    _.currentDirection = 1;\n\n                    break;\n\n                default:\n\n\n            }\n\n            if( direction != 'vertical' ) {\n\n                _.slideHandler( slideCount );\n                _.touchObject = {};\n                _.$slider.trigger('swipe', [_, direction ]);\n\n            }\n\n        } else {\n\n            if ( _.touchObject.startX !== _.touchObject.curX ) {\n\n                _.slideHandler( _.currentSlide );\n                _.touchObject = {};\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.swipeHandler = function(event) {\n\n        var _ = this;\n\n        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {\n            return;\n        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {\n            return;\n        }\n\n        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?\n            event.originalEvent.touches.length : 1;\n\n        _.touchObject.minSwipe = _.listWidth / _.options\n            .touchThreshold;\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.minSwipe = _.listHeight / _.options\n                .touchThreshold;\n        }\n\n        switch (event.data.action) {\n\n            case 'start':\n                _.swipeStart(event);\n                break;\n\n            case 'move':\n                _.swipeMove(event);\n                break;\n\n            case 'end':\n                _.swipeEnd(event);\n                break;\n\n        }\n\n    };\n\n    Slick.prototype.swipeMove = function(event) {\n\n        var _ = this,\n            edgeWasHit = false,\n            curLeft, swipeDirection, swipeLength, positionOffset, touches;\n\n        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;\n\n        if (!_.dragging || touches && touches.length !== 1) {\n            return false;\n        }\n\n        curLeft = _.getLeft(_.currentSlide);\n\n        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;\n        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;\n\n        _.touchObject.swipeLength = Math.round(Math.sqrt(\n            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));\n\n        if (_.options.verticalSwiping === true) {\n            _.touchObject.swipeLength = Math.round(Math.sqrt(\n                Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));\n        }\n\n        swipeDirection = _.swipeDirection();\n\n        if (swipeDirection === 'vertical') {\n            return;\n        }\n\n        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {\n            event.preventDefault();\n        }\n\n        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);\n        if (_.options.verticalSwiping === true) {\n            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;\n        }\n\n\n        swipeLength = _.touchObject.swipeLength;\n\n        _.touchObject.edgeHit = false;\n\n        if (_.options.infinite === false) {\n            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {\n                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;\n                _.touchObject.edgeHit = true;\n            }\n        }\n\n        if (_.options.vertical === false) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        } else {\n            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;\n        }\n        if (_.options.verticalSwiping === true) {\n            _.swipeLeft = curLeft + swipeLength * positionOffset;\n        }\n\n        if (_.options.fade === true || _.options.touchMove === false) {\n            return false;\n        }\n\n        if (_.animating === true) {\n            _.swipeLeft = null;\n            return false;\n        }\n\n        _.setCSS(_.swipeLeft);\n\n    };\n\n    Slick.prototype.swipeStart = function(event) {\n\n        var _ = this,\n            touches;\n\n        _.interrupted = true;\n\n        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {\n            _.touchObject = {};\n            return false;\n        }\n\n        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {\n            touches = event.originalEvent.touches[0];\n        }\n\n        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;\n        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;\n\n        _.dragging = true;\n\n    };\n\n    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {\n\n        var _ = this;\n\n        if (_.$slidesCache !== null) {\n\n            _.unload();\n\n            _.$slideTrack.children(this.options.slide).detach();\n\n            _.$slidesCache.appendTo(_.$slideTrack);\n\n            _.reinit();\n\n        }\n\n    };\n\n    Slick.prototype.unload = function() {\n\n        var _ = this;\n\n        $('.slick-cloned', _.$slider).remove();\n\n        if (_.$dots) {\n            _.$dots.remove();\n        }\n\n        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {\n            _.$prevArrow.remove();\n        }\n\n        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {\n            _.$nextArrow.remove();\n        }\n\n        _.$slides\n            .removeClass('slick-slide slick-active slick-visible slick-current')\n            .attr('aria-hidden', 'true')\n            .css('width', '');\n\n    };\n\n    Slick.prototype.unslick = function(fromBreakpoint) {\n\n        var _ = this;\n        _.$slider.trigger('unslick', [_, fromBreakpoint]);\n        _.destroy();\n\n    };\n\n    Slick.prototype.updateArrows = function() {\n\n        var _ = this,\n            centerOffset;\n\n        centerOffset = Math.floor(_.options.slidesToShow / 2);\n\n        if ( _.options.arrows === true &&\n            _.slideCount > _.options.slidesToShow &&\n            !_.options.infinite ) {\n\n            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            if (_.currentSlide === 0) {\n\n                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {\n\n                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');\n                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');\n\n            }\n\n        }\n\n    };\n\n    Slick.prototype.updateDots = function() {\n\n        var _ = this;\n\n        if (_.$dots !== null) {\n\n            _.$dots\n                .find('li')\n                .removeClass('slick-active')\n                .attr('aria-hidden', 'true');\n\n            _.$dots\n                .find('li')\n                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))\n                .addClass('slick-active')\n                .attr('aria-hidden', 'false');\n\n        }\n\n    };\n\n    Slick.prototype.visibility = function() {\n\n        var _ = this;\n\n        if ( _.options.autoplay ) {\n\n            if ( document[_.hidden] ) {\n\n                _.interrupted = true;\n\n            } else {\n\n                _.interrupted = false;\n\n            }\n\n        }\n\n    };\n\n    $.fn.slick = function() {\n        var _ = this,\n            opt = arguments[0],\n            args = Array.prototype.slice.call(arguments, 1),\n            l = _.length,\n            i,\n            ret;\n        for (i = 0; i < l; i++) {\n            if (typeof opt == 'object' || typeof opt == 'undefined')\n                _[i].slick = new Slick(_[i], opt);\n            else\n                ret = _[i].slick[opt].apply(_[i].slick, args);\n            if (typeof ret != 'undefined') return ret;\n        }\n        return _;\n    };\n\n}));\n","(function ($) {\r\n\t$.bgResponsiveImage = function (element, options) {\r\n\t\t// **************************************************************\r\n\t\t// Public Properties\r\n\t\t// **************************************************************\r\n\r\n\t\tvar $c = $(element), // Context \r\n\r\n\t\t\tBgResponsiveImage = (function ($c, o) {\r\n\t\t\t\tvar defaults = {\r\n\t\t\t\t\t'parent': 'figure',\r\n\r\n\t\t\t\t\t'activeClass': 'active',\r\n\t\t\t\t\t'breakPoint': 768,\r\n\r\n\t\t\t\t\t'speed': 500,\r\n\t\t\t\t\t'easing': 'swing'\r\n\t\t\t\t}; \r\n\r\n\t\t\t\tvar _o = {},\r\n\r\n\t\t\t\t\t$p = null, // Parent\r\n\t\t\t\t\tsrc = {},\r\n\r\n\t\t\t\t\tdebounce = 0,\r\n\t\t\t\t\tisMobile = false\r\n\t\t\t\t;\r\n\r\n\t\t\t\tvar _InitObjects = function () {\r\n\t\t\t\t\t_o = $.extend({}, defaults, o);\r\n\r\n\t\t\t\t\t$p = $c.parent(_o.parent);\r\n\t\t\t\t\tsrc = $c.data('src');\r\n\r\n\t\t\t\t\t_GetSizes();\r\n\t\t\t\t}, \r\n\r\n\t\t\t\t\t_GetSizes = function() {\r\n\t\t\t\t\t\tisMobile = $(window).width() < _o.breakPoint;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_CheckImageChange = function() {\r\n\t\t\t\t\t\t_GetSizes();\r\n\r\n\t\t\t\t\t\tvar nSrc = (isMobile) ? src.m : src.d,\r\n\t\t\t\t\t\t\tcSrc = $c.prop('src');\r\n\t\t\t\t\t\tif (cSrc.indexOf(nSrc) < 0) {\r\n\t\t\t\t\t\t\t_LoadImage(nSrc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_LoadImage = function(src) {\r\n\t\t\t\t\t\tvar $img = $('<img />');\r\n\t\t\t\t\t\t$img\r\n\t\t\t\t\t\t\t.load(function(e) {\r\n\t\t\t\t\t\t\t\t$p.attr('style', 'background-image: url(\\''+src+'\\');');\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.prop('src', src);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t_OnResize = function(e) {\r\n\t\t\t\t\t\tclearTimeout(debounce);\r\n\t\t\t\t\t\tdebounce = setTimeout(function() {\r\n\t\t\t\t\t\t\tclearTimeout(debounce);\r\n\t\t\t\t\t\t\t_CheckImageChange();\r\n\t\t\t\t\t\t}, 250);\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t_BindEvents = function () {\r\n\t\t\t\t\t$(window).resize(_OnResize);\r\n\t\t\t\t},\r\n\r\n\t\t\t\tinit = (function() {\r\n\t\t\t\t\t_InitObjects();\r\n\t\t\t\t\t_BindEvents();\r\n\t\t\t\t\t_CheckImageChange();\r\n\t\t\t\t})();\r\n\t\t\t}) ($c, options);\r\n\t};\r\n\r\n\t$.fn.bgResponsiveImage = function (options) {\r\n\t\treturn this.each(function () {\r\n\t\t\tif (undefined === $(this).data('bgResponsiveImage')) {\r\n\t\t\t\tvar plugin = new $.bgResponsiveImage(this, options);\r\n\t\t\t\t$(this).data('bgResponsiveImage', plugin);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n})(jQuery);\r\n","(function ($) {\n\t$.formModal = function (element, options) {\n\n\t\tvar $c = $(element),\n\n\t\t\tformModal = (function ($c, o) {\n\t\t\t\tvar defaults = {\n\t\t\t\t\t\n\t\t\t\t}; \n\n\t\t\t\tvar _o = {},\n\t\t\t\t\t$formModal = null\n\t\t\t\t;\n\n\t\t\t\tvar _InitObjects = function () {\n\t\t\t\t\t_o = $.extend({}, defaults, o);\n\t\t\t\t},\n\n\t\t\t\t_ShowModal = function () {\n\t\t\t\t\t$('.form-modal').fadeIn();\n\t\t\t\t},\n\n\t\t\t\t_HideModal = function () {\n\t\t\t\t\t$('.form-modal').fadeOut();\n\t\t\t\t},\n\n\t\t\t\t_BindEvents = function () {\n\t\t\t\t\t$('#join-sticky-footer').click(function(e){\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t_ShowModal();\n\t\t\t\t\t});\n\t\t\t\t\t$('.join-the-collective').click(function(e){\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t_ShowModal();\n\t\t\t\t\t});\n\t\t\t\t\t$('#tour-sticky-footer').click(function(e){\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t_ShowModal();\n\t\t\t\t\t});\n\t\t\t\t\t$('.escape').click(function(){\n\t\t\t\t\t\t_HideModal();\n\t\t\t\t\t});\n\t\t\t\t\t$(document).keyup(function(e) {\n\t\t\t\t\t\tif (e.keyCode === 27){\n\t\t\t\t\t\t\t_HideModal();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tinit = (function() {\n\t\t\t\t\t_InitObjects();\n\t\t\t\t\t_BindEvents();\n\t\t\t\t})();\n\t\t\t}) ($c, options);\n\t};\n\n\t$.fn.formModal = function (options) {\n\t\treturn this.each(function () {\n\t\t\tif (undefined === $(this).data('formModal')) {\n\t\t\t\tvar plugin = new $.formModal(this, options);\n\t\t\t\t$(this).data('formModal', plugin);\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);","(function ($) {\n\t$.locationSelector = function (element, options) {\n\n\t\tvar $c = $(element),\n\n\t\t\tlocationSelector = (function ($c, o) {\n\t\t\t\tvar defaults = {\n\t\t\t\t\tselector : $c.find('select')\n\t\t\t\t}; \n\n\t\t\t\tvar _o = {},\n\t\t\t\t\t$locationSelector = null\n\t\t\t\t;\n\n\t\t\t\tvar _InitObjects = function () {\n\t\t\t\t\t_o = $.extend({}, defaults, o);\n\t\t\t\t},\n\n\t\t\t\t_Reset = function () {\n\t\t\t\t\t_o.selector.html('');\n\t\t\t\t\t_Populate();\n\t\t\t\t},\n\n\t\t\t\t_Populate = function () {\n\t\t\t\t\tvar locations = $pc.locations;\n\t\t\t\t\tvar locationCollection = '<option value=\"Any\">Pick A Location</option>';\n\n\t\t\t\t\t$(locations).each(function(index, value ){\n\t\t\t\t\t\tlocationCollection += '<option value=\"' + value + '\">' + value + '</option>';\n\t\t\t\t\t});\n\n\t\t\t\t\t_o.selector.html(locationCollection);\n\t\t\t\t},\n\n\t\t\t\t_BindEvents = function () {\n\t\t\t\t\t\n\t\t\t\t},\n\n\t\t\t\tinit = (function() {\n\t\t\t\t\t_InitObjects();\n\t\t\t\t\t_BindEvents();\n\t\t\t\t\t_Reset();\n\t\t\t\t})();\n\t\t\t}) ($c, options);\n\t};\n\n\t$.fn.locationSelector = function (options) {\n\t\treturn this.each(function () {\n\t\t\tif (undefined === $(this).data('locationSelector')) {\n\t\t\t\tvar plugin = new $.locationSelector(this, options);\n\t\t\t\t$(this).data('locationSelector', plugin);\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);","(function ($) {\n\t$.gMap = function (element, options) {\n\n\t\tvar $c = $(element),\n\n\t\t\tgMap = (function ($c, o) {\n\t\t\t\tvar defaults = {\n\t\t\t\t\t'mapStyles' : [{\"featureType\":\"all\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"saturation\":36},{\"color\":\"#818181\"},{\"lightness\":40}]},{\"featureType\":\"all\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"visibility\":\"on\"},{\"color\":\"#000000\"},{\"lightness\":16}]},{\"featureType\":\"all\",\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":20}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":17},{\"weight\":1.2}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#333333\"},{\"lightness\":20}]},{\"featureType\":\"poi\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#272727\"},{\"lightness\":21}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":17}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":29},{\"weight\":0.2}]},{\"featureType\":\"road.arterial\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":18}]},{\"featureType\":\"road.local\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#1f1f1f\"},{\"lightness\":16}]},{\"featureType\":\"transit\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":19}]},{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#505050\"},{\"lightness\":17}]}]\n\t\t\t\t}; \n\n\t\t\t\tvar _o = {},\n\t\t\t\t\t$gMap = null\n\t\t\t\t;\n\n\t\t\t\tvar _InitObjects = function () {\n\t\t\t\t\t_o = $.extend({}, defaults, o);\n\t\t\t\t},\n\n\t\t\t\t_InitMap = function () {\n\t\t\t\t\tvar map;\n\t\t\t\t\tmap = new google.maps.Map(document.getElementById('map'), {\n\t\t\t\t\t\tcenter: {lat :33.3840973, lng: -111.9914508},\n\t\t\t\t\t\tzoom: 11,\n\t\t\t\t\t\tscrollwheel: false,\n\t\t\t\t\t\tstyles: _o.mapStyles\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t_AddMarkers(map);\n\t\t\t\t},\n\n\t\t\t\t_AddMarkers = function (map) {\n\t\t\t\t\tvar bounds = new google.maps.LatLngBounds();\n\n\t\t\t\t\t$('.location-item').each(function(){\n\t\t\t\t\t\tvar lat = $(this).attr('data-lat');\n\t\t\t\t\t\tvar long = $(this).attr('data-long');\n\n\t\t\t\t\t\tvar coords = new google.maps.LatLng(parseFloat(lat),parseFloat(long));\n\t\t\t\t\t\t\tbounds.extend(coords);\n\t\t\t\t\t\tvar marker = new google.maps.Marker({\n\t\t\t\t\t\t\tposition: coords,\n\t\t\t\t\t\t\tmap: map\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// marker.addListener('click', function() {\n\t\t\t\t\t\t// \tinfowindow.open(map, marker);\n\t\t\t\t\t\t// });\n\t\t\t\t\t});\n\n\t\t\t\t\tmap.fitBounds(bounds);\n    \t\t\t\tmap.panToBounds(bounds);\n\t\t\t\t},\n\n\t\t\t\t_BindEvents = function () {\n\t\t\t\t\t\n\t\t\t\t},\n\n\t\t\t\tinit = (function() {\n\t\t\t\t\t_InitObjects();\n\t\t\t\t\t_BindEvents();\n\t\t\t\t\t_InitMap();\n\t\t\t\t})();\n\t\t\t}) ($c, options);\n\t};\n\n\t$.fn.gMap = function (options) {\n\t\treturn this.each(function () {\n\t\t\tif (undefined === $(this).data('gMap')) {\n\t\t\t\tvar plugin = new $.gMap(this, options);\n\t\t\t\t$(this).data('gMap', plugin);\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);","(function ($) {\n\t$.menuClick = function (element, options) {\n\n\t\tvar $c = $(element),\n\n\t\t\tmenuClick = (function ($c, o) {\n\t\t\t\tvar defaults = {\n\t\t\t\t\t\n\t\t\t\t}; \n\n\t\t\t\tvar _o = {},\n\t\t\t\t\t$menuClick = null\n\t\t\t\t;\n\n\t\t\t\tvar _InitObjects = function () {\n\t\t\t\t\t_o = $.extend({}, defaults, o);\n\t\t\t\t},\n\n\t\t\t\t_BindClick = function () {\n\t\t\t\t\t$('.palette-nav-item').unbind().on('click', function(){\n\t\t\t\t\t\tvar url = $(this).find('a').attr('href');\n\t\t\t\t\t\twindow.location.href = url;\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t_BindEvents = function () {\n\t\t\t\t\t$(document).ready(function(){\n\t\t\t\t\t\t_BindClick();\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tinit = (function() {\n\t\t\t\t\t_InitObjects();\n\t\t\t\t\t_BindEvents();\n\t\t\t\t})();\n\t\t\t}) ($c, options);\n\t};\n\n\t$.fn.menuClick = function (options) {\n\t\treturn this.each(function () {\n\t\t\tif (undefined === $(this).data('menuClick')) {\n\t\t\t\tvar plugin = new $.menuClick(this, options);\n\t\t\t\t$(this).data('menuClick', plugin);\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);","(function ($) {\n\t$.menu = function (element, options) {\n\n\t\tvar $c = $(element),\n\n\t\t\tmenu = (function ($c, o) {\n\t\t\t\tvar defaults = {\n\t\t\t\t\t\n\t\t\t\t}; \n\n\t\t\t\tvar _o = {},\n\t\t\t\t\t$menu = null\n\t\t\t\t;\n\n\t\t\t\tvar _InitObjects = function () {\n\t\t\t\t\t_o = $.extend({}, defaults, o);\n\t\t\t\t},\n\n\t\t\t\t_Open = function () {\n\t\t\t\t\t$('.full-width-menu').fadeIn();\n\t\t\t\t},\n\n\t\t\t\t_Close = function () {\n\t\t\t\t\t$('.full-width-menu').fadeOut();\n\t\t\t\t},\n\n\t\t\t\t_BindEvents = function () {\n\t\t\t\t\t$c.click(function(){\n\t\t\t\t\t\t_Open();\n\t\t\t\t\t});\n\t\t\t\t\t$('.escape').click(function(){\n\t\t\t\t\t\t_Close();\n\t\t\t\t\t});\n\t\t\t\t\t$(document).keyup(function(e) {\n\t\t\t\t\t\tif (e.keyCode === 27){\n\t\t\t\t\t\t\t_Close();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\tinit = (function() {\n\t\t\t\t\t_InitObjects();\n\t\t\t\t\t_BindEvents();\n\t\t\t\t})();\n\t\t\t}) ($c, options);\n\t};\n\n\t$.fn.menu = function (options) {\n\t\treturn this.each(function () {\n\t\t\tif (undefined === $(this).data('menu')) {\n\t\t\t\tvar plugin = new $.menu(this, options);\n\t\t\t\t$(this).data('menu', plugin);\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);","/**!\n * MixItUp v3.2.1\n * A high-performance, dependency-free library for animated filtering, sorting and more\n * Build e686293a-a831-4453-8fff-74c886296ad0\n *\n * @copyright Copyright 2014-2017 KunkaLabs Limited.\n * @author    KunkaLabs Limited.\n * @link      https://www.kunkalabs.com/mixitup/\n *\n * @license   Commercial use requires a commercial license.\n *            https://www.kunkalabs.com/mixitup/licenses/\n *\n *            Non-commercial use permitted under same terms as CC BY-NC 3.0 license.\n *            http://creativecommons.org/licenses/by-nc/3.0/\n */\n\n(function(window) {\n    'use strict';\n\n    var mixitup = null,\n        h       = null;\n\n    (function() {\n        var VENDORS = ['webkit', 'moz', 'o', 'ms'],\n            canary  = window.document.createElement('div'),\n            i       = -1;\n\n        // window.requestAnimationFrame\n\n        for (i = 0; i < VENDORS.length && !window.requestAnimationFrame; i++) {\n            window.requestAnimationFrame = window[VENDORS[i] + 'RequestAnimationFrame'];\n        }\n\n        // Element.nextElementSibling\n\n        if (typeof canary.nextElementSibling === 'undefined') {\n            Object.defineProperty(window.Element.prototype, 'nextElementSibling', {\n                get: function() {\n                    var el = this.nextSibling;\n\n                    while (el) {\n                        if (el.nodeType === 1) {\n                            return el;\n                        }\n\n                        el = el.nextSibling;\n                    }\n\n                    return null;\n                }\n            });\n        }\n\n        // Element.matches\n\n        (function(ElementPrototype) {\n            ElementPrototype.matches =\n                ElementPrototype.matches ||\n                ElementPrototype.machesSelector ||\n                ElementPrototype.mozMatchesSelector ||\n                ElementPrototype.msMatchesSelector ||\n                ElementPrototype.oMatchesSelector ||\n                ElementPrototype.webkitMatchesSelector ||\n                function (selector) {\n                    return Array.prototype.indexOf.call(this.parentElement.querySelectorAll(selector), this) > -1;\n                };\n        })(window.Element.prototype);\n\n        // Object.keys\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\n\n        if (!Object.keys) {\n            Object.keys = (function() {\n                var hasOwnProperty      = Object.prototype.hasOwnProperty,\n                    hasDontEnumBug      = false,\n                    dontEnums           = [],\n                    dontEnumsLength     = -1;\n\n                hasDontEnumBug = !({\n                    toString: null\n                })\n                    .propertyIsEnumerable('toString');\n\n                dontEnums = [\n                    'toString',\n                    'toLocaleString',\n                    'valueOf',\n                    'hasOwnProperty',\n                    'isPrototypeOf',\n                    'propertyIsEnumerable',\n                    'constructor'\n                ];\n\n                dontEnumsLength = dontEnums.length;\n\n                return function(obj) {\n                    var result  = [],\n                        prop    = '',\n                        i       = -1;\n\n                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                        throw new TypeError('Object.keys called on non-object');\n                    }\n\n                    for (prop in obj) {\n                        if (hasOwnProperty.call(obj, prop)) {\n                            result.push(prop);\n                        }\n                    }\n\n                    if (hasDontEnumBug) {\n                        for (i = 0; i < dontEnumsLength; i++) {\n                            if (hasOwnProperty.call(obj, dontEnums[i])) {\n                                result.push(dontEnums[i]);\n                            }\n                        }\n                    }\n\n                    return result;\n                };\n            }());\n        }\n\n        // Array.isArray\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\n\n        if (!Array.isArray) {\n            Array.isArray = function(arg) {\n                return Object.prototype.toString.call(arg) === '[object Array]';\n            };\n        }\n\n        // Object.create\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n\n        if (typeof Object.create !== 'function') {\n            Object.create = (function(undefined) {\n                var Temp = function() {};\n\n                return function (prototype, propertiesObject) {\n                    if (prototype !== Object(prototype) && prototype !== null) {\n                        throw TypeError('Argument must be an object, or null');\n                    }\n\n                    Temp.prototype = prototype || {};\n\n                    var result = new Temp();\n\n                    Temp.prototype = null;\n\n                    if (propertiesObject !== undefined) {\n                        Object.defineProperties(result, propertiesObject);\n                    }\n\n                    if (prototype === null) {\n                        /* jshint ignore:start */\n                        result.__proto__ = null;\n                        /* jshint ignore:end */\n                    }\n\n                    return result;\n                };\n            })();\n        }\n\n        // String.prototyoe.trim\n\n        if (!String.prototype.trim) {\n            String.prototype.trim = function() {\n                return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n            };\n        }\n\n        // Array.prototype.indexOf\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\n        if (!Array.prototype.indexOf) {\n            Array.prototype.indexOf = function(searchElement) {\n                var n, k, t, len;\n\n                if (this === null) {\n                    throw new TypeError();\n                }\n\n                t = Object(this);\n\n                len = t.length >>> 0;\n\n                if (len === 0) {\n                    return -1;\n                }\n\n                n = 0;\n\n                if (arguments.length > 1) {\n                    n = Number(arguments[1]);\n\n                    if (n !== n) {\n                        n = 0;\n                    } else if (n !== 0 && n !== Infinity && n !== -Infinity) {\n                        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                    }\n                }\n\n                if (n >= len) {\n                    return -1;\n                }\n\n                for (k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) {\n                    if (k in t && t[k] === searchElement) {\n                        return k;\n                    }\n                }\n\n                return -1;\n            };\n        }\n\n        // Function.prototype.bind\n        // https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n\n        if (!Function.prototype.bind) {\n            Function.prototype.bind = function(oThis) {\n                var aArgs, self, FNOP, fBound;\n\n                if (typeof this !== 'function') {\n                    throw new TypeError();\n                }\n\n                aArgs = Array.prototype.slice.call(arguments, 1);\n\n                self = this;\n\n                FNOP = function() {};\n\n                fBound = function() {\n                    return self.apply(this instanceof FNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n                if (this.prototype) {\n                    FNOP.prototype = this.prototype;\n                }\n\n                fBound.prototype = new FNOP();\n\n                return fBound;\n            };\n        }\n\n        // Element.prototype.dispatchEvent\n\n        if (!window.Element.prototype.dispatchEvent) {\n            window.Element.prototype.dispatchEvent = function(event) {\n                try {\n                    return this.fireEvent('on' + event.type, event);\n                } catch (err) {}\n            };\n        }\n    })();\n\n    /**\n     * The `mixitup()` \"factory\" function creates and returns individual instances\n     * of MixItUp, known as \"mixers\", on which API methods can be called.\n     *\n     * When loading MixItUp via a script tag, the factory function is accessed\n     * via the global variable `mixitup`. When using a module loading\n     * system (e.g. ES2015, CommonJS, RequireJS), the factory function is\n     * exported into your module when you require the MixItUp library.\n     *\n     * @example\n     * mixitup(container [,config] [,foreignDoc])\n     *\n     * @example <caption>Example 1: Creating a mixer instance with an element reference</caption>\n     * var containerEl = document.querySelector('.container');\n     *\n     * var mixer = mixitup(containerEl);\n     *\n     * @example <caption>Example 2: Creating a mixer instance with a selector string</caption>\n     * var mixer = mixitup('.container');\n     *\n     * @example <caption>Example 3: Passing a configuration object</caption>\n     * var mixer = mixitup(containerEl, {\n     *     animation: {\n     *         effects: 'fade scale(0.5)'\n     *     }\n     * });\n     *\n     * @example <caption>Example 4: Passing an iframe reference</caption>\n     * var mixer = mixitup(containerEl, config, foreignDocument);\n     *\n     * @global\n     * @namespace\n     * @public\n     * @kind        function\n     * @since       3.0.0\n     * @param       {(Element|string)}  container\n     *      A DOM element or selector string representing the container(s) on which to instantiate MixItUp.\n     * @param       {object}            [config]\n     *      An optional \"configuration object\" used to customize the behavior of the MixItUp instance.\n     * @param       {object}            [foreignDoc]\n     *      An optional reference to a `document`, which can be used to control a MixItUp instance in an iframe.\n     * @return      {mixitup.Mixer}\n     *      A \"mixer\" object holding the MixItUp instance.\n     */\n\n    mixitup = function(container, config, foreignDoc) {\n        var el                  = null,\n            returnCollection    = false,\n            instance            = null,\n            facade              = null,\n            doc                 = null,\n            output              = null,\n            instances           = [],\n            id                  = '',\n            elements            = [],\n            i                   = -1;\n\n        doc = foreignDoc || window.document;\n\n        if (returnCollection = arguments[3]) {\n            // A non-documented 4th paramater enabling control of multiple instances\n\n            returnCollection = typeof returnCollection === 'boolean';\n        }\n\n        if (typeof container === 'string') {\n            elements = doc.querySelectorAll(container);\n        } else if (container && typeof container === 'object' && h.isElement(container, doc)) {\n            elements = [container];\n        } else if (container && typeof container === 'object' && container.length) {\n            // Although not documented, the container may also be an array-like list of\n            // elements such as a NodeList or jQuery collection, is returnCollection is true\n\n            elements = container;\n        } else {\n            throw new Error(mixitup.messages.errorFactoryInvalidContainer());\n        }\n\n        if (elements.length < 1) {\n            throw new Error(mixitup.messages.errorFactoryContainerNotFound());\n        }\n\n        for (i = 0; el = elements[i]; i++) {\n            if (i > 0 && !returnCollection) break;\n\n            if (!el.id) {\n                id = 'MixItUp' + h.randomHex();\n\n                el.id = id;\n            } else {\n                id = el.id;\n            }\n\n            if (mixitup.instances[id] instanceof mixitup.Mixer) {\n                instance = mixitup.instances[id];\n\n                if (!config || (config && config.debug && config.debug.showWarnings !== false)) {\n                    console.warn(mixitup.messages.warningFactoryPreexistingInstance());\n                }\n            } else {\n                instance = new mixitup.Mixer();\n\n                instance.attach(el, doc, id, config);\n\n                mixitup.instances[id] = instance;\n            }\n\n            facade = new mixitup.Facade(instance);\n\n            if (config && config.debug && config.debug.enable) {\n                instances.push(instance);\n            } else {\n                instances.push(facade);\n            }\n        }\n\n        if (returnCollection) {\n            output = new mixitup.Collection(instances);\n        } else {\n            // Return the first instance regardless\n\n            output = instances[0];\n        }\n\n        return output;\n    };\n\n    /**\n     * The `.use()` static method is used to extend the functionality of mixitup with compatible\n     * extensions and libraries in an environment with modular scoping e.g. ES2015, CommonJS, or RequireJS.\n     *\n     * You need only call the `.use()` function once per project, per extension, as module loaders\n     * will cache a single reference to MixItUp inclusive of all changes made.\n     *\n     * @example\n     * mixitup.use(extension)\n     *\n     * @example <caption>Example 1: Extending MixItUp with the Pagination Extension</caption>\n     *\n     * import mixitup from 'mixitup';\n     * import mixitupPagination from 'mixitup-pagination';\n     *\n     * mixitup.use(mixitupPagination);\n     *\n     * // All mixers created by the factory function in all modules will now\n     * // have pagination functionality\n     *\n     * var mixer = mixitup('.container');\n     *\n     * @public\n     * @name     use\n     * @memberof mixitup\n     * @kind     function\n     * @static\n     * @since    3.0.0\n     * @param    {*}  extension   A reference to the extension or library to be used.\n     * @return   {void}\n     */\n\n    mixitup.use = function(extension) {\n        mixitup.Base.prototype.callActions.call(mixitup, 'beforeUse', arguments);\n\n        // Call the extension's factory function, passing\n        // the mixitup factory as a paramater\n\n        if (typeof extension === 'function' && extension.TYPE === 'mixitup-extension') {\n            // Mixitup extension\n\n            if (typeof mixitup.extensions[extension.NAME] === 'undefined') {\n                extension(mixitup);\n\n                mixitup.extensions[extension.NAME] = extension;\n            }\n        } else if (extension.fn && extension.fn.jquery) {\n            // jQuery\n\n            mixitup.libraries.$ = extension;\n        }\n\n        mixitup.Base.prototype.callActions.call(mixitup, 'afterUse', arguments);\n    };\n\n    mixitup.instances   = {};\n    mixitup.extensions  = {};\n    mixitup.libraries   = {};\n\n    /**\n     * @private\n     */\n\n    h = {\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {boolean}\n         */\n\n        hasClass: function(el, cls) {\n            return !!el.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {void}\n         */\n\n        addClass: function(el, cls) {\n            if (!this.hasClass(el, cls)) el.className += el.className ? ' ' + cls : cls;\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        cls\n         * @return  {void}\n         */\n\n        removeClass: function(el, cls) {\n            if (this.hasClass(el, cls)) {\n                var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n\n                el.className = el.className.replace(reg, ' ').trim();\n            }\n        },\n\n        /**\n         * Merges the properties of the source object onto the\n         * target object. Alters the target object.\n         *\n         * @private\n         * @param   {object}    destination\n         * @param   {object}    source\n         * @param   {boolean}   [deep=false]\n         * @param   {boolean}   [handleErrors=false]\n         * @return  {void}\n         */\n\n        extend: function(destination, source, deep, handleErrors) {\n            var sourceKeys  = [],\n                key         = '',\n                i           = -1;\n\n            deep = deep || false;\n            handleErrors = handleErrors || false;\n\n            try {\n                if (Array.isArray(source)) {\n                    for (i = 0; i < source.length; i++) {\n                        sourceKeys.push(i);\n                    }\n                } else if (source) {\n                    sourceKeys = Object.keys(source);\n                }\n\n                for (i = 0; i < sourceKeys.length; i++) {\n                    key = sourceKeys[i];\n\n                    if (!deep || typeof source[key] !== 'object' || this.isElement(source[key])) {\n                        // All non-object properties, or all properties if shallow extend\n\n                        destination[key] = source[key];\n                    } else if (Array.isArray(source[key])) {\n                        // Arrays\n\n                        if (!destination[key]) {\n                            destination[key] = [];\n                        }\n\n                        this.extend(destination[key], source[key], deep, handleErrors);\n                    } else {\n                        // Objects\n\n                        if (!destination[key]) {\n                            destination[key] = {};\n                        }\n\n                        this.extend(destination[key], source[key], deep, handleErrors);\n                    }\n                }\n            } catch(err) {\n                if (handleErrors) {\n                    this.handleExtendError(err, destination);\n                } else {\n                    throw err;\n                }\n            }\n\n            return destination;\n        },\n\n        /**\n         * @private\n         * @param   {Error}  err\n         * @param   {object} destination\n         * @return  {void}\n         */\n\n        handleExtendError: function(err, destination) {\n            var re                  = /property \"?(\\w*)\"?[,:] object/i,\n                matches             = null,\n                erroneous           = '',\n                message             = '',\n                suggestion          = '',\n                probableMatch       = '',\n                key                 = '',\n                mostMatchingChars   = -1,\n                i                   = -1;\n\n            if (err instanceof TypeError && (matches = re.exec(err.message))) {\n                erroneous = matches[1];\n\n                for (key in destination) {\n                    i = 0;\n\n                    while (i < erroneous.length && erroneous.charAt(i) === key.charAt(i)) {\n                        i++;\n                    }\n\n                    if (i > mostMatchingChars) {\n                        mostMatchingChars = i;\n                        probableMatch = key;\n                    }\n                }\n\n                if (mostMatchingChars > 1) {\n                    suggestion = mixitup.messages.errorConfigInvalidPropertySuggestion({\n                        probableMatch: probableMatch\n                    });\n                }\n\n                message = mixitup.messages.errorConfigInvalidProperty({\n                    erroneous: erroneous,\n                    suggestion: suggestion\n                });\n\n                throw new TypeError(message);\n            }\n\n            throw err;\n        },\n\n        /**\n         * @private\n         * @param   {string} str\n         * @return  {function}\n         */\n\n        template: function(str) {\n            var re          = /\\${([\\w]*)}/g,\n                dynamics    = {},\n                matches     = null;\n\n            while ((matches = re.exec(str))) {\n                dynamics[matches[1]] = new RegExp('\\\\${' + matches[1] + '}', 'g');\n            }\n\n            return function(data) {\n                var key     = '',\n                    output  = str;\n\n                data = data || {};\n\n                for (key in dynamics) {\n                    output = output.replace(dynamics[key], typeof data[key] !== 'undefined' ? data[key] : '');\n                }\n\n                return output;\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        type\n         * @param   {function}      fn\n         * @param   {boolean}       useCapture\n         * @return  {void}\n         */\n\n        on: function(el, type, fn, useCapture) {\n            if (!el) return;\n\n            if (el.addEventListener) {\n                el.addEventListener(type, fn, useCapture);\n            } else if (el.attachEvent) {\n                el['e' + type + fn] = fn;\n\n                el[type + fn] = function() {\n                    el['e' + type + fn](window.event);\n                };\n\n                el.attachEvent('on' + type, el[type + fn]);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        type\n         * @param   {function}      fn\n         * @return  {void}\n         */\n\n        off: function(el, type, fn) {\n            if (!el) return;\n\n            if (el.removeEventListener) {\n                el.removeEventListener(type, fn, false);\n            } else if (el.detachEvent) {\n                el.detachEvent('on' + type, el[type + fn]);\n                el[type + fn] = null;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}      eventType\n         * @param   {object}      detail\n         * @param   {Document}    [doc]\n         * @return  {CustomEvent}\n         */\n\n        getCustomEvent: function(eventType, detail, doc) {\n            var event = null;\n\n            doc = doc || window.document;\n\n            if (typeof window.CustomEvent === 'function') {\n                event = new window.CustomEvent(eventType, {\n                    detail: detail,\n                    bubbles: true,\n                    cancelable: true\n                });\n            } else if (typeof doc.createEvent === 'function') {\n                event = doc.createEvent('CustomEvent');\n                event.initCustomEvent(eventType, true, true, detail);\n            } else {\n                event = doc.createEventObject(),\n                event.type = eventType;\n\n                event.returnValue = false;\n                event.cancelBubble = false;\n                event.detail = detail;\n            }\n\n            return event;\n        },\n\n        /**\n         * @private\n         * @param   {Event} e\n         * @return  {Event}\n         */\n\n        getOriginalEvent: function(e) {\n            if (e.touches && e.touches.length) {\n                return e.touches[0];\n            } else if (e.changedTouches && e.changedTouches.length) {\n                return e.changedTouches[0];\n            } else {\n                return e;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        selector\n         * @return  {Number}\n         */\n\n        index: function(el, selector) {\n            var i = 0;\n\n            while ((el = el.previousElementSibling) !== null) {\n                if (!selector || el.matches(selector)) {\n                    ++i;\n                }\n            }\n\n            return i;\n        },\n\n        /**\n         * Converts a dash or snake-case string to camel case.\n         *\n         * @private\n         * @param   {string}    str\n         * @param   {boolean}   [isPascal]\n         * @return  {string}\n         */\n\n        camelCase: function(str) {\n            return str.toLowerCase().replace(/([_-][a-z])/g, function($1) {\n                return $1.toUpperCase().replace(/[_-]/, '');\n            });\n        },\n\n        /**\n         * Converts a dash or snake-case string to pascal case.\n         *\n         * @private\n         * @param   {string}    str\n         * @param   {boolean}   [isPascal]\n         * @return  {string}\n         */\n\n        pascalCase: function(str) {\n            return (str = this.camelCase(str)).charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Converts a camel or pascal-case string to dash case.\n         *\n         * @private\n         * @param   {string}    str\n         * @return  {string}\n         */\n\n        dashCase: function(str) {\n            return str.replace(/([A-Z])/g, '-$1').replace(/^-/, '').toLowerCase();\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}       el\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {boolean}\n         */\n\n        isElement: function(el, doc) {\n            doc = doc || window.document;\n\n            if (\n                window.HTMLElement &&\n                el instanceof window.HTMLElement\n            ) {\n                return true;\n            } else if (\n                doc.defaultView &&\n                doc.defaultView.HTMLElement &&\n                el instanceof doc.defaultView.HTMLElement\n            ) {\n                return true;\n            } else {\n                return (\n                    el !== null &&\n                    el.nodeType === 1 &&\n                    typeof el.nodeName === 'string'\n                );\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}            htmlString\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {DocumentFragment}\n         */\n\n        createElement: function(htmlString, doc) {\n            var frag = null,\n                temp = null;\n\n            doc = doc || window.document;\n\n            frag = doc.createDocumentFragment();\n            temp = doc.createElement('div');\n\n            temp.innerHTML = htmlString;\n\n            while (temp.firstChild) {\n                frag.appendChild(temp.firstChild);\n            }\n\n            return frag;\n        },\n\n        /**\n         * @private\n         * @param   {Node} node\n         * @return  {void}\n         */\n\n        removeWhitespace: function(node) {\n            var deleting;\n\n            while (node && node.nodeName === '#text') {\n                deleting = node;\n\n                node = node.previousSibling;\n\n                deleting.parentElement && deleting.parentElement.removeChild(deleting);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {Array<*>}  a\n         * @param   {Array<*>}  b\n         * @return  {boolean}\n         */\n\n        isEqualArray: function(a, b) {\n            var i = a.length;\n\n            if (i !== b.length) return false;\n\n            while (i--) {\n                if (a[i] !== b[i]) return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @param   {object}  a\n         * @param   {object}  b\n         * @return  {boolean}\n         */\n\n        deepEquals: function(a, b) {\n            var key;\n\n            if (typeof a === 'object' && a && typeof b === 'object' && b) {\n                if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n                for (key in a) {\n                    if (!b.hasOwnProperty(key) || !this.deepEquals(a[key], b[key])) return false;\n                }\n            } else if (a !== b) {\n                return false;\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @param   {Array<*>}  oldArray\n         * @return  {Array<*>}\n         */\n\n        arrayShuffle: function(oldArray) {\n            var newArray    = oldArray.slice(),\n                len         = newArray.length,\n                i           = len,\n                p           = -1,\n                t           = [];\n\n            while (i--) {\n                p = ~~(Math.random() * len);\n                t = newArray[i];\n\n                newArray[i] = newArray[p];\n                newArray[p] = t;\n            }\n\n            return newArray;\n        },\n\n        /**\n         * @private\n         * @param   {object}    list\n         */\n\n        arrayFromList: function(list) {\n            var output, i;\n\n            try {\n                return Array.prototype.slice.call(list);\n            } catch(err) {\n                output = [];\n\n                for (i = 0; i < list.length; i++) {\n                    output.push(list[i]);\n                }\n\n                return output;\n            }\n        },\n\n        /**\n         * @private\n         * @param   {function}  func\n         * @param   {Number}    wait\n         * @param   {boolean}   immediate\n         * @return  {function}\n         */\n\n        debounce: function(func, wait, immediate) {\n            var timeout;\n\n            return function() {\n                var self     = this,\n                    args     = arguments,\n                    callNow  = immediate && !timeout,\n                    later    = null;\n\n                later = function() {\n                    timeout  = null;\n\n                    if (!immediate) {\n                        func.apply(self, args);\n                    }\n                };\n\n                clearTimeout(timeout);\n\n                timeout = setTimeout(later, wait);\n\n                if (callNow) func.apply(self, args);\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   element\n         * @return  {object}\n         */\n\n        position: function(element) {\n            var xPosition       = 0,\n                yPosition       = 0,\n                offsetParent    = element;\n\n            while (element) {\n                xPosition -= element.scrollLeft;\n                yPosition -= element.scrollTop;\n\n                if (element === offsetParent) {\n                    xPosition += element.offsetLeft;\n                    yPosition += element.offsetTop;\n\n                    offsetParent = element.offsetParent;\n                }\n\n                element = element.parentElement;\n            }\n\n            return {\n                x: xPosition,\n                y: yPosition\n            };\n        },\n\n        /**\n         * @private\n         * @param   {object}    node1\n         * @param   {object}    node2\n         * @return  {Number}\n         */\n\n        getHypotenuse: function(node1, node2) {\n            var distanceX = node1.x - node2.x,\n                distanceY = node1.y - node2.y;\n\n            distanceX = distanceX < 0 ? distanceX * -1 : distanceX,\n            distanceY = distanceY < 0 ? distanceY * -1 : distanceY;\n\n            return Math.sqrt(Math.pow(distanceX, 2) + Math.pow(distanceY, 2));\n        },\n\n        /**\n         * Calcuates the area of intersection between two rectangles and expresses it as\n         * a ratio in comparison to the area of the first rectangle.\n         *\n         * @private\n         * @param   {Rect}  box1\n         * @param   {Rect}  box2\n         * @return  {number}\n         */\n\n        getIntersectionRatio: function(box1, box2) {\n            var controlArea         = box1.width * box1.height,\n                intersectionX       = -1,\n                intersectionY       = -1,\n                intersectionArea    = -1,\n                ratio               = -1;\n\n            intersectionX =\n                Math.max(0, Math.min(box1.left + box1.width, box2.left + box2.width) - Math.max(box1.left, box2.left));\n\n            intersectionY =\n                Math.max(0, Math.min(box1.top + box1.height, box2.top + box2.height) - Math.max(box1.top, box2.top));\n\n            intersectionArea = intersectionY * intersectionX;\n\n            ratio = intersectionArea / controlArea;\n\n            return ratio;\n        },\n\n        /**\n         * @private\n         * @param   {object}            el\n         * @param   {string}            selector\n         * @param   {boolean}           [includeSelf]\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {Element|null}\n         */\n\n        closestParent: function(el, selector, includeSelf, doc) {\n            var parent  = el.parentNode;\n\n            doc = doc || window.document;\n\n            if (includeSelf && el.matches(selector)) {\n                return el;\n            }\n\n            while (parent && parent != doc.body) {\n                if (parent.matches && parent.matches(selector)) {\n                    return parent;\n                } else if (parent.parentNode) {\n                    parent = parent.parentNode;\n                } else {\n                    return null;\n                }\n            }\n\n            return null;\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}       el\n         * @param   {string}            selector\n         * @param   {HTMLHtmlElement}   [doc]\n         * @return  {NodeList}\n         */\n\n        children: function(el, selector, doc) {\n            var children    = [],\n                tempId      = '';\n\n            doc = doc || window.doc;\n\n            if (el) {\n                if (!el.id) {\n                    tempId = 'Temp' + this.randomHexKey();\n\n                    el.id = tempId;\n                }\n\n                children = doc.querySelectorAll('#' + el.id + ' > ' + selector);\n\n                if (tempId) {\n                    el.removeAttribute('id');\n                }\n            }\n\n            return children;\n        },\n\n        /**\n         * Creates a clone of a provided array, with any empty strings removed.\n         *\n         * @private\n         * @param   {Array<*>} originalArray\n         * @return  {Array<*>}\n         */\n\n        clean: function(originalArray) {\n            var cleanArray = [],\n                i = -1;\n\n            for (i = 0; i < originalArray.length; i++) {\n                if (originalArray[i] !== '') {\n                    cleanArray.push(originalArray[i]);\n                }\n            }\n\n            return cleanArray;\n        },\n\n        /**\n         * Abstracts an ES6 promise into a q-like deferred interface for storage and deferred resolution.\n         *\n         * @private\n         * @param  {object} libraries\n         * @return {h.Deferred}\n         */\n\n        defer: function(libraries) {\n            var deferred       = null,\n                promiseWrapper = null,\n                $              = null;\n\n            promiseWrapper = new this.Deferred();\n\n            if (mixitup.features.has.promises) {\n                // ES6 native promise or polyfill\n\n                promiseWrapper.promise = new Promise(function(resolve, reject) {\n                    promiseWrapper.resolve = resolve;\n                    promiseWrapper.reject  = reject;\n                });\n            } else if (($ = (window.jQuery || libraries.$)) && typeof $.Deferred === 'function') {\n                // jQuery\n\n                deferred = $.Deferred();\n\n                promiseWrapper.promise = deferred.promise();\n                promiseWrapper.resolve = deferred.resolve;\n                promiseWrapper.reject  = deferred.reject;\n            } else if (window.console) {\n                // No implementation\n\n                console.warn(mixitup.messages.warningNoPromiseImplementation());\n            }\n\n            return promiseWrapper;\n        },\n\n        /**\n         * @private\n         * @param   {Array<Promise>}    tasks\n         * @param   {object}            libraries\n         * @return  {Promise<Array>}\n         */\n\n        all: function(tasks, libraries) {\n            var $ = null;\n\n            if (mixitup.features.has.promises) {\n                return Promise.all(tasks);\n            } else if (($ = (window.jQuery || libraries.$)) && typeof $.when === 'function') {\n                return $.when.apply($, tasks)\n                    .done(function() {\n                        // jQuery when returns spread arguments rather than an array or resolutions\n\n                        return arguments;\n                    });\n            }\n\n            // No implementation\n\n            if (window.console) {\n                console.warn(mixitup.messages.warningNoPromiseImplementation());\n            }\n\n            return [];\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @param   {string}        property\n         * @param   {Array<string>} vendors\n         * @return  {string}\n         */\n\n        getPrefix: function(el, property, vendors) {\n            var i       = -1,\n                prefix  = '';\n\n            if (h.dashCase(property) in el.style) return '';\n\n            for (i = 0; prefix = vendors[i]; i++) {\n                if (prefix + property in el.style) {\n                    return prefix.toLowerCase();\n                }\n            }\n\n            return 'unsupported';\n        },\n\n        /**\n         * @private\n         * @return  {string}\n         */\n\n        randomHex: function() {\n            return ('00000' + (Math.random() * 16777216 << 0).toString(16)).substr(-6).toUpperCase();\n        },\n\n        /**\n         * @private\n         * @param   {HTMLDocument}  [doc]\n         * @return  {object}\n         */\n\n        getDocumentState: function(doc) {\n            doc = typeof doc.body === 'object' ? doc : window.document;\n\n            return {\n                scrollTop: window.pageYOffset,\n                scrollLeft: window.pageXOffset,\n                docHeight: doc.documentElement.scrollHeight,\n                docWidth: doc.documentElement.scrollWidth,\n                viewportHeight: doc.documentElement.clientHeight,\n                viewportWidth: doc.documentElement.clientWidth\n            };\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         * @param   {function}  fn\n         * @return  {function}\n         */\n\n        bind: function(obj, fn) {\n            return function() {\n                return fn.apply(obj, arguments);\n            };\n        },\n\n        /**\n         * @private\n         * @param   {HTMLElement}   el\n         * @return  {boolean}\n         */\n\n        isVisible: function(el) {\n            var styles = null;\n\n            if (el.offsetParent) return true;\n\n            styles = window.getComputedStyle(el);\n\n            if (\n                styles.position === 'fixed' &&\n                styles.visibility !== 'hidden' &&\n                styles.opacity !== '0'\n            ) {\n                // Fixed elements report no offsetParent,\n                // but may still be invisible\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         */\n\n        seal: function(obj) {\n            if (typeof Object.seal === 'function') {\n                Object.seal(obj);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {object}    obj\n         */\n\n        freeze: function(obj) {\n            if (typeof Object.freeze === 'function') {\n                Object.freeze(obj);\n            }\n        },\n\n        /**\n         * @private\n         * @param   {string}    control\n         * @param   {string}    specimen\n         * @return  {boolean}\n         */\n\n        compareVersions: function(control, specimen) {\n            var controlParts    = control.split('.'),\n                specimenParts   = specimen.split('.'),\n                controlPart     = -1,\n                specimenPart    = -1,\n                i               = -1;\n\n            for (i = 0; i < controlParts.length; i++) {\n                controlPart     = parseInt(controlParts[i].replace(/[^\\d.]/g, ''));\n                specimenPart    = parseInt(specimenParts[i].replace(/[^\\d.]/g, '') || 0);\n\n                if (specimenPart < controlPart) {\n                    return false;\n                } else if (specimenPart > controlPart) {\n                    return true;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @private\n         * @constructor\n         */\n\n        Deferred: function() {\n            this.promise    = null;\n            this.resolve    = null;\n            this.reject     = null;\n            this.id         = h.randomHex();\n        },\n\n        /**\n         * @private\n         * @param   {object}  obj\n         * @return  {boolean}\n         */\n\n        isEmptyObject: function(obj) {\n            var key = '';\n\n            if (typeof Object.keys === 'function') {\n                return Object.keys(obj).length === 0;\n            }\n\n            for (key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * @param   {mixitup.Config.ClassNames}   classNames\n         * @param   {string}                      elementName\n         * @param   {string}                      [modifier]\n         * @return  {string}\n         */\n\n        getClassname: function(classNames, elementName, modifier) {\n            var classname = '';\n\n            classname += classNames.block;\n\n            if (classname.length) {\n                classname += classNames.delineatorElement;\n            }\n\n            classname += classNames['element' + this.pascalCase(elementName)];\n\n            if (!modifier) return classname;\n\n            if (classname.length) {\n                classname += classNames.delineatorModifier;\n            }\n\n            classname += modifier;\n\n            return classname;\n        },\n\n        /**\n         * Returns the value of a property on a given object via its string key.\n         *\n         * @param   {object}    obj\n         * @param   {string}    stringKey\n         * @return  {*} value\n         */\n\n        getProperty: function(obj, stringKey) {\n            var parts           = stringKey.split('.'),\n                returnCurrent   = null,\n                current         = '',\n                i               = 0;\n\n            if (!stringKey) {\n                return obj;\n            }\n\n            returnCurrent = function(obj) {\n                if (!obj) {\n                    return null;\n                } else {\n                    return obj[current];\n                }\n            };\n\n            while (i < parts.length) {\n                current = parts[i];\n\n                obj = returnCurrent(obj);\n\n                i++;\n            }\n\n            if (typeof obj !== 'undefined') {\n                return obj;\n            } else {\n                return null;\n            }\n        }\n    };\n\n    mixitup.h = h;\n\n    /**\n     * The Base class adds instance methods to all other extensible MixItUp classes,\n     * enabling the calling of any registered hooks.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Base = function() {};\n\n    mixitup.Base.prototype = {\n        constructor: mixitup.Base,\n\n        /**\n         * Calls any registered hooks for the provided action.\n         *\n         * @memberof    mixitup.Base\n         * @private\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    actionName\n         * @param       {Array<*>}  args\n         * @return      {void}\n         */\n\n        callActions: function(actionName, args) {\n            var self            = this,\n                hooks           = self.constructor.actions[actionName],\n                extensionName   = '';\n\n            if (!hooks || h.isEmptyObject(hooks)) return;\n\n            for (extensionName in hooks) {\n                hooks[extensionName].apply(self, args);\n            }\n        },\n\n        /**\n         * Calls any registered hooks for the provided filter.\n         *\n         * @memberof    mixitup.Base\n         * @private\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    filterName\n         * @param       {*}         input\n         * @param       {Array<*>}  args\n         * @return      {*}\n         */\n\n        callFilters: function(filterName, input, args) {\n            var self            = this,\n                hooks           = self.constructor.filters[filterName],\n                output          = input,\n                extensionName   = '';\n\n            if (!hooks || h.isEmptyObject(hooks)) return output;\n\n            args = args || [];\n\n            for (extensionName in hooks) {\n                args = h.arrayFromList(args);\n\n                args.unshift(output);\n\n                output = hooks[extensionName].apply(self, args);\n            }\n\n            return output;\n        }\n    };\n\n    /**\n     * The BaseStatic class holds a set of static methods which are then added to all other\n     * extensible MixItUp classes as a means of integrating extensions via the addition of new\n     * methods and/or actions and hooks.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.BaseStatic = function() {\n        this.actions = {};\n        this.filters = {};\n\n        /**\n         * Performs a shallow extend on the class's prototype, adding one or more new members to\n         * the class in a single operation.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {object} extension\n         * @return      {void}\n         */\n\n        this.extend = function(extension) {\n            h.extend(this.prototype, extension);\n        };\n\n        /**\n         * Registers a function to be called on the action hook of the provided name.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {string}    hookName\n         * @param       {string}    extensionName\n         * @param       {function}  func\n         * @return      {void}\n         */\n\n        this.registerAction = function(hookName, extensionName, func) {\n            (this.actions[hookName] = this.actions[hookName] || {})[extensionName] = func;\n        };\n\n        /**\n         * Registers a function to be called on the filter of the provided name.\n         *\n         * @memberof    mixitup.BaseStatic\n         * @public\n         * @static\n         * @since       2.1.0\n         * @param       {string}    hookName\n         * @param       {string}    extensionName\n         * @param       {function}  func\n         * @return      {void}\n         */\n\n        this.registerFilter = function(hookName, extensionName, func) {\n            (this.filters[hookName] = this.filters[hookName] || {})[extensionName] = func;\n        };\n    };\n\n    /**\n     * The `mixitup.Features` class performs all feature and CSS prefix detection\n     * neccessary for MixItUp to function correctly, as well as storing various\n     * string and array constants. All feature decection is on evaluation of the\n     * library and stored in a singleton instance for use by other internal classes.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Features = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.boxSizingPrefix            = '';\n        this.transformPrefix            = '';\n        this.transitionPrefix           = '';\n\n        this.boxSizingPrefix            = '';\n        this.transformProp              = '';\n        this.transformRule              = '';\n        this.transitionProp             = '';\n        this.perspectiveProp            = '';\n        this.perspectiveOriginProp      = '';\n\n        this.has                        = new mixitup.Has();\n\n        this.canary                     = null;\n\n        this.BOX_SIZING_PROP            = 'boxSizing';\n        this.TRANSITION_PROP            = 'transition';\n        this.TRANSFORM_PROP             = 'transform';\n        this.PERSPECTIVE_PROP           = 'perspective';\n        this.PERSPECTIVE_ORIGIN_PROP    = 'perspectiveOrigin';\n        this.VENDORS                    = ['Webkit', 'moz', 'O', 'ms'];\n\n        this.TWEENABLE = [\n            'opacity',\n            'width', 'height',\n            'marginRight', 'marginBottom',\n            'x', 'y',\n            'scale',\n            'translateX', 'translateY', 'translateZ',\n            'rotateX', 'rotateY', 'rotateZ'\n        ];\n\n        this.callActions('afterConstruct');\n    };\n\n    mixitup.BaseStatic.call(mixitup.Features);\n\n    mixitup.Features.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Features.prototype,\n    /** @lends mixitup.Features */\n    {\n        constructor: mixitup.Features,\n\n        /**\n         * @private\n         * @return  {void}\n         */\n\n        init: function() {\n            var self = this;\n\n            self.callActions('beforeInit', arguments);\n\n            self.canary = document.createElement('div');\n\n            self.setPrefixes();\n            self.runTests();\n\n            self.callActions('beforeInit', arguments);\n        },\n\n        /**\n         * @private\n         * @return  {void}\n         */\n\n        runTests: function() {\n            var self = this;\n\n            self.callActions('beforeRunTests', arguments);\n\n            self.has.promises       = typeof window.Promise === 'function';\n            self.has.transitions    = self.transitionPrefix !== 'unsupported';\n\n            self.callActions('afterRunTests', arguments);\n\n            h.freeze(self.has);\n        },\n\n        /**\n         * @private\n         * @return  {void}\n         */\n\n        setPrefixes: function() {\n            var self = this;\n\n            self.callActions('beforeSetPrefixes', arguments);\n\n            self.transitionPrefix   = h.getPrefix(self.canary, 'Transition', self.VENDORS);\n            self.transformPrefix    = h.getPrefix(self.canary, 'Transform', self.VENDORS);\n            self.boxSizingPrefix    = h.getPrefix(self.canary, 'BoxSizing', self.VENDORS);\n\n            self.boxSizingProp = self.boxSizingPrefix ?\n                self.boxSizingPrefix + h.pascalCase(self.BOX_SIZING_PROP) : self.BOX_SIZING_PROP;\n\n            self.transitionProp = self.transitionPrefix ?\n                self.transitionPrefix + h.pascalCase(self.TRANSITION_PROP) : self.TRANSITION_PROP;\n\n            self.transformProp = self.transformPrefix ?\n                self.transformPrefix + h.pascalCase(self.TRANSFORM_PROP) : self.TRANSFORM_PROP;\n\n            self.transformRule = self.transformPrefix ?\n                '-' + self.transformPrefix + '-' + self.TRANSFORM_PROP : self.TRANSFORM_PROP;\n\n            self.perspectiveProp = self.transformPrefix ?\n                self.transformPrefix + h.pascalCase(self.PERSPECTIVE_PROP) : self.PERSPECTIVE_PROP;\n\n            self.perspectiveOriginProp = self.transformPrefix ?\n                self.transformPrefix + h.pascalCase(self.PERSPECTIVE_ORIGIN_PROP) :\n                self.PERSPECTIVE_ORIGIN_PROP;\n\n            self.callActions('afterSetPrefixes', arguments);\n        }\n    });\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Has = function() {\n        this.transitions    = false;\n        this.promises       = false;\n\n        h.seal(this);\n    };\n\n    // Assign a singleton instance to `mixitup.features` and initialise:\n\n    mixitup.features = new mixitup.Features();\n\n    mixitup.features.init();\n\n    /**\n     * A group of properties defining the mixer's animation and effects settings.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        animation\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigAnimation = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not animation should be enabled for the MixItUp instance.\n         * If `false`, all operations will occur instantly and syncronously, although callback\n         * functions and any returned promises will still be fulfilled.\n         *\n         * @example <caption>Example: Create a mixer with all animations disabled</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         enable: false\n         *     }\n         * });\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.enable = true;\n\n        /**\n         * A string of one or more space-seperated properties to which transitions will be\n         * applied for all filtering animations.\n         *\n         * Properties can be listed any order or combination, although they will be applied in a specific\n         * predefined order to produce consistent results.\n         *\n         * To learn more about available effects, experiment with our <a href=\"https://www.kunkalabs.com/mixitup/\">\n         * sandbox demo</a> and try out the \"Export config\" button in the Animation options drop down.\n         *\n         * @example <caption>Example: Apply \"fade\" and \"translateZ\" effects to all animations</caption>\n         * // As targets are filtered in and out, they will fade between\n         * // opacity 1 and 0 and transform between translateZ(-100px) and\n         * // translateZ(0).\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade translateZ(-100px)'\n         *     }\n         * });\n         *\n         * @name        effects\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     'fade scale'\n         */\n\n        this.effects = 'fade scale';\n\n        /**\n         * A string of one or more space-seperated effects to be applied only to filter-in\n         * animations, overriding `config.animation.effects` if set.\n         *\n         * @example <caption>Example: Apply downwards vertical translate to targets being filtered in</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effectsIn: 'fade translateY(-100%)'\n         *     }\n         * });\n         *\n         * @name        effectsIn\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.effectsIn = '';\n\n        /**\n         * A string of one or more space-seperated effects to be applied only to filter-out\n         * animations, overriding `config.animation.effects` if set.\n         *\n         * @example <caption>Example: Apply upwards vertical translate to targets being filtered out</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effectsOut: 'fade translateY(-100%)'\n         *     }\n         * });\n         *\n         * @name        effectsOut\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.effectsOut = '';\n\n        /**\n         * An integer dictating the duration of all MixItUp animations in milliseconds, not\n         * including any additional delay apllied via the `'stagger'` effect.\n         *\n         * @example <caption>Example: Apply an animation duration of 200ms to all mixitup animations</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         duration: 200\n         *     }\n         * });\n         *\n         * @name        duration\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {number}\n         * @default     600\n         */\n\n        this.duration = 600;\n\n        /**\n         * A valid CSS3 transition-timing function or shorthand. For a full list of accepted\n         * values, visit <a href=\"http://easings.net\" target=\"_blank\">easings.net</a>.\n         *\n         * @example <caption>Example 1: Apply \"ease-in-out\" easing to all animations</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         easing: 'ease-in-out'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Apply a custom \"cubic-bezier\" easing function to all animations</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         easing: 'cubic-bezier(0.645, 0.045, 0.355, 1)'\n         *     }\n         * });\n         *\n         * @name        easing\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     'ease'\n         */\n\n        this.easing = 'ease';\n\n        /**\n         * A boolean dictating whether or not to apply perspective to the MixItUp container\n         * during animations. By default, perspective is always applied and creates the\n         * illusion of three-dimensional space for effects such as `translateZ`, `rotateX`,\n         * and `rotateY`.\n         *\n         * You may wish to disable this and define your own perspective settings via CSS.\n         *\n         * @example <caption>Example: Prevent perspective from being applied to any 3D transforms</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         applyPerspective: false\n         *     }\n         * });\n         *\n         * @name        applyPerspective\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {bolean}\n         * @default     true\n         */\n\n        this.applyPerspective = true;\n\n        /**\n         * The perspective distance value to be applied to the container during animations,\n         * affecting any 3D-transform-based effects.\n         *\n         * @example <caption>Example: Set a perspective distance of 2000px</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'rotateY(-25deg)',\n         *         perspectiveDistance: '2000px'\n         *     }\n         * });\n         *\n         * @name        perspectiveDistance\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     '3000px'\n         */\n\n        this.perspectiveDistance = '3000px';\n\n        /**\n         * The perspective-origin value to be applied to the container during animations,\n         * affecting any 3D-transform-based effects.\n         *\n         * @example <caption>Example: Set a perspective origin in the top-right of the container</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'transateZ(-200px)',\n         *         perspectiveOrigin: '100% 0'\n         *     }\n         * });\n         *\n         * @name        perspectiveOrigin\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {string}\n         * @default     '50% 50%'\n         */\n\n        this.perspectiveOrigin = '50% 50%';\n\n        /**\n         * A boolean dictating whether or not to enable the queuing of operations.\n         *\n         * If `true` (default), and a control is clicked or an API call is made while another\n         * operation is progress, the operation will go into the queue and will be automatically exectuted\n         * when the previous operaitons is finished.\n         *\n         * If `false`, any requested operations will be ignored, and the `onMixBusy` callback and `mixBusy`\n         * event will be fired. If `debug.showWarnings` is enabled, a console warning will also occur.\n         *\n         * @example <caption>Example: Disable queuing</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         queue: false\n         *     }\n         * });\n         *\n         * @name        queue\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.queue = true;\n\n        /**\n         * An integer dictacting the maximum number of operations allowed in the queue at\n         * any time, when queuing is enabled.\n         *\n         * @example <caption>Example: Allow a maximum of 5 operations in the queue at any time</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         queueLimit: 5\n         *     }\n         * });\n         *\n         * @name        queueLimit\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {number}\n         * @default     3\n         */\n\n        this.queueLimit = 3;\n\n        /**\n         * A boolean dictating whether or not to transition the height and width of the\n         * container as elements are filtered in and out. If disabled, the container height\n         * will change abruptly.\n         *\n         * It may be desirable to disable this on mobile devices as the CSS `height` and\n         * `width` properties do not receive GPU-acceleration and can therefore cause stuttering.\n         *\n         * @example <caption>Example 1: Disable the transitioning of the container height and/or width</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeContainer: false\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Disable the transitioning of the container height and/or width for mobile devices only</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeContainer: myFeatureTests.isMobile ? false : true\n         *     }\n         * });\n         *\n         * @name        animateResizeContainer\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.animateResizeContainer = true;\n\n        /**\n         * A boolean dictating whether or not to transition the height and width of target\n         * elements as they change throughout the course of an animation.\n         *\n         * This is often a must for flex-box grid layouts where the size of target elements may change\n         * depending on final their position in relation to their siblings, or for `.changeLayout()`\n         * operations where the size of targets change between layouts.\n         *\n         * NB: This feature requires additional calculations and manipulation to non-hardware-accelerated\n         * properties which may adversely affect performance on slower devices, and is therefore\n         * disabled by default.\n         *\n         * @example <caption>Example: Enable the transitioning of target widths and heights</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         animateResizeTargets: true\n         *     }\n         * });\n         *\n         * @name        animateResizeTargets\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.animateResizeTargets = false;\n\n        /**\n         * A custom function used to manipulate the order in which the stagger delay is\n         * incremented when using the ‘stagger’ effect.\n         *\n         * When using the 'stagger' effect, the delay applied to each target element is incremented\n         * based on its index. You may create a custom function to manipulate the order in which the\n         * delay is incremented and create engaging non-linear stagger effects.\n         *\n         * The function receives the index of the target element as a parameter, and must\n         * return an integer which serves as the multiplier for the stagger delay.\n         *\n         * @example <caption>Example 1: Stagger target elements by column in a 3-column grid</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade stagger(100ms)',\n         *         staggerSequence: function(i) {\n         *             return i % 3;\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an algorithm to produce a more complex sequence</caption>\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade stagger(100ms)',\n         *         staggerSequence: function(i) {\n         *             return (2*i) - (5*((i/3) - ((1/3) * (i%3))));\n         *         }\n         *     }\n         * });\n         *\n         * @name        staggerSequence\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.staggerSequence = null;\n\n        /**\n         * A boolean dictating whether or not to reverse the direction of `translate`\n         * and `rotate` transforms for elements being filtered out.\n         *\n         * It can be used to create carousel-like animations where elements enter and exit\n         * from opposite directions. If enabled, the effect `translateX(-100%)` for elements\n         * being filtered in would become `translateX(100%)` for targets being filtered out.\n         *\n         * This functionality can also be achieved by providing seperate effects\n         * strings for `config.animation.effectsIn` and `config.animation.effectsOut`.\n         *\n         * @example <caption>Example: Reverse the desired direction on any translate/rotate effect for targets being filtered out</caption>\n         * // Elements being filtered in will be translated from '100%' to '0' while\n         * // elements being filtered out will be translated from 0 to '-100%'\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         effects: 'fade translateX(100%)',\n         *         reverseOut: true,\n         *         nudge: false // Disable nudging to create a carousel-like effect\n         *     }\n         * });\n         *\n         * @name        reverseOut\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.reverseOut = false;\n\n        /**\n         * A boolean dictating whether or not to \"nudge\" the animation path of targets\n         * when they are being filtered in and out simulatenously.\n         *\n         * This has been the default behavior of MixItUp since version 1, but it\n         * may be desirable to disable this effect when filtering directly from\n         * one exclusive set of targets to a different exclusive set of targets,\n         * to create a carousel-like effect, or a generally more subtle animation.\n         *\n         * @example <caption>Example: Disable the \"nudging\" of targets being filtered in and out simulatenously</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         nudge: false\n         *     }\n         * });\n         *\n         * @name        nudge\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.nudge = true;\n\n        /**\n         * A boolean dictating whether or not to clamp the height of the container while MixItUp's\n         * geometry tests are carried out before an operation.\n         *\n         * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n         * height of the container might affect its vertical positioning in the viewport\n         * (e.g. a vertically-centered container), this should be turned off to ensure accurate\n         * test results and a smooth animation.\n         *\n         * @example <caption>Example: Disable container height-clamping</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         clampHeight: false\n         *     }\n         * });\n         *\n         * @name        clampHeight\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.clampHeight = true;\n\n        /**\n         * A boolean dictating whether or not to clamp the width of the container while MixItUp's\n         * geometry tests are carried out before an operation.\n         *\n         * To prevent scroll-bar flicker, clamping is turned on by default. But in the case where the\n         * width of the container might affect its horitzontal positioning in the viewport\n         * (e.g. a horizontall-centered container), this should be turned off to ensure accurate\n         * test results and a smooth animation.\n         *\n         * @example <caption>Example: Disable container width-clamping</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     animation: {\n         *         clampWidth: false\n         *     }\n         * });\n         *\n         * @name        clampWidth\n         * @memberof    mixitup.Config.animation\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.clampWidth = true;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigAnimation);\n\n    mixitup.ConfigAnimation.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigAnimation.prototype.constructor = mixitup.ConfigAnimation;\n\n    /**\n     * A group of properties relating to the behavior of the Mixer.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        behavior\n     * @namespace\n     * @public\n     * @since       3.1.12\n     */\n\n    mixitup.ConfigBehavior = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether to allow \"live\" sorting of the mixer.\n         *\n         * Because of the expensive nature of sorting, MixItUp makes use of several\n         * internal optimizations to skip redundant sorting operations, such as when\n         * the newly requested sort command is the same as the active one. The caveat\n         * to this optimization is that \"live\" edits to the value of a target's sorting\n         * attribute will be ignored when requesting a re-sort by the same attribute.\n         *\n         * By setting to `behavior.liveSort` to `true`, the mixer will always re-sort\n         * regardless of whether or not the sorting attribute and order have changed.\n         *\n         * @example <caption>Example: Enabling `liveSort` to allow for re-sorting</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     behavior: {\n         *         liveSort: true\n         *     },\n         *     load: {\n         *         sort: 'edited:desc'\n         *     }\n         * });\n         *\n         * var target = containerEl.children[3];\n         *\n         * console.log(target.getAttribute('data-edited')); // '2015-04-24'\n         *\n         * target.setAttribute('data-edited', '2017-08-10'); // Update the target's edited date\n         *\n         * mixer.sort('edited:desc')\n         *     .then(function(state) {\n         *         // The target is now at the top of the list\n         *\n         *         console.log(state.targets[0] === target); // true\n         *     });\n         *\n         * @name        liveSort\n         * @memberof    mixitup.Config.behavior\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.liveSort = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigBehavior);\n\n    mixitup.ConfigBehavior.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigBehavior.prototype.constructor = mixitup.ConfigBehavior;\n\n    /**\n     * A group of optional callback functions to be invoked at various\n     * points within the lifecycle of a mixer operation.\n     *\n     * Each function is analogous to an event of the same name triggered from the\n     * container element, and is invoked immediately after it.\n     *\n     * All callback functions receive the current `state` object as their first\n     * argument, as well as other more specific arguments described below.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        callbacks\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigCallbacks = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A callback function invoked immediately after any MixItUp operation is requested\n         * and before animations have begun.\n         *\n         * A second `futureState` argument is passed to the function which represents the final\n         * state of the mixer once the requested operation has completed.\n         *\n         * @example <caption>Example: Adding an `onMixStart` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixStart: function(state, futureState) {\n         *              console.log('Starting operation...');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixStart\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixStart = null;\n\n        /**\n         * A callback function invoked when a MixItUp operation is requested while another\n         * operation is in progress, and the animation queue is full, or queueing\n         * is disabled.\n         *\n         * @example <caption>Example: Adding an `onMixBusy` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixBusy: function(state) {\n         *              console.log('Mixer busy');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixBusy\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixBusy  = null;\n\n        /**\n         * A callback function invoked after any MixItUp operation has completed, and the\n         * state has been updated.\n         *\n         * @example <caption>Example: Adding an `onMixEnd` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixEnd: function(state) {\n         *              console.log('Operation complete');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixEnd\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixEnd   = null;\n\n        /**\n         * A callback function invoked whenever an operation \"fails\", i.e. no targets\n         * could be found matching the requested filter.\n         *\n         * @example <caption>Example: Adding an `onMixFail` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixFail: function(state) {\n         *              console.log('No items could be found matching the requested filter');\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixFail\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixFail  = null;\n\n        /**\n         * A callback function invoked whenever a MixItUp control is clicked, and before its\n         * respective operation is requested.\n         *\n         * The clicked element is assigned to the `this` keyword within the function. The original\n         * click event is passed to the function as the second argument, which can be useful if\n         * using `<a>` tags as controls where the default behavior needs to be prevented.\n         *\n         * Returning `false` from the callback will prevent the control click from triggering\n         * an operation.\n         *\n         * @example <caption>Example 1: Adding an `onMixClick` callback function</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              console.log('The control \"' + this.innerText + '\" was clicked');\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using `onMixClick` to manipulate the original click event</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              // Prevent original click event from bubbling up:\n         *              originalEvent.stopPropagation();\n         *\n         *              // Prevent default behavior of clicked element:\n         *              originalEvent.preventDefault();\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 3: Using `onMixClick` to conditionally cancel operations</caption>\n         * var mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixClick: function(state, originalEvent) {\n         *              // Perform some conditional check:\n         *\n         *              if (myApp.isLoading) {\n         *                  // By returning false, we can prevent the control click from triggering an operation.\n         *\n         *                  return false;\n         *              }\n         *         }\n         *     }\n         * });\n         *\n         * @name        onMixClick\n         * @memberof    mixitup.Config.callbacks\n         * @instance\n         * @type        {function}\n         * @default     null\n         */\n\n        this.onMixClick = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigCallbacks);\n\n    mixitup.ConfigCallbacks.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigCallbacks.prototype.constructor = mixitup.ConfigCallbacks;\n\n    /**\n     * A group of properties relating to clickable control elements.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        controls\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigControls = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not controls should be enabled for the mixer instance.\n         *\n         * If `true` (default behavior), MixItUp will search the DOM for any clickable elements with\n         * `data-filter`, `data-sort` or `data-toggle` attributes, and bind them for click events.\n         *\n         * If `false`, no click handlers will be bound, and all functionality must therefore be performed\n         * via the mixer's API methods.\n         *\n         * If you do not intend to use the default controls, setting this property to `false` will\n         * marginally improve the startup time of your mixer instance, and will also prevent any other active\n         * mixer instances in the DOM which are bound to controls from controlling the instance.\n         *\n         * @example <caption>Example: Disabling controls</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         enable: false\n         *     }\n         * });\n         *\n         * // With the default controls disabled, we can only control\n         * // the mixer via its API methods, e.g.:\n         *\n         * mixer.filter('.cat-1');\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.enable = true;\n\n        /**\n         * A boolean dictating whether or not to use event delegation when binding click events\n         * to the default controls.\n         *\n         * If `false` (default behavior), each control button in the DOM will be found and\n         * individually bound when a mixer is instantiated, with their corresponding actions\n         * cached for performance.\n         *\n         * If `true`, a single click handler will be applied to the `window` (or container element - see\n         * `config.controls.scope`), and any click events triggered by elements with `data-filter`,\n         * `data-sort` or `data-toggle` attributes present will be handled as they propagate upwards.\n         *\n         * If you require a user interface where control buttons may be added, removed, or changed during the\n         * lifetime of a mixer, `controls.live` should be set to `true`. There is a marginal but unavoidable\n         * performance deficit when using live controls, as the value of each control button must be read\n         * from the DOM in real time once the click event has propagated.\n         *\n         * @example <caption>Example: Setting live controls</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         live: true\n         *     }\n         * });\n         *\n         * // Control buttons can now be added, remove and changed without breaking\n         * // the mixer's UI\n         *\n         * @name        live\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.live = false;\n\n        /**\n         * A string dictating the \"scope\" to use when binding or querying the default controls. The available\n         * values are `'global'` or `'local'`.\n         *\n         * When set to `'global'` (default behavior), MixItUp will query the entire document for control buttons\n         * to bind, or delegate click events from (see `config.controls.live`).\n         *\n         * When set to `'local'`, MixItUp will only query (or bind click events to) its own container element.\n         * This may be desireable if you require multiple active mixer instances within the same document, with\n         * controls that would otherwise intefere with each other if scoped globally.\n         *\n         * Conversely, if you wish to control multiple instances with a single UI, you would create one\n         * set of controls and keep the controls scope of each mixer set to `global`.\n         *\n         * @example <caption>Example: Setting 'local' scoped controls</caption>\n         * var mixerOne = mixitup(containerOne, {\n         *     controls: {\n         *         scope: 'local'\n         *     }\n         * });\n         *\n         * var mixerTwo = mixitup(containerTwo, {\n         *     controls: {\n         *         scope: 'local'\n         *     }\n         * });\n         *\n         * // Both mixers can now exist within the same document with\n         * // isolated controls placed within their container elements.\n         *\n         * @name        scope\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'global'\n         */\n\n        this.scope = 'global'; // enum: ['local' ,'global']\n\n        /**\n         * A string dictating the type of logic to apply when concatenating the filter selectors of\n         * active toggle buttons (i.e. any clickable element with a `data-toggle` attribute).\n         *\n         * If set to `'or'` (default behavior), selectors will be concatenated together as\n         * a comma-seperated list. For example:\n         *\n         * `'.cat-1, .cat-2'` (shows any elements matching `'.cat-1'` OR `'.cat-2'`)\n         *\n         * If set to `'and'`, selectors will be directly concatenated together. For example:\n         *\n         * `'.cat-1.cat-2'` (shows any elements which match both `'.cat-1'` AND `'.cat-2'`)\n         *\n         * @example <caption>Example: Setting \"and\" toggle logic</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleLogic: 'and'\n         *     }\n         * });\n         *\n         * @name        toggleLogic\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'or'\n         */\n\n        this.toggleLogic = 'or'; // enum: ['or', 'and']\n\n        /**\n         * A string dictating the filter behavior when all toggles are inactive.\n         *\n         * When set to `'all'` (default behavior), *all* targets will be shown by default\n         * when no toggles are active, or at the moment all active toggles are toggled off.\n         *\n         * When set to `'none'`, no targets will be shown by default when no toggles are\n         * active, or at the moment all active toggles are toggled off.\n         *\n         * @example <caption>Example 1: Setting the default toggle behavior to `'all'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleDefault: 'all'\n         *     }\n         * });\n         *\n         * mixer.toggleOn('.cat-2')\n         *     .then(function() {\n         *         // Deactivate all active toggles\n         *\n         *         return mixer.toggleOff('.cat-2')\n         *     })\n         *     .then(function(state) {\n         *          console.log(state.activeFilter.selector); // 'all'\n         *          console.log(state.totalShow); // 12\n         *     });\n         *\n         * @example <caption>Example 2: Setting the default toggle behavior to `'none'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     controls: {\n         *         toggleDefault: 'none'\n         *     }\n         * });\n         *\n         * mixer.toggleOn('.cat-2')\n         *     .then(function() {\n         *         // Deactivate all active toggles\n         *\n         *         return mixer.toggleOff('.cat-2')\n         *     })\n         *     .then(function(state) {\n         *          console.log(state.activeFilter.selector); // 'none'\n         *          console.log(state.totalShow); // 0\n         *     });\n         *\n         * @name        toggleDefault\n         * @memberof    mixitup.Config.controls\n         * @instance\n         * @type        {string}\n         * @default     'all'\n         */\n\n        this.toggleDefault = 'all'; // enum: ['all', 'none']\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigControls);\n\n    mixitup.ConfigControls.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigControls.prototype.constructor = mixitup.ConfigControls;\n\n    /**\n     * A group of properties defining the output and structure of class names programmatically\n     * added to controls and containers to reflect the state of the mixer.\n     *\n     * Most commonly, class names are added to controls by MixItUp to indicate that\n     * the control is active so that it can be styled accordingly - `'mixitup-control-active'` by default.\n     *\n     * Using a \"BEM\" like structure, each classname is broken into the three parts:\n     * a block namespace (`'mixitup'`), an element name (e.g. `'control'`), and an optional modifier\n     * name (e.g. `'active'`) reflecting the state of the element.\n     *\n     * By default, each part of the classname is concatenated together using single hyphens as\n     * delineators, but this can be easily customised to match the naming convention and style of\n     * your project.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        classNames\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigClassNames = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * The \"block\" portion, or top-level namespace added to the start of any class names created by MixItUp.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.block` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio'\n         *     }\n         * });\n         *\n         * // Active control output: \"portfolio-control-active\"\n         *\n         * @example <caption>Example 2: Removing `config.classNames.block`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: ''\n         *     }\n         * });\n         *\n         * // Active control output: \"control-active\"\n         *\n         * @name        block\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'mixitup'\n         */\n\n        this.block = 'mixitup';\n\n        /**\n         * The \"element\" portion of the class name added to container.\n         *\n         * @name        elementContainer\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'container'\n         */\n\n        this.elementContainer = 'container';\n\n        /**\n         * The \"element\" portion of the class name added to filter controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementFilter` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementFilter: 'filter'\n         *     }\n         * });\n         *\n         * // Active filter output: \"mixitup-filter-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementFilter` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementFilter: 'filter'\n         *     }\n         * });\n         *\n         * // Active filter output: \"portfolio-filter-active\"\n         *\n         * @name        elementFilter\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementFilter = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to sort controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementSort` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementSort: 'sort'\n         *     }\n         * });\n         *\n         * // Active sort output: \"mixitup-sort-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementSort` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementSort: 'sort'\n         *     }\n         * });\n         *\n         * // Active sort output: \"portfolio-sort-active\"\n         *\n         * @name        elementSort\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementSort = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to multimix controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementMultimix` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementMultimix: 'multimix'\n         *     }\n         * });\n         *\n         * // Active multimix output: \"mixitup-multimix-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementMultimix` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementSort: 'multimix'\n         *     }\n         * });\n         *\n         * // Active multimix output: \"portfolio-multimix-active\"\n         *\n         * @name        elementMultimix\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementMultimix = 'control';\n\n        /**\n         * The \"element\" portion of the class name added to toggle controls.\n         *\n         * By default, all filter, sort, multimix and toggle controls take the same element value of `'control'`, but\n         * each type's element value can be individually overwritten to match the unique classNames of your controls as needed.\n         *\n         * @example <caption>Example 1: changing the `config.classNames.elementToggle` value</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         elementToggle: 'toggle'\n         *     }\n         * });\n         *\n         * // Active toggle output: \"mixitup-toggle-active\"\n         *\n         * @example <caption>Example 2: changing the `config.classNames.block` and `config.classNames.elementToggle` values</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         block: 'portfolio',\n         *         elementToggle: 'toggle'\n         *     }\n         * });\n         *\n         * // Active toggle output: \"portfolio-toggle-active\"\n         *\n         * @name        elementToggle\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'control'\n         */\n\n        this.elementToggle = 'control';\n\n        /**\n         * The \"modifier\" portion of the class name added to active controls.\n         * @name        modifierActive\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'active'\n         */\n\n        this.modifierActive = 'active';\n\n        /**\n         * The \"modifier\" portion of the class name added to disabled controls.\n         *\n         * @name        modifierDisabled\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'disabled'\n         */\n\n        this.modifierDisabled = 'disabled';\n\n        /**\n         * The \"modifier\" portion of the class name added to the container when in a \"failed\" state.\n         *\n         * @name        modifierFailed\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     'failed'\n         */\n\n        this.modifierFailed = 'failed';\n\n        /**\n         * The delineator used between the \"block\" and \"element\" portions of any class name added by MixItUp.\n         *\n         * If the block portion is ommited by setting it to an empty string, no delineator will be added.\n         *\n         * @example <caption>Example: changing the delineator to match BEM convention</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         delineatorElement: '__'\n         *     }\n         * });\n         *\n         * // example active control output: \"mixitup__control-active\"\n         *\n         * @name        delineatorElement\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     '-'\n         */\n\n        this.delineatorElement = '-';\n\n        /**\n         * The delineator used between the \"element\" and \"modifier\" portions of any class name added by MixItUp.\n         *\n         * If the element portion is ommited by setting it to an empty string, no delineator will be added.\n         *\n         * @example <caption>Example: changing both delineators to match BEM convention</caption>\n         * var mixer = mixitup(containerEl, {\n         *     classNames: {\n         *         delineatorElement: '__'\n         *         delineatorModifier: '--'\n         *     }\n         * });\n         *\n         * // Active control output: \"mixitup__control--active\"\n         *\n         * @name        delineatorModifier\n         * @memberof    mixitup.Config.classNames\n         * @instance\n         * @type        {string}\n         * @default     '-'\n         */\n\n        this.delineatorModifier = '-';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigClassNames);\n\n    mixitup.ConfigClassNames.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigClassNames.prototype.constructor = mixitup.ConfigClassNames;\n\n    /**\n     * A group of properties relating to MixItUp's dataset API.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        data\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A string specifying the name of the key containing your data model's unique\n         * identifier (UID). To use the dataset API, a UID key must be specified and\n         * be present and unique on all objects in the dataset you provide to MixItUp.\n         *\n         * For example, if your dataset is made up of MongoDB documents, the UID\n         * key would be `'id'` or `'_id'`.\n         *\n         * @example <caption>Example: Setting the UID to `'id'`</caption>\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id'\n         *     }\n         * });\n         *\n         * @name        uidKey\n         * @memberof    mixitup.Config.data\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.uidKey = '';\n\n        /**\n         * A boolean dictating whether or not MixItUp should \"dirty check\" each object in\n         * your dataset for changes whenever `.dataset()` is called, and re-render any targets\n         * for which a change is found.\n         *\n         * Depending on the complexity of your data model, dirty checking can be expensive\n         * and is therefore disabled by default.\n         *\n         * NB: For changes to be detected, a new immutable instance of the edited model must be\n         * provided to mixitup, rather than manipulating properties on the existing instance.\n         * If your changes are a result of a DB write and read, you will most likely be calling\n         * `.dataset()` with a clean set of objects each time, so this will not be an issue.\n         *\n         * @example <caption>Example: Enabling dirty checking</caption>\n         *\n         * var myDataset = [\n         *     {\n         *         id: 0,\n         *         title: \"Blog Post Title 0\"\n         *         ...\n         *     },\n         *     {\n         *         id: 1,\n         *         title: \"Blog Post Title 1\"\n         *         ...\n         *     }\n         * ];\n         *\n         * // Instantiate a mixer with a pre-loaded dataset, and a target renderer\n         * // function defined\n         *\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id',\n         *         dirtyCheck: true\n         *     },\n         *     load: {\n         *         dataset: myDataset\n         *     },\n         *     render: {\n         *         target: function() { ... }\n         *     }\n         * });\n         *\n         * // For illustration, we will clone and edit the second object in the dataset.\n         * // NB: this would typically be done server-side in response to a DB update,\n         * and then re-queried via an API.\n         *\n         * myDataset[1] = Object.assign({}, myDataset[1]);\n         *\n         * myDataset[1].title = 'Blog Post Title 11';\n         *\n         * mixer.dataset(myDataset)\n         *    .then(function() {\n         *        // the target with ID \"1\", will be re-rendered reflecting its new title\n         *    });\n         *\n         * @name        dirtyCheck\n         * @memberof    mixitup.Config.data\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.dirtyCheck = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigData);\n\n    mixitup.ConfigData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigData.prototype.constructor = mixitup.ConfigData;\n\n    /**\n     * A group of properties allowing the toggling of various debug features.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        debug\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigDebug = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not the mixer instance returned by the\n         * `mixitup()` factory function should expose private properties and methods.\n         *\n         * By default, mixer instances only expose their public API, but enabling\n         * debug mode will give you access to various mixer internals which may aid\n         * in debugging, or the authoring of extensions.\n         *\n         * @example <caption>Example: Enabling debug mode</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         enable: true\n         *     }\n         * });\n         *\n         * // Private properties and methods will now be visible on the mixer instance:\n         *\n         * console.log(mixer);\n         *\n         * @name        enable\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.enable = false;\n\n        /**\n         * A boolean dictating whether or not warnings should be shown when various\n         * common gotchas occur.\n         *\n         * Warnings are intended to provide insights during development when something\n         * occurs that is not a fatal, but may indicate an issue with your integration,\n         * and are therefore turned on by default. However, you may wish to disable\n         * them in production.\n         *\n         * @example <caption>Example 1: Disabling warnings</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         showWarnings: false\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Disabling warnings based on environment</caption>\n         *\n         * var showWarnings = myAppConfig.environment === 'development' ? true : false;\n         *\n         * var mixer = mixitup(containerEl, {\n         *     debug: {\n         *         showWarnings: showWarnings\n         *     }\n         * });\n         *\n         * @name        showWarnings\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.showWarnings = true;\n\n        /**\n         * Used for server-side testing only.\n         *\n         * @private\n         * @name        fauxAsync\n         * @memberof    mixitup.Config.debug\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.fauxAsync = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigDebug);\n\n    mixitup.ConfigDebug.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigDebug.prototype.constructor = mixitup.ConfigDebug;\n\n    /**\n     * A group of properties relating to the layout of the container.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        layout\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigLayout = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A boolean dictating whether or not mixitup should query all descendants\n         * of the container for targets, or only immediate children.\n         *\n         * By default, mixitup will query all descendants matching the\n         * `selectors.target` selector when indexing targets upon instantiation.\n         * This allows for targets to be nested inside a sub-container which is\n         * useful when ring-fencing targets from locally scoped controls in your\n         * markup (see `controls.scope`).\n         *\n         * However, if you are building a more complex UI requiring the nesting\n         * of mixers within mixers, you will most likely want to limit targets to\n         * immediate children of the container by setting this property to `false`.\n         *\n         * @example <caption>Example: Restricting targets to immediate children</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         allowNestedTargets: false\n         *     }\n         * });\n         *\n         * @name        allowNestedTargets\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {boolean}\n         * @default     true\n         */\n\n        this.allowNestedTargets = true;\n\n        /**\n         * A string specifying an optional class name to apply to the container when in\n         * its default state.\n         *\n         * By changing this class name or adding a class name to the container via the\n         * `.changeLayout()` API method, the CSS layout of the container can be changed,\n         * and MixItUp will attemp to gracefully animate the container and its targets\n         * between states.\n         *\n         * @example <caption>Example 1: Specifying a container class name</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         containerClassName: 'grid'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Changing the default class name with `.changeLayout()`</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         containerClassName: 'grid'\n         *     }\n         * });\n         *\n         * mixer.changeLayout('list')\n         *     .then(function(state) {\n         *          console.log(state.activeContainerClass); // \"list\"\n         *     });\n         *\n         * @name        containerClassName\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.containerClassName = '';\n\n        /**\n         * A reference to a non-target sibling element after which to insert targets\n         * when there are no targets in the container.\n         *\n         * @example <caption>Example: Setting a `siblingBefore` reference element</caption>\n         *\n         * var addButton = containerEl.querySelector('button');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         siblingBefore: addButton\n         *     }\n         * });\n         *\n         * @name        siblingBefore\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {HTMLElement}\n         * @default     null\n         */\n\n        this.siblingBefore = null;\n\n        /**\n         * A reference to a non-target sibling element before which to insert targets\n         * when there are no targets in the container.\n         *\n         * @example <caption>Example: Setting an `siblingAfter` reference element</caption>\n         *\n         * var gap = containerEl.querySelector('.gap');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     layout: {\n         *         siblingAfter: gap\n         *     }\n         * });\n         *\n         * @name        siblingAfter\n         * @memberof    mixitup.Config.layout\n         * @instance\n         * @type        {HTMLElement}\n         * @default     null\n         */\n\n        this.siblingAfter = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigLayout);\n\n    mixitup.ConfigLayout.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigLayout.prototype.constructor = mixitup.ConfigLayout;\n\n    /**\n     * A group of properties defining the initial state of the mixer on load (instantiation).\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        load\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.ConfigLoad = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A string defining any filtering to be statically applied to the mixer on load.\n         * As per the `.filter()` API, this can be any valid selector string, or the\n         * values `'all'` or `'none'`.\n         *\n         * @example <caption>Example 1: Defining an initial filter selector to be applied on load</caption>\n         *\n         * // The mixer will show only those targets matching '.category-a' on load.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         filter: '.category-a'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Hiding all targets on load</caption>\n         *\n         * // The mixer will show hide all targets on load.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         filter: 'none'\n         *     }\n         * });\n         *\n         * @name        filter\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {string}\n         * @default     'all'\n         */\n\n        this.filter = 'all';\n\n        /**\n         * A string defining any sorting to be statically applied to the mixer on load.\n         * As per the `.sort()` API, this should be a valid \"sort string\" made up of\n         * an attribute to sort by (or `'default'`) followed by an optional sorting\n         * order, or the value `'random'`;\n         *\n         * @example <caption>Example: Defining sorting to be applied on load</caption>\n         *\n         * // The mixer will sort the container by the value of the `data-published-date`\n         * // attribute, in descending order.\n         *\n         * var mixer = mixitup(containerEl, {\n         *     load: {\n         *         sort: 'published-date:desc'\n         *     }\n         * });\n         *\n         * @name        sort\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {string}\n         * @default     'default:asc'\n         */\n\n        this.sort = 'default:asc';\n\n        /**\n         * An array of objects representing the underlying data of any pre-rendered targets,\n         * when using the `.dataset()` API.\n         *\n         * NB: If targets are pre-rendered when the mixer is instantiated, this must be set.\n         *\n         * @example <caption>Example: Defining the initial underyling dataset</caption>\n         *\n         * var myDataset = [\n         *     {\n         *         id: 0,\n         *         title: \"Blog Post Title 0\",\n         *         ...\n         *     },\n         *     {\n         *         id: 1,\n         *         title: \"Blog Post Title 1\",\n         *         ...\n         *     }\n         * ];\n         *\n         * var mixer = mixitup(containerEl, {\n         *     data: {\n         *         uidKey: 'id'\n         *     },\n         *     load: {\n         *         dataset: myDataset\n         *     }\n         * });\n         *\n         * @name        dataset\n         * @memberof    mixitup.Config.load\n         * @instance\n         * @type        {Array.<object>}\n         * @default     null\n         */\n\n        this.dataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigLoad);\n\n    mixitup.ConfigLoad.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigLoad.prototype.constructor = mixitup.ConfigLoad;\n\n    /**\n     * A group of properties defining the selectors used to query elements within a mixitup container.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        selectors\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigSelectors = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A selector string used to query and index target elements within the container.\n         *\n         * By default, the class selector `'.mix'` is used, but this can be changed to an\n         * attribute or element selector to match the style of your project.\n         *\n         * @example <caption>Example 1: Changing the target selector</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         target: '.portfolio-item'\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an attribute selector as a target selector</caption>\n         *\n         * // The mixer will search for any children with the attribute `data-ref=\"mix\"`\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         target: '[data-ref=\"mix\"]'\n         *     }\n         * });\n         *\n         * @name        target\n         * @memberof    mixitup.Config.selectors\n         * @instance\n         * @type        {string}\n         * @default     '.mix'\n         */\n\n        this.target = '.mix';\n\n        /**\n         * A optional selector string used to add further specificity to the querying of control elements,\n         * in addition to their mandatory data attribute (e.g. `data-filter`, `data-toggle`, `data-sort`).\n         *\n         * This can be used if other elements in your document must contain the above attributes\n         * (e.g. for use in third-party scripts), and would otherwise interfere with MixItUp. Adding\n         * an additional `control` selector of your choice allows MixItUp to restrict event handling\n         * to only those elements matching the defined selector.\n         *\n         * @name        control\n         * @memberof    mixitup.Config.selectors\n         * @instance\n         * @type        {string}\n         * @default     ''\n         *\n         * @example <caption>Example 1: Adding a `selectors.control` selector</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     selectors: {\n         *         control: '.mixitup-control'\n         *     }\n         * });\n         *\n         * // Will not be handled:\n         * // <button data-filter=\".category-a\"></button>\n         *\n         * // Will be handled:\n         * // <button class=\"mixitup-control\" data-filter=\".category-a\"></button>\n         */\n\n        this.control = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigSelectors);\n\n    mixitup.ConfigSelectors.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigSelectors.prototype.constructor = mixitup.ConfigSelectors;\n\n    /**\n     * A group of optional render functions for creating and updating elements.\n     *\n     * All render functions receive a data object, and should return a valid HTML string.\n     *\n     * @constructor\n     * @memberof    mixitup.Config\n     * @name        render\n     * @namespace\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigRender = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A function returning an HTML string representing a target element, or a reference to a\n         * single DOM element.\n         *\n         * The function is invoked as part of the `.dataset()` API, whenever a new item is added\n         * to the dataset, or an item in the dataset changes (if `dataset.dirtyCheck` is enabled).\n         *\n         * The function receives the relevant dataset item as its first parameter.\n         *\n         * @example <caption>Example 1: Using string concatenation</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *             return (\n         *                 '&lt;div class=\"mix\"&gt;' +\n         *                     '&lt;h2&gt;' + item.title + '&lt;/h2&gt;' +\n         *                 '&lt;/div&gt;'\n         *             );\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Using an ES2015 template literal</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *             return (\n         *                 `&lt;div class=\"mix\"&gt;\n         *                     &lt;h2&gt;${item.title}&lt;/h2&gt;\n         *                  &lt;/div&gt;`\n         *             );\n         *         }\n         *     }\n         * });\n         *\n         * @example <caption>Example 3: Using a Handlebars template</caption>\n         *\n         * var targetTemplate = Handlebars.compile('&lt;div class=\"mix\"&gt;&lt;h2&gt;{{title}}&lt;/h2&gt;&lt;/div&gt;');\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: targetTemplate\n         *     }\n         * });\n         *\n         * @example <caption>Example 4: Returning a DOM element</caption>\n         *\n         * var mixer = mixitup(containerEl, {\n         *     render: {\n         *         target: function(item) {\n         *              // Create a single element using your framework's built-in renderer\n         *\n         *              var el = ...\n         *\n         *              return el;\n         *         }\n         *     }\n         * });\n         *\n         * @name        target\n         * @memberof    mixitup.Config.render\n         * @instance\n         * @type        {function}\n         * @default     'null'\n         */\n\n        this.target = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigRender);\n\n    mixitup.ConfigRender.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigRender.prototype.constructor = mixitup.ConfigRender;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.ConfigTemplates = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ConfigTemplates);\n\n    mixitup.ConfigTemplates.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ConfigTemplates.prototype.constructor = mixitup.ConfigTemplates;\n\n    /**\n     * `mixitup.Config` is an interface used for customising the functionality of a\n     * mixer instance. It is organised into several semantically distinct sub-objects,\n     * each one pertaining to a particular aspect of MixItUp functionality.\n     *\n     * An object literal containing any or all of the available properies,\n     * known as the \"configuration object\", can be passed as the second parameter to\n     * the `mixitup` factory function when creating a mixer instance to customise its\n     * functionality as needed.\n     *\n     * If no configuration object is passed, the mixer instance will take on the default\n     * configuration values detailed below.\n     *\n     * @example <caption>Example 1: Creating and passing the configuration object</caption>\n     * // Create a configuration object with desired values\n     *\n     * var config = {\n     *     animation: {\n     *         enable: false\n     *     },\n     *     selectors: {\n     *         target: '.item'\n     *     }\n     * };\n     *\n     * // Pass the configuration object to the mixitup factory function\n     *\n     * var mixer = mixitup(containerEl, config);\n     *\n     * @example <caption>Example 2: Passing the configuration object inline</caption>\n     * // Typically, the configuration object is passed inline for brevity.\n     *\n     * var mixer = mixitup(containerEl, {\n     *     controls: {\n     *         live: true,\n     *         toggleLogic: 'and'\n     *     }\n     * });\n     *\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @namespace\n     * @public\n     * @since       2.0.0\n     */\n\n    mixitup.Config = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.animation          = new mixitup.ConfigAnimation();\n        this.behavior           = new mixitup.ConfigBehavior();\n        this.callbacks          = new mixitup.ConfigCallbacks();\n        this.controls           = new mixitup.ConfigControls();\n        this.classNames         = new mixitup.ConfigClassNames();\n        this.data               = new mixitup.ConfigData();\n        this.debug              = new mixitup.ConfigDebug();\n        this.layout             = new mixitup.ConfigLayout();\n        this.load               = new mixitup.ConfigLoad();\n        this.selectors          = new mixitup.ConfigSelectors();\n        this.render             = new mixitup.ConfigRender();\n        this.templates          = new mixitup.ConfigTemplates();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Config);\n\n    mixitup.Config.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Config.prototype.constructor = mixitup.Config;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.MixerDom = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.document               = null;\n        this.body                   = null;\n        this.container              = null;\n        this.parent                 = null;\n        this.targets                = [];\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.MixerDom);\n\n    mixitup.MixerDom.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.MixerDom.prototype.constructor = mixitup.MixerDom;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.UiClassNames = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.base       = '';\n        this.active     = '';\n        this.disabled   = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.UiClassNames);\n\n    mixitup.UiClassNames.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.UiClassNames.prototype.constructor = mixitup.UiClassNames;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.dataset()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandDataset = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.dataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandDataset);\n\n    mixitup.CommandDataset.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandDataset.prototype.constructor = mixitup.CommandDataset;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.multimix()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandMultimix = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.filter       = null;\n        this.sort         = null;\n        this.insert       = null;\n        this.remove       = null;\n        this.changeLayout = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandMultimix);\n\n    mixitup.CommandMultimix.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandMultimix.prototype.constructor = mixitup.CommandMultimix;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.filter()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandFilter = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.selector   = '';\n        this.collection = null;\n        this.action     = 'show'; // enum: ['show', 'hide']\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandFilter);\n\n    mixitup.CommandFilter.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandFilter.prototype.constructor = mixitup.CommandFilter;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.sort()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandSort = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.sortString = '';\n        this.attribute  = '';\n        this.order      = 'asc';\n        this.collection = null;\n        this.next       = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandSort);\n\n    mixitup.CommandSort.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandSort.prototype.constructor = mixitup.CommandSort;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.insert()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandInsert = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.index      = 0;\n        this.collection = [];\n        this.position   = 'before'; // enum: ['before', 'after']\n        this.sibling    = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandInsert);\n\n    mixitup.CommandInsert.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandInsert.prototype.constructor = mixitup.CommandInsert;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.remove()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandRemove = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.targets    = [];\n        this.collection = [];\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandRemove);\n\n    mixitup.CommandRemove.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandRemove.prototype.constructor = mixitup.CommandRemove;\n\n    /**\n     * An object into which all arbitrary arguments sent to '.changeLayout()' are mapped.\n     *\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.CommandChangeLayout = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.containerClassName = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.CommandChangeLayout);\n\n    mixitup.CommandChangeLayout.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.CommandChangeLayout.prototype.constructor = mixitup.CommandChangeLayout;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {string}        type\n     * @param       {string}        selector\n     * @param       {boolean}       [live]\n     * @param       {string}        [parent]\n     *     An optional string representing the name of the mixer.dom property containing a reference to a parent element.\n     */\n\n    mixitup.ControlDefinition = function(type, selector, live, parent) {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.type    = type;\n        this.selector  = selector;\n        this.live      = live || false;\n        this.parent    = parent || '';\n\n        this.callActions('afterConstruct');\n\n        h.freeze(this);\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.ControlDefinition);\n\n    mixitup.ControlDefinition.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.ControlDefinition.prototype.constructor = mixitup.ControlDefinition;\n\n    mixitup.controlDefinitions = [];\n\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('multimix', '[data-filter][data-sort]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('filter', '[data-filter]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('sort', '[data-sort]'));\n    mixitup.controlDefinitions.push(new mixitup.ControlDefinition('toggle', '[data-toggle]'));\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Control = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.el         = null;\n        this.selector   = '';\n        this.bound      = [];\n        this.pending    = -1;\n        this.type       = '';\n        this.status     = 'inactive'; // enum: ['inactive', 'active', 'disabled', 'live']\n        this.filter     = '';\n        this.sort       = '';\n        this.canDisable = false;\n        this.handler    = null;\n        this.classNames = new mixitup.UiClassNames();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Control);\n\n    mixitup.Control.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Control.prototype,\n    /** @lends mixitup.Control */\n    {\n        constructor: mixitup.Control,\n\n        /**\n         * @private\n         * @param {HTMLElement} el\n         * @param {string}      type\n         * @param {string}      selector\n         */\n\n        init: function(el, type, selector) {\n            var self = this;\n\n            this.callActions('beforeInit', arguments);\n\n            self.el         = el;\n            self.type       = type;\n            self.selector   = selector;\n\n            if (self.selector) {\n                self.status = 'live';\n            } else {\n                self.canDisable = typeof self.el.disable === 'boolean';\n\n                switch (self.type) {\n                    case 'filter':\n                        self.filter = self.el.getAttribute('data-filter');\n\n                        break;\n                    case 'toggle':\n                        self.filter = self.el.getAttribute('data-toggle');\n\n                        break;\n                    case 'sort':\n                        self.sort   = self.el.getAttribute('data-sort');\n\n                        break;\n                    case 'multimix':\n                        self.filter = self.el.getAttribute('data-filter');\n                        self.sort   = self.el.getAttribute('data-sort');\n\n                        break;\n                }\n            }\n\n            self.bindClick();\n\n            mixitup.controls.push(self);\n\n            this.callActions('afterInit', arguments);\n        },\n\n        /**\n         * @private\n         * @param  {mixitup.Mixer} mixer\n         * @return {boolean}\n         */\n\n        isBound: function(mixer) {\n            var self    = this,\n                isBound = false;\n\n            this.callActions('beforeIsBound', arguments);\n\n            isBound = self.bound.indexOf(mixer) > -1;\n\n            return self.callFilters('afterIsBound', isBound, arguments);\n        },\n\n        /**\n         * @private\n         * @param  {mixitup.Mixer} mixer\n         * @return {void}\n         */\n\n        addBinding: function(mixer) {\n            var self = this;\n\n            this.callActions('beforeAddBinding', arguments);\n\n            if (!self.isBound()) {\n                self.bound.push(mixer);\n            }\n\n            this.callActions('afterAddBinding', arguments);\n        },\n\n        /**\n         * @private\n         * @param  {mixitup.Mixer} mixer\n         * @return {void}\n         */\n\n        removeBinding: function(mixer) {\n            var self        = this,\n                removeIndex = -1;\n\n            this.callActions('beforeRemoveBinding', arguments);\n\n            if ((removeIndex = self.bound.indexOf(mixer)) > -1) {\n                self.bound.splice(removeIndex, 1);\n            }\n\n            if (self.bound.length < 1) {\n                // No bindings exist, unbind event click handlers\n\n                self.unbindClick();\n\n                // Remove from `mixitup.controls` list\n\n                removeIndex = mixitup.controls.indexOf(self);\n\n                mixitup.controls.splice(removeIndex, 1);\n\n                if (self.status === 'active') {\n                    self.renderStatus(self.el, 'inactive');\n                }\n            }\n\n            this.callActions('afterRemoveBinding', arguments);\n        },\n\n        /**\n         * @private\n         * @return {void}\n         */\n\n        bindClick: function() {\n            var self = this;\n\n            this.callActions('beforeBindClick', arguments);\n\n            self.handler = function(e) {\n                self.handleClick(e);\n            };\n\n            h.on(self.el, 'click', self.handler);\n\n            this.callActions('afterBindClick', arguments);\n        },\n\n        /**\n         * @private\n         * @return {void}\n         */\n\n        unbindClick: function() {\n            var self = this;\n\n            this.callActions('beforeUnbindClick', arguments);\n\n            h.off(self.el, 'click', self.handler);\n\n            self.handler = null;\n\n            this.callActions('afterUnbindClick', arguments);\n        },\n\n        /**\n         * @private\n         * @param   {MouseEvent} e\n         * @return  {void}\n         */\n\n        handleClick: function(e) {\n            var self        = this,\n                button      = null,\n                mixer       = null,\n                isActive    = false,\n                returnValue = void(0),\n                command     = {},\n                clone       = null,\n                commands    = [],\n                i           = -1;\n\n            this.callActions('beforeHandleClick', arguments);\n\n            this.pending = 0;\n\n            mixer = self.bound[0];\n\n            if (!self.selector) {\n                button = self.el;\n            } else {\n                button = h.closestParent(e.target, mixer.config.selectors.control + self.selector, true, mixer.dom.document);\n            }\n\n            if (!button) {\n                self.callActions('afterHandleClick', arguments);\n\n                return;\n            }\n\n            switch (self.type) {\n                case 'filter':\n                    command.filter = self.filter || button.getAttribute('data-filter');\n\n                    break;\n                case 'sort':\n                    command.sort = self.sort || button.getAttribute('data-sort');\n\n                    break;\n                case 'multimix':\n                    command.filter  = self.filter || button.getAttribute('data-filter');\n                    command.sort    = self.sort || button.getAttribute('data-sort');\n\n                    break;\n                case 'toggle':\n                    command.filter  = self.filter || button.getAttribute('data-toggle');\n\n                    if (self.status === 'live') {\n                        isActive = h.hasClass(button, self.classNames.active);\n                    } else {\n                        isActive = self.status === 'active';\n                    }\n\n                    break;\n            }\n\n            for (i = 0; i < self.bound.length; i++) {\n                // Create a clone of the command for each bound mixer instance\n\n                clone = new mixitup.CommandMultimix();\n\n                h.extend(clone, command);\n\n                commands.push(clone);\n            }\n\n            commands = self.callFilters('commandsHandleClick', commands, arguments);\n\n            self.pending = self.bound.length;\n\n            for (i = 0; mixer = self.bound[i]; i++) {\n                command = commands[i];\n\n                if (!command) {\n                    // An extension may set a command null to indicate that the click should not be handled\n\n                    continue;\n                }\n\n                if (!mixer.lastClicked) {\n                    mixer.lastClicked = button;\n                }\n\n                mixitup.events.fire('mixClick', mixer.dom.container, {\n                    state: mixer.state,\n                    instance: mixer,\n                    originalEvent: e,\n                    control: mixer.lastClicked\n                }, mixer.dom.document);\n\n                if (typeof mixer.config.callbacks.onMixClick === 'function') {\n                    returnValue = mixer.config.callbacks.onMixClick.call(mixer.lastClicked, mixer.state, e, mixer);\n\n                    if (returnValue === false) {\n                        // User has returned `false` from the callback, so do not handle click\n\n                        continue;\n                    }\n                }\n\n                if (self.type === 'toggle') {\n                    isActive ? mixer.toggleOff(command.filter) : mixer.toggleOn(command.filter);\n                } else {\n                    mixer.multimix(command);\n                }\n            }\n\n            this.callActions('afterHandleClick', arguments);\n        },\n\n        /**\n         * @param   {object}          command\n         * @param   {Array<string>}   toggleArray\n         * @return  {void}\n         */\n\n        update: function(command, toggleArray) {\n            var self    = this,\n                actions = new mixitup.CommandMultimix();\n\n            self.callActions('beforeUpdate', arguments);\n\n            self.pending--;\n\n            self.pending = Math.max(0, self.pending);\n\n            if (self.pending > 0) return;\n\n            if (self.status === 'live') {\n                // Live control (status unknown)\n\n                self.updateLive(command, toggleArray);\n            } else {\n                // Static control\n\n                actions.sort    = self.sort;\n                actions.filter  = self.filter;\n\n                self.callFilters('actionsUpdate', actions, arguments);\n\n                self.parseStatusChange(self.el, command, actions, toggleArray);\n            }\n\n            self.callActions('afterUpdate', arguments);\n        },\n\n        /**\n         * @param   {mixitup.CommandMultimix} command\n         * @param   {Array<string>}           toggleArray\n         * @return  {void}\n         */\n\n        updateLive: function(command, toggleArray) {\n            var self            = this,\n                controlButtons  = null,\n                actions         = null,\n                button          = null,\n                i               = -1;\n\n            self.callActions('beforeUpdateLive', arguments);\n\n            if (!self.el) return;\n\n            controlButtons = self.el.querySelectorAll(self.selector);\n\n            for (i = 0; button = controlButtons[i]; i++) {\n                actions = new mixitup.CommandMultimix();\n\n                switch (self.type) {\n                    case 'filter':\n                        actions.filter = button.getAttribute('data-filter');\n\n                        break;\n                    case 'sort':\n                        actions.sort = button.getAttribute('data-sort');\n\n                        break;\n                    case 'multimix':\n                        actions.filter  = button.getAttribute('data-filter');\n                        actions.sort    = button.getAttribute('data-sort');\n\n                        break;\n                    case 'toggle':\n                        actions.filter  = button.getAttribute('data-toggle');\n\n                        break;\n                }\n\n                actions = self.callFilters('actionsUpdateLive', actions, arguments);\n\n                self.parseStatusChange(button, command, actions, toggleArray);\n            }\n\n            self.callActions('afterUpdateLive', arguments);\n        },\n\n        /**\n         * @param   {HTMLElement}             button\n         * @param   {mixitup.CommandMultimix} command\n         * @param   {mixitup.CommandMultimix} actions\n         * @param   {Array<string>}           toggleArray\n         * @return  {void}\n         */\n\n        parseStatusChange: function(button, command, actions, toggleArray) {\n            var self    = this,\n                alias   = '',\n                toggle  = '',\n                i       = -1;\n\n            self.callActions('beforeParseStatusChange', arguments);\n\n            switch (self.type) {\n                case 'filter':\n                    if (command.filter === actions.filter) {\n                        self.renderStatus(button, 'active');\n                    } else {\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n                case 'multimix':\n                    if (command.sort === actions.sort && command.filter === actions.filter) {\n                        self.renderStatus(button, 'active');\n                    } else {\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n                case 'sort':\n                    if (command.sort.match(/:asc/g)) {\n                        alias = command.sort.replace(/:asc/g, '');\n                    }\n\n                    if (command.sort === actions.sort || alias === actions.sort) {\n                        self.renderStatus(button, 'active');\n                    } else {\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n                case 'toggle':\n                    if (toggleArray.length < 1) self.renderStatus(button, 'inactive');\n\n                    if (command.filter === actions.filter) {\n                        self.renderStatus(button, 'active');\n                    }\n\n                    for (i = 0; i < toggleArray.length; i++) {\n                        toggle = toggleArray[i];\n\n                        if (toggle === actions.filter) {\n                            // Button matches one active toggle\n\n                            self.renderStatus(button, 'active');\n\n                            break;\n                        }\n\n                        self.renderStatus(button, 'inactive');\n                    }\n\n                    break;\n            }\n\n            self.callActions('afterParseStatusChange', arguments);\n        },\n\n        /**\n         * @param   {HTMLElement}   button\n         * @param   {string}        status\n         * @return  {void}\n         */\n\n        renderStatus: function(button, status) {\n            var self = this;\n\n            self.callActions('beforeRenderStatus', arguments);\n\n            switch (status) {\n                case 'active':\n                    h.addClass(button, self.classNames.active);\n                    h.removeClass(button, self.classNames.disabled);\n\n                    if (self.canDisable) self.el.disabled = false;\n\n                    break;\n                case 'inactive':\n                    h.removeClass(button, self.classNames.active);\n                    h.removeClass(button, self.classNames.disabled);\n\n                    if (self.canDisable) self.el.disabled = false;\n\n                    break;\n                case 'disabled':\n                    if (self.canDisable) self.el.disabled = true;\n\n                    h.addClass(button, self.classNames.disabled);\n                    h.removeClass(button, self.classNames.active);\n\n                    break;\n            }\n\n            if (self.status !== 'live') {\n                // Update the control's status propery if not live\n\n                self.status = status;\n            }\n\n            self.callActions('afterRenderStatus', arguments);\n        }\n    });\n\n    mixitup.controls = [];\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.StyleData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.x              = 0;\n        this.y              = 0;\n        this.top            = 0;\n        this.right          = 0;\n        this.bottom         = 0;\n        this.left           = 0;\n        this.width          = 0;\n        this.height         = 0;\n        this.marginRight    = 0;\n        this.marginBottom   = 0;\n        this.opacity        = 0;\n        this.scale          = new mixitup.TransformData();\n        this.translateX     = new mixitup.TransformData();\n        this.translateY     = new mixitup.TransformData();\n        this.translateZ     = new mixitup.TransformData();\n        this.rotateX        = new mixitup.TransformData();\n        this.rotateY        = new mixitup.TransformData();\n        this.rotateZ        = new mixitup.TransformData();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.StyleData);\n\n    mixitup.StyleData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.StyleData.prototype.constructor = mixitup.StyleData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TransformData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.value  = 0;\n        this.unit   = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TransformData);\n\n    mixitup.TransformData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.TransformData.prototype.constructor = mixitup.TransformData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TransformDefaults = function() {\n        mixitup.StyleData.apply(this);\n\n        this.callActions('beforeConstruct');\n\n        this.scale.value        = 0.01;\n        this.scale.unit         = '';\n\n        this.translateX.value   = 20;\n        this.translateX.unit    = 'px';\n\n        this.translateY.value   = 20;\n        this.translateY.unit    = 'px';\n\n        this.translateZ.value   = 20;\n        this.translateZ.unit    = 'px';\n\n        this.rotateX.value      = 90;\n        this.rotateX.unit       = 'deg';\n\n        this.rotateY.value      = 90;\n        this.rotateY.unit       = 'deg';\n\n        this.rotateX.value      = 90;\n        this.rotateX.unit       = 'deg';\n\n        this.rotateZ.value      = 180;\n        this.rotateZ.unit       = 'deg';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TransformDefaults);\n\n    mixitup.TransformDefaults.prototype = Object.create(mixitup.StyleData.prototype);\n\n    mixitup.TransformDefaults.prototype.constructor = mixitup.TransformDefaults;\n\n    /**\n     * @private\n     * @static\n     * @since   3.0.0\n     * @type    {mixitup.TransformDefaults}\n     */\n\n    mixitup.transformDefaults = new mixitup.TransformDefaults();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.EventDetail = function() {\n        this.state          = null;\n        this.futureState    = null;\n        this.instance       = null;\n        this.originalEvent  = null;\n    };\n\n    /**\n     * The `mixitup.Events` class contains all custom events dispatched by MixItUp at various\n     * points within the lifecycle of a mixer operation.\n     *\n     * Each event is analogous to the callback function of the same name defined in\n     * the `callbacks` configuration object, and is triggered immediately before it.\n     *\n     * Events are always triggered from the container element on which MixItUp is instantiated\n     * upon.\n     *\n     * As with any event, registered event handlers receive the event object as a parameter\n     * which includes a `detail` property containting references to the current `state`,\n     * the `mixer` instance, and other event-specific properties described below.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.Events = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * A custom event triggered immediately after any MixItUp operation is requested\n         * and before animations have begun.\n         *\n         * The `mixStart` event also exposes a `futureState` property via the\n         * `event.detail` object, which represents the final state of the mixer once\n         * the requested operation has completed.\n         *\n         * @name        mixStart\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixStart = null;\n\n        /**\n         * A custom event triggered when a MixItUp operation is requested while another\n         * operation is in progress, and the animation queue is full, or queueing\n         * is disabled.\n         *\n         * @name        mixBusy\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixBusy = null;\n\n        /**\n         * A custom event triggered after any MixItUp operation has completed, and the\n         * state has been updated.\n         *\n         * @name        mixEnd\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixEnd = null;\n\n        /**\n         * A custom event triggered whenever a filter operation \"fails\", i.e. no targets\n         * could be found matching the requested filter.\n         *\n         * @name        mixFail\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixFail = null;\n\n        /**\n         * A custom event triggered whenever a MixItUp control is clicked, and before its\n         * respective operation is requested.\n         *\n         * This event also exposes an `originalEvent` property via the `event.detail`\n         * object, which holds a reference to the original click event.\n         *\n         * @name        mixClick\n         * @memberof    mixitup.Events\n         * @static\n         * @type        {CustomEvent}\n         */\n\n        this.mixClick = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Events);\n\n    mixitup.Events.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Events.prototype.constructor = mixitup.Events;\n\n    /**\n     * @private\n     * @param   {string}      eventType\n     * @param   {Element}     el\n     * @param   {object}      detail\n     * @param   {Document}    [doc]\n     */\n\n    mixitup.Events.prototype.fire = function(eventType, el, detail, doc) {\n        var self        = this,\n            event       = null,\n            eventDetail = new mixitup.EventDetail();\n\n        self.callActions('beforeFire', arguments);\n\n        if (typeof self[eventType] === 'undefined') {\n            throw new Error('Event type \"' + eventType + '\" not found.');\n        }\n\n        eventDetail.state = new mixitup.State();\n\n        h.extend(eventDetail.state, detail.state);\n\n        if (detail.futureState) {\n            eventDetail.futureState = new mixitup.State();\n\n            h.extend(eventDetail.futureState, detail.futureState);\n        }\n\n        eventDetail.instance = detail.instance;\n\n        if (detail.originalEvent) {\n            eventDetail.originalEvent = detail.originalEvent;\n        }\n\n        event = h.getCustomEvent(eventType, eventDetail, doc);\n\n        self.callFilters('eventFire', event, arguments);\n\n        el.dispatchEvent(event);\n    };\n\n    // Asign a singleton instance to `mixitup.events`:\n\n    mixitup.events = new mixitup.Events();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.QueueItem = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.args           = [];\n        this.instruction    = null;\n        this.triggerElement = null;\n        this.deferred       = null;\n        this.isToggling     = false;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.QueueItem);\n\n    mixitup.QueueItem.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.QueueItem.prototype.constructor = mixitup.QueueItem;\n\n    /**\n     * The `mixitup.Mixer` class is used to hold discreet, user-configured\n     * instances of MixItUp on a provided container element.\n     *\n     * Mixer instances are returned whenever the `mixitup()` factory function is called,\n     * which expose a range of methods enabling API-based filtering, sorting,\n     * insertion, removal and more.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.Mixer = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.config            = new mixitup.Config();\n\n        this.id                = '';\n\n        this.isBusy            = false;\n        this.isToggling        = false;\n        this.incPadding        = true;\n\n        this.controls          = [];\n        this.targets           = [];\n        this.origOrder         = [];\n        this.cache             = {};\n\n        this.toggleArray       = [];\n\n        this.targetsMoved      = 0;\n        this.targetsImmovable  = 0;\n        this.targetsBound      = 0;\n        this.targetsDone       = 0;\n\n        this.staggerDuration   = 0;\n        this.effectsIn         = null;\n        this.effectsOut        = null;\n        this.transformIn       = [];\n        this.transformOut      = [];\n        this.queue             = [];\n\n        this.state             = null;\n        this.lastOperation     = null;\n        this.lastClicked       = null;\n        this.userCallback      = null;\n        this.userDeferred      = null;\n\n        this.dom               = new mixitup.MixerDom();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Mixer);\n\n    mixitup.Mixer.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Mixer.prototype,\n    /** @lends mixitup.Mixer */\n    {\n        constructor: mixitup.Mixer,\n\n        /**\n         * @private\n         * @instance\n         * @since 3.0.0\n         * @param {HTMLElement} container\n         * @param {HTMLElement} document\n         * @param {string}      id\n         * @param {object}      [config]\n         */\n\n        attach: function(container, document, id, config) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeAttach', arguments);\n\n            self.id = id;\n\n            if (config) {\n                h.extend(self.config, config, true, true);\n            }\n\n            self.sanitizeConfig();\n\n            self.cacheDom(container, document);\n\n            if (self.config.layout.containerClassName) {\n                h.addClass(self.dom.container, self.config.layout.containerClassName);\n            }\n\n            if (!mixitup.features.has.transitions) {\n                self.config.animation.enable = false;\n            }\n\n            if (typeof window.console === 'undefined') {\n                self.config.debug.showWarnings = false;\n            }\n\n            if (self.config.data.uidKey) {\n                // If the dataset API is in use, force disable controls\n\n                self.config.controls.enable = false;\n            }\n\n            self.indexTargets();\n\n            self.state = self.getInitialState();\n\n            for (i = 0; target = self.lastOperation.toHide[i]; i++) {\n                target.hide();\n            }\n\n            if (self.config.controls.enable) {\n                self.initControls();\n\n                self.updateControls({\n                    filter: self.state.activeFilter,\n                    sort: self.state.activeSort\n                });\n\n                self.buildToggleArray(null, self.state);\n            }\n\n            self.parseEffects();\n\n            self.callActions('afterAttach', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since 3.0.0\n         * @return {void}\n         */\n\n        sanitizeConfig: function() {\n            var self = this;\n\n            self.callActions('beforeSanitizeConfig', arguments);\n\n            // Sanitize enum/string config options\n\n            self.config.controls.scope          = self.config.controls.scope.toLowerCase().trim();\n            self.config.controls.toggleLogic    = self.config.controls.toggleLogic.toLowerCase().trim();\n            self.config.controls.toggleDefault  = self.config.controls.toggleDefault.toLowerCase().trim();\n\n            self.config.animation.effects       = self.config.animation.effects.trim();\n\n            self.callActions('afterSanitizeConfig', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {mixitup.State}\n         */\n\n        getInitialState: function() {\n            var self        = this,\n                state       = new mixitup.State(),\n                operation   = new mixitup.Operation();\n\n            self.callActions('beforeGetInitialState', arguments);\n\n            // Map initial values into a mock state object in order to construct an operation\n\n            state.activeContainerClassName = self.config.layout.containerClassName;\n\n            if (self.config.load.dataset) {\n                // Dataset API\n\n                if (!self.config.data.uidKey || typeof self.config.data.uidKey !== 'string') {\n                    throw new TypeError(mixitup.messages.errorConfigDataUidKeyNotSet());\n                }\n\n                operation.startDataset = operation.newDataset = state.activeDataset = self.config.load.dataset.slice();\n                operation.startContainerClassName = operation.newContainerClassName = state.activeContainerClassName;\n                operation.show = self.targets.slice();\n\n                state = self.callFilters('stateGetInitialState', state, arguments);\n            } else {\n                // DOM API\n\n                state.activeFilter              = self.parseFilterArgs([self.config.load.filter]).command;\n                state.activeSort                = self.parseSortArgs([self.config.load.sort]).command;\n                state.totalTargets              = self.targets.length;\n\n                state = self.callFilters('stateGetInitialState', state, arguments);\n\n                if (\n                    state.activeSort.collection || state.activeSort.attribute ||\n                    state.activeSort.order === 'random' || state.activeSort.order === 'desc'\n                ) {\n                    // Sorting on load\n\n                    operation.newSort = state.activeSort;\n\n                    self.sortOperation(operation);\n\n                    self.printSort(false, operation);\n\n                    self.targets = operation.newOrder;\n                } else {\n                    operation.startOrder = operation.newOrder = self.targets;\n                }\n\n                operation.startFilter               = operation.newFilter               = state.activeFilter;\n                operation.startSort                 = operation.newSort                 = state.activeSort;\n                operation.startContainerClassName   = operation.newContainerClassName   = state.activeContainerClassName;\n\n                if (operation.newFilter.selector === 'all') {\n                    operation.newFilter.selector = self.config.selectors.target;\n                } else if (operation.newFilter.selector === 'none') {\n                    operation.newFilter.selector = '';\n                }\n            }\n\n            operation = self.callFilters('operationGetInitialState', operation, [state]);\n\n            self.lastOperation = operation;\n\n            if (operation.newFilter) {\n                self.filterOperation(operation);\n            }\n\n            state = self.buildState(operation);\n\n            return state;\n        },\n\n        /**\n         * Caches references of DOM elements neccessary for the mixer's functionality.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {HTMLElement}       el\n         * @param   {HTMLHtmlElement}   document\n         * @return  {void}\n         */\n\n        cacheDom: function(el, document) {\n            var self    = this;\n\n            self.callActions('beforeCacheDom', arguments);\n\n            self.dom.document  = document;\n            self.dom.body      = self.dom.document.querySelector('body');\n            self.dom.container = el;\n            self.dom.parent    = el;\n\n            self.callActions('afterCacheDom', arguments);\n        },\n\n        /**\n         * Indexes all child elements of the mixer matching the `selectors.target`\n         * selector, instantiating a mixitup.Target for each one.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        indexTargets: function() {\n            var self            = this,\n                target          = null,\n                el              = null,\n                dataset         = null,\n                i               = -1;\n\n            self.callActions('beforeIndexTargets', arguments);\n\n            self.dom.targets = self.config.layout.allowNestedTargets ?\n                self.dom.container.querySelectorAll(self.config.selectors.target) :\n                h.children(self.dom.container, self.config.selectors.target, self.dom.document);\n\n            self.dom.targets = h.arrayFromList(self.dom.targets);\n\n            self.targets = [];\n\n            if ((dataset = self.config.load.dataset) && dataset.length !== self.dom.targets.length) {\n                throw new Error(mixitup.messages.errorDatasetPrerenderedMismatch());\n            }\n\n            if (self.dom.targets.length) {\n                for (i = 0; el = self.dom.targets[i]; i++) {\n                    target = new mixitup.Target();\n\n                    target.init(el, self, dataset ? dataset[i] : void(0));\n\n                    target.isInDom = true;\n\n                    self.targets.push(target);\n                }\n\n                self.dom.parent = self.dom.targets[0].parentElement === self.dom.container ?\n                    self.dom.container :\n                    self.dom.targets[0].parentElement;\n            }\n\n            self.origOrder = self.targets;\n\n            self.callActions('afterIndexTargets', arguments);\n        },\n\n        initControls: function() {\n            var self                = this,\n                definition          = '',\n                controlElements     = null,\n                el                  = null,\n                parent              = null,\n                delagators          = null,\n                control             = null,\n                i                   = -1,\n                j                   = -1;\n\n            self.callActions('beforeInitControls', arguments);\n\n            switch (self.config.controls.scope) {\n                case 'local':\n                    parent = self.dom.container;\n\n                    break;\n                case 'global':\n                    parent = self.dom.document;\n\n                    break;\n                default:\n                    throw new Error(mixitup.messages.errorConfigInvalidControlsScope());\n            }\n\n            for (i = 0; definition = mixitup.controlDefinitions[i]; i++) {\n                if (self.config.controls.live || definition.live) {\n                    if (definition.parent) {\n                        delagators = self.dom[definition.parent];\n\n                        if (!delagators || delagators.length < 0) continue;\n\n                        if (typeof delagators.length !== 'number') {\n                            delagators = [delagators];\n                        }\n                    } else {\n                        delagators = [parent];\n                    }\n\n                    for (j = 0; (el = delagators[j]); j++) {\n                        control = self.getControl(el,  definition.type, definition.selector);\n\n                        self.controls.push(control);\n                    }\n                } else {\n                    controlElements = parent.querySelectorAll(self.config.selectors.control + definition.selector);\n\n                    for (j = 0; (el = controlElements[j]); j++) {\n                        control = self.getControl(el, definition.type, '');\n\n                        if (!control) continue;\n\n                        self.controls.push(control);\n                    }\n                }\n            }\n\n            self.callActions('afterInitControls', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {HTMLElement} el\n         * @param   {string}      type\n         * @param   {string}      selector\n         * @return  {mixitup.Control|null}\n         */\n\n        getControl: function(el, type, selector) {\n            var self    = this,\n                control = null,\n                i       = -1;\n\n            self.callActions('beforeGetControl', arguments);\n\n            if (!selector) {\n                // Static controls only\n\n                for (i = 0; control = mixitup.controls[i]; i++) {\n                    if (control.el === el && control.isBound(self)) {\n                        // Control already bound to this mixer (as another type).\n\n                        // NB: This prevents duplicate controls from being registered where a selector\n                        // might collide, eg: \"[data-filter]\" and \"[data-filter][data-sort]\"\n\n                        return self.callFilters('controlGetControl', null, arguments);\n                    } else if (control.el === el && control.type === type && control.selector === selector) {\n                        // Another mixer is already using this control, add this mixer as a binding\n\n                        control.addBinding(self);\n\n                        return self.callFilters('controlGetControl', control, arguments);\n                    }\n                }\n            }\n\n            // Create new control\n\n            control = new mixitup.Control();\n\n            control.init(el, type, selector);\n\n            control.classNames.base     = h.getClassname(self.config.classNames, type);\n            control.classNames.active   = h.getClassname(self.config.classNames, type, self.config.classNames.modifierActive);\n            control.classNames.disabled = h.getClassname(self.config.classNames, type, self.config.classNames.modifierDisabled);\n\n            // Add a reference to this mixer as a binding\n\n            control.addBinding(self);\n\n            return self.callFilters('controlGetControl', control, arguments);\n        },\n\n        /**\n         * Creates a compound selector by joining the `toggleArray` value as per the\n         * defined toggle logic.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {string}\n         */\n\n        getToggleSelector: function() {\n            var self            = this,\n                delineator      = self.config.controls.toggleLogic === 'or' ? ', ' : '',\n                toggleSelector  = '';\n\n            self.callActions('beforeGetToggleSelector', arguments);\n\n            self.toggleArray = h.clean(self.toggleArray);\n\n            toggleSelector = self.toggleArray.join(delineator);\n\n            if (toggleSelector === '') {\n                toggleSelector = self.config.controls.toggleDefault;\n            }\n\n            return self.callFilters('selectorGetToggleSelector', toggleSelector, arguments);\n        },\n\n        /**\n         * Breaks compound selector strings in an array of discreet selectors,\n         * as per the active `controls.toggleLogic` configuration option. Accepts\n         * either a dynamic command object, or a state object.\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {object}        [command]\n         * @param   {mixitup.State} [state]\n         * @return  {void}\n         */\n\n        buildToggleArray: function(command, state) {\n            var self                    = this,\n                activeFilterSelector    = '';\n\n            self.callActions('beforeBuildToggleArray', arguments);\n\n            if (command && command.filter) {\n                activeFilterSelector = command.filter.selector.replace(/\\s/g, '');\n            } else if (state) {\n                activeFilterSelector = state.activeFilter.selector.replace(/\\s/g, '');\n            } else {\n                return;\n            }\n\n            if (activeFilterSelector === self.config.selectors.target || activeFilterSelector === 'all') {\n                activeFilterSelector = '';\n            }\n\n            if (self.config.controls.toggleLogic === 'or') {\n                self.toggleArray = activeFilterSelector.split(',');\n            } else {\n                self.toggleArray = self.splitCompoundSelector(activeFilterSelector);\n            }\n\n            self.toggleArray = h.clean(self.toggleArray);\n\n            self.callActions('afterBuildToggleArray', arguments);\n        },\n\n        /**\n         * Takes a compound selector (e.g. `.cat-1.cat-2`, `[data-cat=\"1\"][data-cat=\"2\"]`)\n         * and breaks into its individual selectors.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string} compoundSelector\n         * @return  {string[]}\n         */\n\n        splitCompoundSelector: function(compoundSelector) {\n            // Break at a `.` or `[`, capturing the delineator\n\n            var partials    = compoundSelector.split(/([\\.\\[])/g),\n                toggleArray = [],\n                selector    = '',\n                i           = -1;\n\n            if (partials[0] === '') {\n                partials.shift();\n            }\n\n            for (i = 0; i < partials.length; i++) {\n                if (i % 2 === 0) {\n                    selector = '';\n                }\n\n                selector += partials[i];\n\n                if (i % 2 !== 0) {\n                    toggleArray.push(selector);\n                }\n            }\n\n            return toggleArray;\n        },\n\n        /**\n         * Updates controls to their active/inactive state based on the command or\n         * current state of the mixer.\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {object} command\n         * @return  {void}\n         */\n\n        updateControls: function(command) {\n            var self    = this,\n                control = null,\n                output  = new mixitup.CommandMultimix(),\n                i       = -1;\n\n            self.callActions('beforeUpdateControls', arguments);\n\n            // Sanitise to defaults\n\n            if (command.filter) {\n                output.filter = command.filter.selector;\n            } else {\n                output.filter = self.state.activeFilter.selector;\n            }\n\n            if (command.sort) {\n                output.sort = self.buildSortString(command.sort);\n            } else {\n                output.sort = self.buildSortString(self.state.activeSort);\n            }\n\n            if (output.filter === self.config.selectors.target) {\n                output.filter = 'all';\n            }\n\n            if (output.filter === '') {\n                output.filter = 'none';\n            }\n\n            h.freeze(output);\n\n            for (i = 0; control = self.controls[i]; i++) {\n                control.update(output, self.toggleArray);\n            }\n\n            self.callActions('afterUpdateControls', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.CommandSort}   command\n         * @return  {string}\n         */\n\n        buildSortString: function(command) {\n            var self    = this;\n            var output  = '';\n\n            output += command.sortString;\n\n            if (command.next) {\n                output += ' ' + self.buildSortString(command.next);\n            }\n\n            return output;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {object}        command\n         * @param   {Operation}     operation\n         * @return  {Promise.<mixitup.State>}\n         */\n\n        insertTargets: function(command, operation) {\n            var self            = this,\n                nextSibling     = null,\n                insertionIndex  = -1,\n                frag            = null,\n                target          = null,\n                el              = null,\n                i               = -1;\n\n            self.callActions('beforeInsertTargets', arguments);\n\n            if (typeof command.index === 'undefined') command.index = 0;\n\n            nextSibling = self.getNextSibling(command.index, command.sibling, command.position);\n            frag        = self.dom.document.createDocumentFragment();\n\n            if (nextSibling) {\n                insertionIndex = h.index(nextSibling, self.config.selectors.target);\n            } else {\n                insertionIndex = self.targets.length;\n            }\n\n            if (command.collection) {\n                for (i = 0; el = command.collection[i]; i++) {\n                    if (self.dom.targets.indexOf(el) > -1) {\n                        throw new Error(mixitup.messages.errorInsertPreexistingElement());\n                    }\n\n                    // Ensure elements are hidden when they are added to the DOM, so they can\n                    // be animated in gracefully\n\n                    el.style.display = 'none';\n\n                    frag.appendChild(el);\n                    frag.appendChild(self.dom.document.createTextNode(' '));\n\n                    if (!h.isElement(el, self.dom.document) || !el.matches(self.config.selectors.target)) continue;\n\n                    target = new mixitup.Target();\n\n                    target.init(el, self);\n\n                    target.isInDom = true;\n\n                    self.targets.splice(insertionIndex, 0, target);\n\n                    insertionIndex++;\n                }\n\n                self.dom.parent.insertBefore(frag, nextSibling);\n            }\n\n            // Since targets have been added, the original order must be updated\n\n            operation.startOrder = self.origOrder = self.targets;\n\n            self.callActions('afterInsertTargets', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Number}      [index]\n         * @param   {Element}     [sibling]\n         * @param   {string}      [position]\n         * @return  {Element}\n         */\n\n        getNextSibling: function(index, sibling, position) {\n            var self    = this,\n                element = null;\n\n            index = Math.max(index, 0);\n\n            if (sibling && position === 'before') {\n                // Explicit sibling\n\n                element = sibling;\n            } else if (sibling && position === 'after') {\n                // Explicit sibling\n\n                element = sibling.nextElementSibling || null;\n            } else if (self.targets.length > 0 && typeof index !== 'undefined') {\n                // Index and targets exist\n\n                element = (index < self.targets.length || !self.targets.length) ?\n                    self.targets[index].dom.el :\n                    self.targets[self.targets.length - 1].dom.el.nextElementSibling;\n            } else if (self.targets.length === 0 && self.dom.parent.children.length > 0) {\n                // No targets but other siblings\n\n                if (self.config.layout.siblingAfter) {\n                    element = self.config.layout.siblingAfter;\n                } else if (self.config.layout.siblingBefore) {\n                    element = self.config.layout.siblingBefore.nextElementSibling;\n                } else {\n                    self.dom.parent.children[0];\n                }\n            } else {\n                element === null;\n            }\n\n            return self.callFilters('elementGetNextSibling', element, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        filterOperation: function(operation) {\n            var self        = this,\n                testResult  = false,\n                index       = -1,\n                action      = '',\n                target      = null,\n                i           = -1;\n\n            self.callActions('beforeFilterOperation', arguments);\n\n            action = operation.newFilter.action;\n\n            for (i = 0; target = operation.newOrder[i]; i++) {\n                if (operation.newFilter.collection) {\n                    // show via collection\n\n                    testResult = operation.newFilter.collection.indexOf(target.dom.el) > -1;\n                } else {\n                    // show via selector\n\n                    if (operation.newFilter.selector === '') {\n                        testResult = false;\n                    } else {\n                        testResult = target.dom.el.matches(operation.newFilter.selector);\n                    }\n                }\n\n                self.evaluateHideShow(testResult, target, action, operation);\n            }\n\n            if (operation.toRemove.length) {\n                for (i = 0; target = operation.show[i]; i++) {\n                    if (operation.toRemove.indexOf(target) > -1) {\n                        // If any shown targets should be removed, move them into the toHide array\n\n                        operation.show.splice(i, 1);\n\n                        if ((index = operation.toShow.indexOf(target)) > -1) {\n                            operation.toShow.splice(index, 1);\n                        }\n\n                        operation.toHide.push(target);\n                        operation.hide.push(target);\n\n                        i--;\n                    }\n                }\n            }\n\n            operation.matching = operation.show.slice();\n\n            if (operation.show.length === 0 && operation.newFilter.selector !== '' && self.targets.length !== 0) {\n                operation.hasFailed = true;\n            }\n\n            self.callActions('afterFilterOperation', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {boolean}   testResult\n         * @param   {Element}   target\n         * @param   {string}    action\n         * @param   {Operation} operation\n         * @return  {void}\n         */\n\n        evaluateHideShow: function(testResult, target, action, operation) {\n            var self = this;\n\n            self.callActions('beforeEvaluateHideShow', arguments);\n\n            if (testResult === true && action === 'show' || testResult === false && action === 'hide') {\n                operation.show.push(target);\n\n                !target.isShown && operation.toShow.push(target);\n            } else {\n                operation.hide.push(target);\n\n                target.isShown && operation.toHide.push(target);\n            }\n\n            self.callActions('afterEvaluateHideShow', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        sortOperation: function(operation) {\n            var self = this;\n\n            self.callActions('beforeSortOperation', arguments);\n\n            operation.startOrder = self.targets;\n\n            if (operation.newSort.collection) {\n                // Sort by collection\n\n                operation.newOrder = operation.newSort.collection;\n            } else if (operation.newSort.order === 'random') {\n                // Sort random\n\n                operation.newOrder = h.arrayShuffle(operation.startOrder);\n            } else if (operation.newSort.attribute === '') {\n                // Sort by default\n\n                operation.newOrder = self.origOrder.slice();\n\n                if (operation.newSort.order === 'desc') {\n                    operation.newOrder.reverse();\n                }\n            } else {\n                // Sort by attribute\n\n                operation.newOrder = operation.startOrder.slice();\n\n                operation.newOrder.sort(function(a, b) {\n                    return self.compare(a, b, operation.newSort);\n                });\n            }\n\n            if (h.isEqualArray(operation.newOrder, operation.startOrder)) {\n                operation.willSort = false;\n            }\n\n            self.callActions('afterSortOperation', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {mixitup.Target}        a\n         * @param   {mixitup.Target}        b\n         * @param   {mixitup.CommandSort}   command\n         * @return  {Number}\n         */\n\n        compare: function(a, b, command) {\n            var self        = this,\n                order       = command.order,\n                attrA       = self.getAttributeValue(a, command.attribute),\n                attrB       = self.getAttributeValue(b, command.attribute);\n\n            if (isNaN(attrA * 1) || isNaN(attrB * 1)) {\n                attrA = attrA.toLowerCase();\n                attrB = attrB.toLowerCase();\n            } else {\n                attrA = attrA * 1;\n                attrB = attrB * 1;\n            }\n\n            if (attrA < attrB) {\n                return order === 'asc' ? -1 : 1;\n            }\n\n            if (attrA > attrB) {\n                return order === 'asc' ? 1 : -1;\n            }\n\n            if (attrA === attrB && command.next) {\n                return self.compare(a, b, command.next);\n            }\n\n            return 0;\n        },\n\n        /**\n         * Reads the values of any data attributes present the provided target element\n         * which match the current sort command.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.Target}    target\n         * @param   {string}            [attribute]\n         * @return  {(String|Number)}\n         */\n\n        getAttributeValue: function(target, attribute) {\n            var self    = this,\n                value   = '';\n\n            value = target.dom.el.getAttribute('data-' + attribute);\n\n            if (value === null) {\n                if (self.config.debug.showWarnings) {\n                    // Encourage users to assign values to all targets to avoid erroneous sorting\n                    // when types are mixed\n\n                    console.warn(mixitup.messages.warningInconsistentSortingAttributes({\n                        attribute: 'data-' + attribute\n                    }));\n                }\n            }\n\n            // If an attribute is not present, return 0 as a safety value\n\n            return self.callFilters('valueGetAttributeValue', value || 0, arguments);\n        },\n\n        /**\n         * Inserts elements into the DOM in the appropriate\n         * order using a document fragment for minimal\n         * DOM thrashing\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {boolean}   isResetting\n         * @param   {Operation} operation\n         * @return  {void}\n         */\n\n        printSort: function(isResetting, operation) {\n            var self        = this,\n                startOrder  = isResetting ? operation.newOrder : operation.startOrder,\n                newOrder    = isResetting ? operation.startOrder : operation.newOrder,\n                nextSibling = startOrder.length ? startOrder[startOrder.length - 1].dom.el.nextElementSibling : null,\n                frag        = window.document.createDocumentFragment(),\n                whitespace  = null,\n                target      = null,\n                el          = null,\n                i           = -1;\n\n            self.callActions('beforePrintSort', arguments);\n\n            // Empty the container\n\n            for (i = 0; target = startOrder[i]; i++) {\n                el = target.dom.el;\n\n                if (el.style.position === 'absolute') continue;\n\n                h.removeWhitespace(el.previousSibling);\n\n                el.parentElement.removeChild(el);\n            }\n\n            whitespace = nextSibling ? nextSibling.previousSibling : self.dom.parent.lastChild;\n\n            if (whitespace && whitespace.nodeName === '#text') {\n                h.removeWhitespace(whitespace);\n            }\n\n            for (i = 0; target = newOrder[i]; i++) {\n                // Add targets into a document fragment\n\n                el = target.dom.el;\n\n                if (h.isElement(frag.lastChild)) {\n                    frag.appendChild(window.document.createTextNode(' '));\n                }\n\n                frag.appendChild(el);\n            }\n\n            // Insert the document fragment into the container\n            // before any other non-target elements\n\n            if (self.dom.parent.firstChild && self.dom.parent.firstChild !== nextSibling) {\n                frag.insertBefore(window.document.createTextNode(' '), frag.childNodes[0]);\n            }\n\n            if (nextSibling) {\n                frag.appendChild(window.document.createTextNode(' '));\n\n                self.dom.parent.insertBefore(frag, nextSibling);\n            } else {\n                self.dom.parent.appendChild(frag);\n            }\n\n            self.callActions('afterPrintSort', arguments);\n        },\n\n        /**\n         * Parses user-defined sort strings (i.e. `default:asc`) into sort commands objects.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}                sortString\n         * @param   {mixitup.CommandSort}   command\n         * @return  {mixitup.CommandSort}\n         */\n\n        parseSortString: function(sortString, command) {\n            var self        = this,\n                rules       = sortString.split(' '),\n                current     = command,\n                rule        = [],\n                i           = -1;\n\n            // command.sortString = sortString;\n\n            for (i = 0; i < rules.length; i++) {\n                rule = rules[i].split(':');\n\n                current.sortString  = rules[i];\n                current.attribute   = h.dashCase(rule[0]);\n                current.order       = rule[1] || 'asc';\n\n                switch (current.attribute) {\n                    case 'default':\n                        // treat \"default\" as sorting by no attribute\n\n                        current.attribute = '';\n\n                        break;\n                    case 'random':\n                        // treat \"random\" as an order not an attribute\n\n                        current.attribute   = '';\n                        current.order       = 'random';\n\n                        break;\n                }\n\n                if (!current.attribute || current.order === 'random') break;\n\n                if (i < rules.length - 1) {\n                    // Embed reference to the next command\n\n                    current.next = new mixitup.CommandSort();\n\n                    h.freeze(current);\n\n                    current = current.next;\n                }\n            }\n\n            return self.callFilters('commandsParseSort', command, arguments);\n        },\n\n        /**\n         * Parses all effects out of the user-defined `animation.effects` string into\n         * their respective properties and units.\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @return  {void}\n         */\n\n        parseEffects: function() {\n            var self            = this,\n                transformName   = '',\n                effectsIn       = self.config.animation.effectsIn || self.config.animation.effects,\n                effectsOut      = self.config.animation.effectsOut || self.config.animation.effects;\n\n            self.callActions('beforeParseEffects', arguments);\n\n            self.effectsIn      = new mixitup.StyleData();\n            self.effectsOut     = new mixitup.StyleData();\n            self.transformIn    = [];\n            self.transformOut   = [];\n\n            self.effectsIn.opacity = self.effectsOut.opacity = 1;\n\n            self.parseEffect('fade', effectsIn, self.effectsIn, self.transformIn);\n            self.parseEffect('fade', effectsOut, self.effectsOut, self.transformOut, true);\n\n            for (transformName in mixitup.transformDefaults) {\n                if (!(mixitup.transformDefaults[transformName] instanceof mixitup.TransformData)) {\n                    continue;\n                }\n\n                self.parseEffect(transformName, effectsIn, self.effectsIn, self.transformIn);\n                self.parseEffect(transformName, effectsOut, self.effectsOut, self.transformOut, true);\n            }\n\n            self.parseEffect('stagger', effectsIn, self.effectsIn, self.transformIn);\n            self.parseEffect('stagger', effectsOut, self.effectsOut, self.transformOut, true);\n\n            self.callActions('afterParseEffects', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {string}    effectName\n         * @param   {string}    effectString\n         * @param   {StyleData} effects\n         * @param   {String[]}  transform\n         * @param   {boolean}   [isOut]\n         */\n\n        parseEffect: function(effectName, effectString, effects, transform, isOut) {\n            var self        = this,\n                re          = /\\(([^)]+)\\)/,\n                propIndex   = -1,\n                str         = '',\n                match       = [],\n                val         = '',\n                units       = ['%', 'px', 'em', 'rem', 'vh', 'vw', 'deg'],\n                unit        = '',\n                i           = -1;\n\n            self.callActions('beforeParseEffect', arguments);\n\n            if (typeof effectString !== 'string') {\n                throw new TypeError(mixitup.messages.errorConfigInvalidAnimationEffects());\n            }\n\n            if (effectString.indexOf(effectName) < 0) {\n                // The effect is not present in the effects string\n\n                if (effectName === 'stagger') {\n                    // Reset stagger to 0\n\n                    self.staggerDuration = 0;\n                }\n\n                return;\n            }\n\n            // The effect is present\n\n            propIndex = effectString.indexOf(effectName + '(');\n\n            if (propIndex > -1) {\n                // The effect has a user defined value in parentheses\n\n                // Extract from the first parenthesis to the end of string\n\n                str = effectString.substring(propIndex);\n\n                // Match any number of characters between \"(\" and \")\"\n\n                match = re.exec(str);\n\n                val = match[1];\n            }\n\n            switch (effectName) {\n                case 'fade':\n                    effects.opacity = val ? parseFloat(val) : 0;\n\n                    break;\n                case 'stagger':\n                    self.staggerDuration = val ? parseFloat(val) : 100;\n\n                    // TODO: Currently stagger must be applied globally, but\n                    // if seperate values are specified for in/out, this should\n                    // be respected\n\n                    break;\n                default:\n                    // All other effects are transforms following the same structure\n\n                    if (isOut && self.config.animation.reverseOut && effectName !== 'scale') {\n                        effects[effectName].value =\n                            (val ? parseFloat(val) : mixitup.transformDefaults[effectName].value) * -1;\n                    } else {\n                        effects[effectName].value =\n                            (val ? parseFloat(val) : mixitup.transformDefaults[effectName].value);\n                    }\n\n                    if (val) {\n                        for (i = 0; unit = units[i]; i++) {\n                            if (val.indexOf(unit) > -1) {\n                                effects[effectName].unit = unit;\n\n                                break;\n                            }\n                        }\n                    } else {\n                        effects[effectName].unit = mixitup.transformDefaults[effectName].unit;\n                    }\n\n                    transform.push(\n                        effectName +\n                        '(' +\n                        effects[effectName].value +\n                        effects[effectName].unit +\n                        ')'\n                    );\n            }\n\n            self.callActions('afterParseEffect', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {State}\n         */\n\n        buildState: function(operation) {\n            var self        = this,\n                state       = new mixitup.State(),\n                target      = null,\n                i           = -1;\n\n            self.callActions('beforeBuildState', arguments);\n\n            // Map target elements into state arrays.\n            // the real target objects should never be exposed\n\n            for (i = 0; target = self.targets[i]; i++) {\n                if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n                    state.targets.push(target.dom.el);\n                }\n            }\n\n            for (i = 0; target = operation.matching[i]; i++) {\n                state.matching.push(target.dom.el);\n            }\n\n            for (i = 0; target = operation.show[i]; i++) {\n                state.show.push(target.dom.el);\n            }\n\n            for (i = 0; target = operation.hide[i]; i++) {\n                if (!operation.toRemove.length || operation.toRemove.indexOf(target) < 0) {\n                    state.hide.push(target.dom.el);\n                }\n            }\n\n            state.id                        = self.id;\n            state.container                 = self.dom.container;\n            state.activeFilter              = operation.newFilter;\n            state.activeSort                = operation.newSort;\n            state.activeDataset             = operation.newDataset;\n            state.activeContainerClassName  = operation.newContainerClassName;\n            state.hasFailed                 = operation.hasFailed;\n            state.totalTargets              = self.targets.length;\n            state.totalShow                 = operation.show.length;\n            state.totalHide                 = operation.hide.length;\n            state.totalMatching             = operation.matching.length;\n            state.triggerElement            = operation.triggerElement;\n\n            return self.callFilters('stateBuildState', state, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {boolean}   shouldAnimate\n         * @param   {Operation} operation\n         * @return  {void}\n         */\n\n        goMix: function(shouldAnimate, operation) {\n            var self        = this,\n                deferred    = null;\n\n            self.callActions('beforeGoMix', arguments);\n\n            // If the animation duration is set to 0ms,\n            // or no effects specified,\n            // or the container is hidden\n            // then abort animation\n\n            if (\n                !self.config.animation.duration || !self.config.animation.effects || !h.isVisible(self.dom.container)\n            ) {\n                shouldAnimate = false;\n            }\n\n            if (\n                !operation.toShow.length &&\n                !operation.toHide.length &&\n                !operation.willSort &&\n                !operation.willChangeLayout\n            ) {\n                // If nothing to show or hide, and not sorting or\n                // changing layout\n\n                shouldAnimate = false;\n            }\n\n            if (\n                !operation.startState.show.length &&\n                !operation.show.length\n            ) {\n                // If nothing currently shown, nothing to show\n\n                shouldAnimate = false;\n            }\n\n            mixitup.events.fire('mixStart', self.dom.container, {\n                state: operation.startState,\n                futureState: operation.newState,\n                instance: self\n            }, self.dom.document);\n\n            if (typeof self.config.callbacks.onMixStart === 'function') {\n                self.config.callbacks.onMixStart.call(\n                    self.dom.container,\n                    operation.startState,\n                    operation.newState,\n                    self\n                );\n            }\n\n            h.removeClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n\n            if (!self.userDeferred) {\n                // Queue empty, no pending operations\n\n                deferred = self.userDeferred = h.defer(mixitup.libraries);\n            } else {\n                // Use existing deferred\n\n                deferred = self.userDeferred;\n            }\n\n            self.isBusy = true;\n\n            if (!shouldAnimate || !mixitup.features.has.transitions) {\n                // Abort\n\n                if (self.config.debug.fauxAsync) {\n                    setTimeout(function() {\n                        self.cleanUp(operation);\n                    }, self.config.animation.duration);\n                } else {\n                    self.cleanUp(operation);\n                }\n\n                return self.callFilters('promiseGoMix', deferred.promise, arguments);\n            }\n\n            // If we should animate and the platform supports transitions, go for it\n\n            if (window.pageYOffset !== operation.docState.scrollTop) {\n                window.scrollTo(operation.docState.scrollLeft, operation.docState.scrollTop);\n            }\n\n            if (self.config.animation.applyPerspective) {\n                self.dom.parent.style[mixitup.features.perspectiveProp] =\n                    self.config.animation.perspectiveDistance;\n\n                self.dom.parent.style[mixitup.features.perspectiveOriginProp] =\n                    self.config.animation.perspectiveOrigin;\n            }\n\n            if (\n                self.config.animation.animateResizeContainer &&\n                operation.startHeight !== operation.newHeight &&\n                operation.viewportDeltaY !== operation.startHeight - operation.newHeight\n            ) {\n                self.dom.parent.style.height = operation.startHeight + 'px';\n            }\n\n            if (\n                self.config.animation.animateResizeContainer &&\n                operation.startWidth !== operation.newWidth &&\n                operation.viewportDeltaX !== operation.startWidth - operation.newWidth\n            ) {\n                self.dom.parent.style.width = operation.startWidth + 'px';\n            }\n\n            if (operation.startHeight === operation.newHeight) {\n                self.dom.parent.style.height = operation.startHeight + 'px';\n            }\n\n            if (operation.startWidth === operation.newWidth) {\n                self.dom.parent.style.width = operation.startWidth + 'px';\n            }\n\n            if (operation.startHeight === operation.newHeight && operation.startWidth === operation.newWidth) {\n                self.dom.parent.style.overflow = 'hidden';\n            }\n\n            requestAnimationFrame(function() {\n                self.moveTargets(operation);\n            });\n\n            return self.callFilters('promiseGoMix', deferred.promise, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        getStartMixData: function(operation) {\n            var self        = this,\n                parentStyle = window.getComputedStyle(self.dom.parent),\n                parentRect  = self.dom.parent.getBoundingClientRect(),\n                target      = null,\n                data        = {},\n                i           = -1,\n                boxSizing   = parentStyle[mixitup.features.boxSizingProp];\n\n            self.incPadding = (boxSizing === 'border-box');\n\n            self.callActions('beforeGetStartMixData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                data = target.getPosData();\n\n                operation.showPosData[i] = {\n                    startPosData: data\n                };\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                data = target.getPosData();\n\n                operation.toHidePosData[i] = {\n                    startPosData: data\n                };\n            }\n\n            operation.startX = parentRect.left;\n            operation.startY = parentRect.top;\n\n            operation.startHeight = self.incPadding ?\n                parentRect.height :\n                parentRect.height -\n                    parseFloat(parentStyle.paddingTop) -\n                    parseFloat(parentStyle.paddingBottom) -\n                    parseFloat(parentStyle.borderTop) -\n                    parseFloat(parentStyle.borderBottom);\n\n            operation.startWidth = self.incPadding ?\n                parentRect.width :\n                parentRect.width -\n                    parseFloat(parentStyle.paddingLeft) -\n                    parseFloat(parentStyle.paddingRight) -\n                    parseFloat(parentStyle.borderLeft) -\n                    parseFloat(parentStyle.borderRight);\n\n            self.callActions('afterGetStartMixData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        setInter: function(operation) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeSetInter', arguments);\n\n            // Prevent scrollbar flicker on non-inertial scroll platforms by clamping height/width\n\n            if (self.config.animation.clampHeight) {\n                self.dom.parent.style.height    = operation.startHeight + 'px';\n                self.dom.parent.style.overflow  = 'hidden';\n            }\n\n            if (self.config.animation.clampWidth) {\n                self.dom.parent.style.width     = operation.startWidth + 'px';\n                self.dom.parent.style.overflow  = 'hidden';\n            }\n\n            for (i = 0; target = operation.toShow[i]; i++) {\n                target.show();\n            }\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, operation.startContainerClassName);\n                h.addClass(self.dom.container, operation.newContainerClassName);\n            }\n\n            self.callActions('afterSetInter', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        getInterMixData: function(operation) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeGetInterMixData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                operation.showPosData[i].interPosData = target.getPosData();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                operation.toHidePosData[i].interPosData = target.getPosData();\n            }\n\n            self.callActions('afterGetInterMixData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        setFinal: function(operation) {\n            var self    = this,\n                target  = null,\n                i       = -1;\n\n            self.callActions('beforeSetFinal', arguments);\n\n            operation.willSort && self.printSort(false, operation);\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                target.hide();\n            }\n\n            self.callActions('afterSetFinal', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        getFinalMixData: function(operation) {\n            var self        = this,\n                parentStyle = null,\n                parentRect  = null,\n                target      = null,\n                i           = -1;\n\n            self.callActions('beforeGetFinalMixData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                operation.showPosData[i].finalPosData = target.getPosData();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                operation.toHidePosData[i].finalPosData = target.getPosData();\n            }\n\n            // Remove clamping\n\n            if (self.config.animation.clampHeight || self.config.animation.clampWidth) {\n                self.dom.parent.style.height    =\n                self.dom.parent.style.width     =\n                self.dom.parent.style.overflow  = '';\n            }\n\n            if (!self.incPadding) {\n                parentStyle = window.getComputedStyle(self.dom.parent);\n            }\n\n            parentRect  = self.dom.parent.getBoundingClientRect();\n\n            operation.newX = parentRect.left;\n            operation.newY = parentRect.top;\n\n            operation.newHeight = self.incPadding ?\n                parentRect.height :\n                parentRect.height -\n                    parseFloat(parentStyle.paddingTop) -\n                    parseFloat(parentStyle.paddingBottom) -\n                    parseFloat(parentStyle.borderTop) -\n                    parseFloat(parentStyle.borderBottom);\n\n            operation.newWidth = self.incPadding ?\n                parentRect.width :\n                parentRect.width -\n                    parseFloat(parentStyle.paddingLeft) -\n                    parseFloat(parentStyle.paddingRight) -\n                    parseFloat(parentStyle.borderLeft) -\n                    parseFloat(parentStyle.borderRight);\n\n            operation.viewportDeltaX = operation.docState.viewportWidth - this.dom.document.documentElement.clientWidth;\n            operation.viewportDeltaY = operation.docState.viewportHeight - this.dom.document.documentElement.clientHeight;\n\n            if (operation.willSort) {\n                self.printSort(true, operation);\n            }\n\n            for (i = 0; target = operation.toShow[i]; i++) {\n                target.hide();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                target.show();\n            }\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, operation.newContainerClassName);\n                h.addClass(self.dom.container, self.config.layout.containerClassName);\n            }\n\n            self.callActions('afterGetFinalMixData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since    3.0.0\n         * @param    {Operation}     operation\n         */\n\n        getTweenData: function(operation) {\n            var self            = this,\n                target          = null,\n                posData         = null,\n                effectNames     = Object.getOwnPropertyNames(self.effectsIn),\n                effectName      = '',\n                effect          = null,\n                widthChange     = -1,\n                heightChange    = -1,\n                i               = -1,\n                j               = -1;\n\n            self.callActions('beforeGetTweenData', arguments);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                posData             = operation.showPosData[i];\n                posData.posIn       = new mixitup.StyleData();\n                posData.posOut      = new mixitup.StyleData();\n                posData.tweenData   = new mixitup.StyleData();\n\n                // Process x and y\n\n                if (target.isShown) {\n                    posData.posIn.x = posData.startPosData.x - posData.interPosData.x;\n                    posData.posIn.y = posData.startPosData.y - posData.interPosData.y;\n                } else {\n                    posData.posIn.x = posData.posIn.y = 0;\n                }\n\n                posData.posOut.x = posData.finalPosData.x - posData.interPosData.x;\n                posData.posOut.y = posData.finalPosData.y - posData.interPosData.y;\n\n                // Process opacity\n\n                posData.posIn.opacity       = target.isShown ? 1 : self.effectsIn.opacity;\n                posData.posOut.opacity      = 1;\n                posData.tweenData.opacity   = posData.posOut.opacity - posData.posIn.opacity;\n\n                // Adjust x and y if not nudging\n\n                if (!target.isShown && !self.config.animation.nudge) {\n                    posData.posIn.x = posData.posOut.x;\n                    posData.posIn.y = posData.posOut.y;\n                }\n\n                posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n                posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n                // Process width, height, and margins\n\n                if (self.config.animation.animateResizeTargets) {\n                    posData.posIn.width     = posData.startPosData.width;\n                    posData.posIn.height    = posData.startPosData.height;\n\n                    // \"||\" Prevents width/height change from including 0 width/height if hiding or showing\n\n                    widthChange = (posData.startPosData.width || posData.finalPosData.width) - posData.interPosData.width;\n\n                    posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n\n                    heightChange = (posData.startPosData.height || posData.finalPosData.height) - posData.interPosData.height;\n\n                    posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n\n                    posData.posOut.width    = posData.finalPosData.width;\n                    posData.posOut.height   = posData.finalPosData.height;\n\n                    widthChange = (posData.finalPosData.width || posData.startPosData.width) - posData.interPosData.width;\n\n                    posData.posOut.marginRight = posData.finalPosData.marginRight - widthChange;\n\n                    heightChange = (posData.finalPosData.height || posData.startPosData.height) - posData.interPosData.height;\n\n                    posData.posOut.marginBottom = posData.finalPosData.marginBottom - heightChange;\n\n                    posData.tweenData.width         = posData.posOut.width - posData.posIn.width;\n                    posData.tweenData.height        = posData.posOut.height - posData.posIn.height;\n                    posData.tweenData.marginRight   = posData.posOut.marginRight - posData.posIn.marginRight;\n                    posData.tweenData.marginBottom  = posData.posOut.marginBottom - posData.posIn.marginBottom;\n                }\n\n                // Process transforms\n\n                for (j = 0; effectName = effectNames[j]; j++) {\n                    effect = self.effectsIn[effectName];\n\n                    if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n\n                    posData.posIn[effectName].value     = effect.value;\n                    posData.posOut[effectName].value    = 0;\n\n                    posData.tweenData[effectName].value =\n                        posData.posOut[effectName].value - posData.posIn[effectName].value;\n\n                    posData.posIn[effectName].unit =\n                        posData.posOut[effectName].unit =\n                        posData.tweenData[effectName].unit =\n                        effect.unit;\n                }\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                posData             = operation.toHidePosData[i];\n                posData.posIn       = new mixitup.StyleData();\n                posData.posOut      = new mixitup.StyleData();\n                posData.tweenData   = new mixitup.StyleData();\n\n                // Process x and y\n\n                posData.posIn.x     = target.isShown ? posData.startPosData.x - posData.interPosData.x : 0;\n                posData.posIn.y     = target.isShown ? posData.startPosData.y - posData.interPosData.y : 0;\n                posData.posOut.x    = self.config.animation.nudge ? 0 : posData.posIn.x;\n                posData.posOut.y    = self.config.animation.nudge ? 0 : posData.posIn.y;\n                posData.tweenData.x = posData.posOut.x - posData.posIn.x;\n                posData.tweenData.y = posData.posOut.y - posData.posIn.y;\n\n                // Process width, height, and margins\n\n                if (self.config.animation.animateResizeTargets) {\n                    posData.posIn.width         = posData.startPosData.width;\n                    posData.posIn.height        = posData.startPosData.height;\n\n                    widthChange = posData.startPosData.width - posData.interPosData.width;\n\n                    posData.posIn.marginRight = posData.startPosData.marginRight - widthChange;\n\n                    heightChange = posData.startPosData.height - posData.interPosData.height;\n\n                    posData.posIn.marginBottom = posData.startPosData.marginBottom - heightChange;\n                }\n\n                // Process opacity\n\n                posData.posIn.opacity       = 1;\n                posData.posOut.opacity      = self.effectsOut.opacity;\n                posData.tweenData.opacity   = posData.posOut.opacity - posData.posIn.opacity;\n\n                // Process transforms\n\n                for (j = 0; effectName = effectNames[j]; j++) {\n                    effect = self.effectsOut[effectName];\n\n                    if (!(effect instanceof mixitup.TransformData) || !effect.value) continue;\n\n                    posData.posIn[effectName].value     = 0;\n                    posData.posOut[effectName].value    = effect.value;\n\n                    posData.tweenData[effectName].value =\n                        posData.posOut[effectName].value - posData.posIn[effectName].value;\n\n                    posData.posIn[effectName].unit =\n                        posData.posOut[effectName].unit =\n                        posData.tweenData[effectName].unit =\n                        effect.unit;\n                }\n            }\n\n            self.callActions('afterGetTweenData', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        moveTargets: function(operation) {\n            var self            = this,\n                target          = null,\n                moveData        = null,\n                posData         = null,\n                statusChange    = '',\n                willTransition  = false,\n                staggerIndex    = -1,\n                i               = -1,\n                checkProgress   = self.checkProgress.bind(self);\n\n            self.callActions('beforeMoveTargets', arguments);\n\n            // TODO: this is an extra loop in addition to the calcs\n            // done in getOperation, could some of this be done there?\n\n            for (i = 0; target = operation.show[i]; i++) {\n                moveData    = new mixitup.IMoveData();\n                posData     = operation.showPosData[i];\n\n                statusChange = target.isShown ? 'none' : 'show';\n\n                willTransition = self.willTransition(\n                    statusChange,\n                    operation.hasEffect,\n                    posData.posIn,\n                    posData.posOut\n                );\n\n                if (willTransition) {\n                    // Prevent non-transitioning targets from incrementing the staggerIndex\n\n                    staggerIndex++;\n                }\n\n                target.show();\n\n                moveData.posIn          = posData.posIn;\n                moveData.posOut         = posData.posOut;\n                moveData.statusChange   = statusChange;\n                moveData.staggerIndex   = staggerIndex;\n                moveData.operation      = operation;\n                moveData.callback       = willTransition ? checkProgress : null;\n\n                target.move(moveData);\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                posData  = operation.toHidePosData[i];\n                moveData = new mixitup.IMoveData();\n\n                statusChange = 'hide';\n\n                willTransition = self.willTransition(statusChange, posData.posIn, posData.posOut);\n\n                moveData.posIn          = posData.posIn;\n                moveData.posOut         = posData.posOut;\n                moveData.statusChange   = statusChange;\n                moveData.staggerIndex   = i;\n                moveData.operation      = operation;\n                moveData.callback       = willTransition ? checkProgress : null;\n\n                target.move(moveData);\n            }\n\n            if (self.config.animation.animateResizeContainer) {\n                self.dom.parent.style[mixitup.features.transitionProp] =\n                    'height ' + self.config.animation.duration + 'ms ease, ' +\n                    'width ' + self.config.animation.duration + 'ms ease ';\n\n                requestAnimationFrame(function() {\n                    if (\n                        operation.startHeight !== operation.newHeight &&\n                        operation.viewportDeltaY !== operation.startHeight - operation.newHeight\n                    ) {\n                        self.dom.parent.style.height = operation.newHeight + 'px';\n                    }\n\n                    if (\n                        operation.startWidth !== operation.newWidth &&\n                        operation.viewportDeltaX !== operation.startWidth - operation.newWidth\n                    ) {\n                        self.dom.parent.style.width = operation.newWidth + 'px';\n                    }\n                });\n            }\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, self.config.layout.ContainerClassName);\n                h.addClass(self.dom.container, operation.newContainerClassName);\n            }\n\n            self.callActions('afterMoveTargets', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @return  {boolean}\n         */\n\n        hasEffect: function() {\n            var self        = this,\n                EFFECTABLES = [\n                    'scale',\n                    'translateX', 'translateY', 'translateZ',\n                    'rotateX', 'rotateY', 'rotateZ'\n                ],\n                effectName  = '',\n                effect      = null,\n                result      = false,\n                value       = -1,\n                i           = -1;\n\n            if (self.effectsIn.opacity !== 1) {\n                return self.callFilters('resultHasEffect', true, arguments);\n            }\n\n            for (i = 0; effectName = EFFECTABLES[i]; i++) {\n                effect  = self.effectsIn[effectName];\n                value   = (typeof effect && effect.value !== 'undefined') ?\n                    effect.value : effect;\n\n                if (value !== 0) {\n                    result = true;\n\n                    break;\n                }\n            }\n\n            return self.callFilters('resultHasEffect', result, arguments);\n        },\n\n        /**\n         * Determines if a target element will transition in\n         * some fasion and therefore requires binding of\n         * transitionEnd\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}        statusChange\n         * @param   {boolean}       hasEffect\n         * @param   {StyleData}     posIn\n         * @param   {StyleData}     posOut\n         * @return  {boolean}\n         */\n\n        willTransition: function(statusChange, hasEffect, posIn, posOut) {\n            var self    = this,\n                result  = false;\n\n            if (!h.isVisible(self.dom.container)) {\n                // If the container is not visible, the transitionEnd\n                // event will not occur and MixItUp will hang\n\n                result = false;\n            } else if (\n                (statusChange !== 'none' && hasEffect) ||\n                posIn.x !== posOut.x ||\n                posIn.y !== posOut.y\n            ) {\n                // If opacity and/or translate will change\n\n                result = true;\n            } else if (self.config.animation.animateResizeTargets) {\n                // Check if width, height or margins will change\n\n                result = (\n                    posIn.width !== posOut.width ||\n                    posIn.height !== posOut.height ||\n                    posIn.marginRight !== posOut.marginRight ||\n                    posIn.marginTop !== posOut.marginTop\n                );\n            } else {\n                result = false;\n            }\n\n            return self.callFilters('resultWillTransition', result, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        checkProgress: function(operation) {\n            var self = this;\n\n            self.targetsDone++;\n\n            if (self.targetsBound === self.targetsDone) {\n                self.cleanUp(operation);\n            }\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Operation}     operation\n         * @return  {void}\n         */\n\n        cleanUp: function(operation) {\n            var self                = this,\n                target              = null,\n                whitespaceBefore    = null,\n                whitespaceAfter     = null,\n                nextInQueue         = null,\n                i                   = -1;\n\n            self.callActions('beforeCleanUp', arguments);\n\n            self.targetsMoved          =\n                self.targetsImmovable  =\n                self.targetsBound      =\n                self.targetsDone       = 0;\n\n            for (i = 0; target = operation.show[i]; i++) {\n                target.cleanUp();\n\n                target.show();\n            }\n\n            for (i = 0; target = operation.toHide[i]; i++) {\n                target.cleanUp();\n\n                target.hide();\n            }\n\n            if (operation.willSort) {\n                self.printSort(false, operation);\n            }\n\n            // Remove any styles applied to the parent container\n\n            self.dom.parent.style[mixitup.features.transitionProp]             =\n                self.dom.parent.style.height                                   =\n                self.dom.parent.style.width                                    =\n                self.dom.parent.style.overflow                                 =\n                self.dom.parent.style[mixitup.features.perspectiveProp]        =\n                self.dom.parent.style[mixitup.features.perspectiveOriginProp]  = '';\n\n            if (operation.willChangeLayout) {\n                h.removeClass(self.dom.container, operation.startContainerClassName);\n                h.addClass(self.dom.container, operation.newContainerClassName);\n            }\n\n            if (operation.toRemove.length) {\n                for (i = 0; target = self.targets[i]; i++) {\n                    if (operation.toRemove.indexOf(target) > -1) {\n                        if (\n                            (whitespaceBefore = target.dom.el.previousSibling) && whitespaceBefore.nodeName === '#text' &&\n                            (whitespaceAfter = target.dom.el.nextSibling) && whitespaceAfter.nodeName === '#text'\n                        ) {\n                            h.removeWhitespace(whitespaceBefore);\n                        }\n\n                        if (!operation.willSort) {\n                            // NB: Sorting will remove targets as a bi-product of `printSort()`\n\n                            self.dom.parent.removeChild(target.dom.el);\n                        }\n\n                        self.targets.splice(i, 1);\n\n                        target.isInDom = false;\n\n                        i--;\n                    }\n                }\n\n                // Since targets have been removed, the original order must be updated\n\n                self.origOrder = self.targets;\n            }\n\n            if (operation.willSort) {\n                self.targets = operation.newOrder;\n            }\n\n            self.state = operation.newState;\n            self.lastOperation = operation;\n\n            self.dom.targets = self.state.targets;\n\n            // mixEnd\n\n            mixitup.events.fire('mixEnd', self.dom.container, {\n                state: self.state,\n                instance: self\n            }, self.dom.document);\n\n            if (typeof self.config.callbacks.onMixEnd === 'function') {\n                self.config.callbacks.onMixEnd.call(self.dom.container, self.state, self);\n            }\n\n            if (operation.hasFailed) {\n                // mixFail\n\n                mixitup.events.fire('mixFail', self.dom.container, {\n                    state: self.state,\n                    instance: self\n                }, self.dom.document);\n\n                if (typeof self.config.callbacks.onMixFail === 'function') {\n                    self.config.callbacks.onMixFail.call(self.dom.container, self.state, self);\n                }\n\n                h.addClass(self.dom.container, h.getClassname(self.config.classNames, 'container', self.config.classNames.modifierFailed));\n            }\n\n            // User-defined callback function\n\n            if (typeof self.userCallback === 'function') {\n                self.userCallback.call(self.dom.container, self.state, self);\n            }\n\n            if (typeof self.userDeferred.resolve === 'function') {\n                self.userDeferred.resolve(self.state);\n            }\n\n            self.userCallback  = null;\n            self.userDeferred  = null;\n            self.lastClicked   = null;\n            self.isToggling    = false;\n            self.isBusy        = false;\n\n            if (self.queue.length) {\n                self.callActions('beforeReadQueueCleanUp', arguments);\n\n                nextInQueue = self.queue.shift();\n\n                // Update non-public API properties stored in queue\n\n                self.userDeferred  = nextInQueue.deferred;\n                self.isToggling    = nextInQueue.isToggling;\n                self.lastClicked   = nextInQueue.triggerElement;\n\n                if (nextInQueue.instruction.command instanceof mixitup.CommandMultimix) {\n                    self.multimix.apply(self, nextInQueue.args);\n                } else {\n                    self.dataset.apply(self, nextInQueue.args);\n                }\n            }\n\n            self.callActions('afterCleanUp', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseMultimixArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandMultimix();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                if (typeof arg === 'object') {\n                    h.extend(instruction.command, arg);\n                } else if (typeof arg === 'boolean') {\n                    instruction.animate = arg;\n                } else if (typeof arg === 'function') {\n                    instruction.callback = arg;\n                }\n            }\n\n            // Coerce arbitrary command arguments into typed command objects\n\n            if (instruction.command.insert && !(instruction.command.insert instanceof mixitup.CommandInsert)) {\n                instruction.command.insert = self.parseInsertArgs([instruction.command.insert]).command;\n            }\n\n            if (instruction.command.remove && !(instruction.command.remove instanceof mixitup.CommandRemove)) {\n                instruction.command.remove = self.parseRemoveArgs([instruction.command.remove]).command;\n            }\n\n            if (instruction.command.filter && !(instruction.command.filter instanceof mixitup.CommandFilter)) {\n                instruction.command.filter = self.parseFilterArgs([instruction.command.filter]).command;\n            }\n\n            if (instruction.command.sort && !(instruction.command.sort instanceof mixitup.CommandSort)) {\n                instruction.command.sort = self.parseSortArgs([instruction.command.sort]).command;\n            }\n\n            if (instruction.command.changeLayout && !(instruction.command.changeLayout instanceof mixitup.CommandChangeLayout)) {\n                instruction.command.changeLayout = self.parseChangeLayoutArgs([instruction.command.changeLayout]).command;\n            }\n\n            instruction = self.callFilters('instructionParseMultimixArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseFilterArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandFilter();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (typeof arg === 'string') {\n                    // Selector\n\n                    instruction.command.selector = arg;\n                } else if (arg === null) {\n                    instruction.command.collection = [];\n                } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n                    // Single element\n\n                    instruction.command.collection = [arg];\n                } else if (typeof arg === 'object' && typeof arg.length !== 'undefined') {\n                    // Multiple elements in array, NodeList or jQuery collection\n\n                    instruction.command.collection = h.arrayFromList(arg);\n                } else if (typeof arg === 'object') {\n                    // Filter command\n\n                    h.extend(instruction.command, arg);\n                } else if (typeof arg === 'boolean') {\n                    instruction.animate = arg;\n                } else if (typeof arg === 'function') {\n                    instruction.callback = arg;\n                }\n            }\n\n            if (instruction.command.selector && instruction.command.collection) {\n                throw new Error(mixitup.messages.errorFilterInvalidArguments());\n            }\n\n            instruction = self.callFilters('instructionParseFilterArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        parseSortArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                sortString  = '',\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandSort();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'string':\n                        // Sort string\n\n                        sortString = arg;\n\n                        break;\n                    case 'object':\n                        // Array of element references\n\n                        if (arg.length) {\n                            instruction.command.collection = h.arrayFromList(arg);\n                        }\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            if (sortString) {\n                instruction.command = self.parseSortString(sortString, instruction.command);\n            }\n\n            instruction = self.callFilters('instructionParseSortArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseInsertArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandInsert();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                if (typeof arg === 'number') {\n                    // Insert index\n\n                    instruction.command.index = arg;\n                } else if (typeof arg === 'string' && ['before', 'after'].indexOf(arg) > -1) {\n                    // 'before'/'after'\n\n                    instruction.command.position = arg;\n                } else if (typeof arg === 'string') {\n                    // Markup\n\n                    instruction.command.collection =\n                        h.arrayFromList(h.createElement(arg).childNodes);\n                } else if (typeof arg === 'object' && h.isElement(arg, self.dom.document)) {\n                    // Single element\n\n                    !instruction.command.collection.length ?\n                        (instruction.command.collection = [arg]) :\n                        (instruction.command.sibling = arg);\n                } else if (typeof arg === 'object' && arg.length) {\n                    // Multiple elements in array or jQuery collection\n\n                    !instruction.command.collection.length ?\n                        (instruction.command.collection = arg) :\n                        instruction.command.sibling = arg[0];\n                } else if (typeof arg === 'object' && arg.childNodes && arg.childNodes.length) {\n                    // Document fragment\n\n                    !instruction.command.collection.length ?\n                        instruction.command.collection = h.arrayFromList(arg.childNodes) :\n                        instruction.command.sibling = arg.childNodes[0];\n                } else if (typeof arg === 'object') {\n                    // Insert command\n\n                    h.extend(instruction.command, arg);\n                } else if (typeof arg === 'boolean') {\n                    instruction.animate = arg;\n                } else if (typeof arg === 'function') {\n                    instruction.callback = arg;\n                }\n            }\n\n            if (instruction.command.index && instruction.command.sibling) {\n                throw new Error(mixitup.messages.errorInsertInvalidArguments());\n            }\n\n            if (!instruction.command.collection.length && self.config.debug.showWarnings) {\n                console.warn(mixitup.messages.warningInsertNoElements());\n            }\n\n            instruction = self.callFilters('instructionParseInsertArgs', instruction, arguments);\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseRemoveArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                target      = null,\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandRemove();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'number':\n                        if (self.targets[arg]) {\n                            instruction.command.targets[0] = self.targets[arg];\n                        }\n\n                        break;\n                    case 'string':\n                        instruction.command.collection = h.arrayFromList(self.dom.parent.querySelectorAll(arg));\n\n                        break;\n                    case 'object':\n                        if (arg && arg.length) {\n                            instruction.command.collection = arg;\n                        } else if (h.isElement(arg, self.dom.document)) {\n                            instruction.command.collection = [arg];\n                        } else {\n                            // Remove command\n\n                            h.extend(instruction.command, arg);\n                        }\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            if (instruction.command.collection.length) {\n                for (i = 0; target = self.targets[i]; i++) {\n                    if (instruction.command.collection.indexOf(target.dom.el) > -1) {\n                        instruction.command.targets.push(target);\n                    }\n                }\n            }\n\n            if (!instruction.command.targets.length && self.config.debug.showWarnings) {\n                console.warn(mixitup.messages.warningRemoveNoElements());\n            }\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseDatasetArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandDataset();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'object':\n                        if (Array.isArray(arg) || typeof arg.length === 'number') {\n                            instruction.command.dataset = arg;\n                        } else {\n                            // Change layout command\n\n                            h.extend(instruction.command, arg);\n                        }\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array<*>}  args\n         * @return  {mixitup.UserInstruction}\n         */\n\n        parseChangeLayoutArgs: function(args) {\n            var self        = this,\n                instruction = new mixitup.UserInstruction(),\n                arg         = null,\n                i           = -1;\n\n            instruction.animate = self.config.animation.enable;\n            instruction.command = new mixitup.CommandChangeLayout();\n\n            for (i = 0; i < args.length; i++) {\n                arg = args[i];\n\n                if (arg === null) continue;\n\n                switch (typeof arg) {\n                    case 'string':\n                        instruction.command.containerClassName = arg;\n\n                        break;\n                    case 'object':\n                        // Change layout command\n\n                        h.extend(instruction.command, arg);\n\n                        break;\n                    case 'boolean':\n                        instruction.animate = arg;\n\n                        break;\n                    case 'function':\n                        instruction.callback = arg;\n\n                        break;\n                }\n            }\n\n            h.freeze(instruction);\n\n            return instruction;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since       3.0.0\n         * @param       {mixitup.QueueItem}         queueItem\n         * @return      {Promise.<mixitup.State>}\n         */\n\n        queueMix: function(queueItem) {\n            var self            = this,\n                deferred        = null,\n                toggleSelector  = '';\n\n            self.callActions('beforeQueueMix', arguments);\n\n            deferred = h.defer(mixitup.libraries);\n\n            if (self.config.animation.queue && self.queue.length < self.config.animation.queueLimit) {\n                queueItem.deferred = deferred;\n\n                self.queue.push(queueItem);\n\n                // Keep controls in sync with user interactions. Mixer will catch up as it drains the queue.\n\n                if (self.config.controls.enable) {\n                    if (self.isToggling) {\n                        self.buildToggleArray(queueItem.instruction.command);\n\n                        toggleSelector = self.getToggleSelector();\n\n                        self.updateControls({\n                            filter: {\n                                selector: toggleSelector\n                            }\n                        });\n                    } else {\n                        self.updateControls(queueItem.instruction.command);\n                    }\n                }\n            } else {\n                if (self.config.debug.showWarnings) {\n                    console.warn(mixitup.messages.warningMultimixInstanceQueueFull());\n                }\n\n                deferred.resolve(self.state);\n\n                mixitup.events.fire('mixBusy', self.dom.container, {\n                    state: self.state,\n                    instance: self\n                }, self.dom.document);\n\n                if (typeof self.config.callbacks.onMixBusy === 'function') {\n                    self.config.callbacks.onMixBusy.call(self.dom.container, self.state, self);\n                }\n            }\n\n            return self.callFilters('promiseQueueMix', deferred.promise, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Array.<object>}    newDataset\n         * @return  {Operation}\n         */\n\n        getDataOperation: function(newDataset) {\n            var self                = this,\n                operation           = new mixitup.Operation(),\n                startDataset        = [];\n\n            operation = self.callFilters('operationUnmappedGetDataOperation', operation, arguments);\n\n            if (self.dom.targets.length && !(startDataset = (self.state.activeDataset || [])).length) {\n                throw new Error(mixitup.messages.errorDatasetNotSet());\n            }\n\n            operation.id            = h.randomHex();\n            operation.startState    = self.state;\n            operation.startDataset  = startDataset;\n            operation.newDataset    = newDataset.slice();\n\n            self.diffDatasets(operation);\n\n            operation.startOrder = self.targets;\n            operation.newOrder = operation.show;\n\n            if (self.config.animation.enable) {\n                self.getStartMixData(operation);\n                self.setInter(operation);\n\n                operation.docState = h.getDocumentState(self.dom.document);\n\n                self.getInterMixData(operation);\n                self.setFinal(operation);\n                self.getFinalMixData(operation);\n\n                self.parseEffects();\n\n                operation.hasEffect = self.hasEffect();\n\n                self.getTweenData(operation);\n            }\n\n            self.targets = operation.show.slice();\n\n            operation.newState = self.buildState(operation);\n\n            // NB: Targets to be removed must be included in `self.targets` for removal during clean up,\n            // but are added after state is built so that state is accurate\n\n            Array.prototype.push.apply(self.targets, operation.toRemove);\n\n            operation = self.callFilters('operationMappedGetDataOperation', operation, arguments);\n\n            return operation;\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.Operation} operation\n         * @return  {void}\n         */\n\n        diffDatasets: function(operation) {\n            var self                = this,\n                persistantStartIds  = [],\n                persistantNewIds    = [],\n                insertedTargets     = [],\n                data                = null,\n                target              = null,\n                el                  = null,\n                frag                = null,\n                nextEl              = null,\n                uids                = {},\n                id                  = '',\n                i                   = -1;\n\n            self.callActions('beforeDiffDatasets', arguments);\n\n            for (i = 0; data = operation.newDataset[i]; i++) {\n                if (typeof (id = data[self.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n                    throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n                        uidKey: self.config.data.uidKey\n                    }));\n                }\n\n                if (!uids[id]) {\n                    uids[id] = true;\n                } else {\n                    throw new Error(mixitup.messages.errorDatasetDuplicateUid({\n                        uid: id\n                    }));\n                }\n\n                if ((target = self.cache[id]) instanceof mixitup.Target) {\n                    // Already in cache\n\n                    if (self.config.data.dirtyCheck && !h.deepEquals(data, target.data)) {\n                        // change detected\n\n                        el = target.render(data);\n\n                        target.data = data;\n\n                        if (el !== target.dom.el) {\n                            // Update target element reference\n\n                            if (target.isInDom) {\n                                target.unbindEvents();\n\n                                self.dom.parent.replaceChild(el, target.dom.el);\n                            }\n\n                            if (!target.isShown) {\n                                el.style.display = 'none';\n                            }\n\n                            target.dom.el = el;\n\n                            if (target.isInDom) {\n                                target.bindEvents();\n                            }\n                        }\n                    }\n\n                    el = target.dom.el;\n                } else {\n                    // New target\n\n                    target = new mixitup.Target();\n\n                    target.init(null, self, data);\n\n                    target.hide();\n                }\n\n                if (!target.isInDom) {\n                    // Adding to DOM\n\n                    if (!frag) {\n                        // Open frag\n\n                        frag = self.dom.document.createDocumentFragment();\n                    }\n\n                    if (frag.lastElementChild) {\n                        frag.appendChild(self.dom.document.createTextNode(' '));\n                    }\n\n                    frag.appendChild(target.dom.el);\n\n                    target.isInDom = true;\n\n                    target.unbindEvents();\n                    target.bindEvents();\n                    target.hide();\n\n                    operation.toShow.push(target);\n\n                    insertedTargets.push(target);\n                } else {\n                    // Already in DOM\n\n                    nextEl = target.dom.el.nextElementSibling;\n\n                    persistantNewIds.push(id);\n\n                    if (frag) {\n                        // Close and insert previously opened frag\n\n                        if (frag.lastElementChild) {\n                            frag.appendChild(self.dom.document.createTextNode(' '));\n                        }\n\n                        self.insertDatasetFrag(frag, target.dom.el, insertedTargets);\n\n                        frag = null;\n                    }\n                }\n\n                operation.show.push(target);\n            }\n\n            if (frag) {\n                // Unclosed frag remaining\n\n                nextEl = nextEl || self.config.layout.siblingAfter;\n\n                if (nextEl) {\n                    frag.appendChild(self.dom.document.createTextNode(' '));\n                }\n\n                self.insertDatasetFrag(frag, nextEl, insertedTargets);\n            }\n\n            for (i = 0; data = operation.startDataset[i]; i++) {\n                id = data[self.config.data.uidKey];\n\n                target = self.cache[id];\n\n                if (operation.show.indexOf(target) < 0) {\n                    // Previously shown but now absent\n\n                    operation.hide.push(target);\n                    operation.toHide.push(target);\n                    operation.toRemove.push(target);\n                } else {\n                    persistantStartIds.push(id);\n                }\n            }\n\n            if (!h.isEqualArray(persistantStartIds, persistantNewIds)) {\n                operation.willSort = true;\n            }\n\n            self.callActions('afterDiffDatasets', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.1.5\n         * @param   {DocumentFragment}          frag\n         * @param   {(HTMLElement|null)}        nextEl\n         * @param   {Array.<mixitup.Target>}    targets\n         * @return  {void}\n         */\n\n        insertDatasetFrag: function(frag, nextEl, targets) {\n            var self = this;\n            var insertAt = nextEl ? Array.from(self.dom.parent.children).indexOf(nextEl) : self.targets.length;\n\n            self.dom.parent.insertBefore(frag, nextEl);\n\n            while (targets.length) {\n                self.targets.splice(insertAt, 0, targets.shift());\n\n                insertAt++;\n            }\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.CommandSort} sortCommandA\n         * @param   {mixitup.CommandSort} sortCommandB\n         * @return  {boolean}\n         */\n\n        willSort: function(sortCommandA, sortCommandB) {\n            var self    = this,\n                result  = false;\n\n            if (\n                self.config.behavior.liveSort ||\n                sortCommandA.order       === 'random' ||\n                sortCommandA.attribute   !== sortCommandB.attribute ||\n                sortCommandA.order       !== sortCommandB.order ||\n                sortCommandA.collection  !== sortCommandB.collection ||\n                (sortCommandA.next === null && sortCommandB.next) ||\n                (sortCommandA.next && sortCommandB.next === null)\n            ) {\n                result = true;\n            } else if (sortCommandA.next && sortCommandB.next) {\n                result = self.willSort(sortCommandA.next, sortCommandB.next);\n            } else {\n                result = false;\n            }\n\n            return self.callFilters('resultWillSort', result, arguments);\n        },\n\n        /**\n         * A shorthand method for `.filter('all')`. Shows all targets in the container.\n         *\n         * @example\n         *\n         * .show()\n         *\n         * @example <caption>Example: Showing all targets</caption>\n         *\n         * mixer.show()\n         *     .then(function(state) {\n         *         console.log(state.totalShow === state.totalTargets); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @return      {Promise.<mixitup.State>}\n         */\n\n        show: function() {\n            var self = this;\n\n            return self.filter('all');\n        },\n\n        /**\n         * A shorthand method for `.filter('none')`. Hides all targets in the container.\n         *\n         * @example\n         *\n         * .hide()\n         *\n         * @example <caption>Example: Hiding all targets</caption>\n         *\n         * mixer.hide()\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 0); // true\n         *         console.log(state.totalHide === state.totalTargets); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @return      {Promise.<mixitup.State>}\n         */\n\n        hide: function() {\n            var self = this;\n\n            return self.filter('none');\n        },\n\n        /**\n         * Returns a boolean indicating whether or not a MixItUp operation is\n         * currently in progress.\n         *\n         * @example\n         *\n         * .isMixing()\n         *\n         * @example <caption>Example: Checking the status of a mixer</caption>\n         *\n         * mixer.sort('random', function() {\n         *     console.log(mixer.isMixing()) // false\n         * });\n         *\n         * console.log(mixer.isMixing()) // true\n         *\n         * @public\n         * @instance\n         * @since   2.0.0\n         * @return  {boolean}\n         */\n\n        isMixing: function() {\n            var self = this;\n\n            return self.isBusy;\n        },\n\n        /**\n         * Filters all targets in the container by a provided selector string, or the values `'all'`\n         * or `'none'`. Only targets matching the selector will be shown.\n         *\n         * @example\n         *\n         * .filter(selector [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Filtering targets by a class selector</caption>\n         *\n         * mixer.filter('.category-a')\n         *     .then(function(state) {\n         *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a').length); // true\n         *     });\n         *\n         * @example <caption>Example 2: Filtering targets by an attribute selector</caption>\n         *\n         * mixer.filter('[data-category~=\"a\"]')\n         *     .then(function(state) {\n         *         console.log(state.totalShow === containerEl.querySelectorAll('[data-category~=\"a\"]').length); // true\n         *     });\n         *\n         * @example <caption>Example 3: Filtering targets by a compound selector</caption>\n         *\n         * // Show only those targets with the classes 'category-a' AND 'category-b'\n         *\n         * mixer.filter('.category-a.category-c')\n         *     .then(function(state) {\n         *         console.log(state.totalShow === containerEl.querySelectorAll('.category-a.category-c').length); // true\n         *     });\n         *\n         * @example <caption>Example 4: Filtering via an element collection</caption>\n         *\n         * var collection = Array.from(container.querySelectorAll('.mix'));\n         *\n         * console.log(collection.length); // 34\n         *\n         * // Filter the collection manually using Array.prototype.filter\n         *\n         * var filtered = collection.filter(function(target) {\n         *    return parseInt(target.getAttribute('data-price')) > 10;\n         * });\n         *\n         * console.log(filtered.length); // 22\n         *\n         * // Pass the filtered collection to MixItUp\n         *\n         * mixer.filter(filtered)\n         *    .then(function(state) {\n         *        console.log(state.activeFilter.collection.length === 22); // true\n         *    });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {(string|HTMLElement|Array.<HTMLElement>)} selector\n         *      Any valid CSS selector (i.e. `'.category-a'`), or the values `'all'` or `'none'`. The filter method also accepts a reference to single target element or a collection of target elements to show.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        filter: function() {\n            var self        = this,\n                instruction = self.parseFilterArgs(arguments);\n\n            return self.multimix({\n                filter: instruction.command\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Adds an additional selector to the currently active filter selector, concatenating\n         * as per the logic defined in `controls.toggleLogic`.\n         *\n         * @example\n         *\n         * .toggleOn(selector [, animate] [, callback])\n         *\n         * @example <caption>Example: Toggling on a filter selector</caption>\n         *\n         * console.log(mixer.getState().activeFilter.selector); // '.category-a'\n         *\n         * mixer.toggleOn('.category-b')\n         *     .then(function(state) {\n         *         console.log(state.activeFilter.selector); // '.category-a, .category-b'\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {string}    selector\n         *      Any valid CSS selector (i.e. `'.category-a'`)\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        toggleOn: function() {\n            var self            = this,\n                instruction     = self.parseFilterArgs(arguments),\n                selector        = instruction.command.selector,\n                toggleSelector  = '';\n\n            self.isToggling = true;\n\n            if (self.toggleArray.indexOf(selector) < 0) {\n                self.toggleArray.push(selector);\n            }\n\n            toggleSelector = self.getToggleSelector();\n\n            return self.multimix({\n                filter: toggleSelector\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Removes a selector from the active filter selector.\n         *\n         * @example\n         *\n         * .toggleOff(selector [, animate] [, callback])\n         *\n         * @example <caption>Example: Toggling off a filter selector</caption>\n         *\n         * console.log(mixer.getState().activeFilter.selector); // '.category-a, .category-b'\n         *\n         * mixer.toggleOff('.category-b')\n         *     .then(function(state) {\n         *         console.log(state.activeFilter.selector); // '.category-a'\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {string}    selector\n         *      Any valid CSS selector (i.e. `'.category-a'`)\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        toggleOff: function() {\n            var self            = this,\n                instruction     = self.parseFilterArgs(arguments),\n                selector        = instruction.command.selector,\n                toggleSelector  = '';\n\n            self.isToggling = true;\n\n            self.toggleArray.splice(self.toggleArray.indexOf(selector), 1);\n\n            toggleSelector = self.getToggleSelector();\n\n            return self.multimix({\n                filter: toggleSelector\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Sorts all targets in the container according to a provided sort string.\n         *\n         * @example\n         *\n         * .sort(sortString [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Sorting by the default DOM order</caption>\n         *\n         * // Reverse the default order of the targets\n         *\n         * mixer.sort('default:desc')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'default'); // true\n         *         console.log(state.activeSort.order === 'desc'); // true\n         *     });\n         *\n         * @example <caption>Example 2: Sorting by a custom data-attribute</caption>\n         *\n         * // Sort the targets by the value of a `data-published-date` attribute\n         *\n         * mixer.sort('published-date:asc')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *         console.log(state.activeSort.order === 'asc'); // true\n         *     });\n         *\n         * @example <caption>Example 3: Sorting by multiple attributes</caption>\n         *\n         * // Sort the targets by the value of a `data-published-date` attribute, then by `data-title`\n         *\n         * mixer.sort('published-date:desc data-title:asc')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *         console.log(state.activeSort.order === 'desc'); // true\n         *\n         *         console.log(state.activeSort.next.attribute === 'title'); // true\n         *         console.log(state.activeSort.next.order === 'asc'); // true\n         *     });\n         *\n         * @example <caption>Example 4: Sorting by random</caption>\n         *\n         * mixer.sort('random')\n         *     .then(function(state) {\n         *         console.log(state.activeSort.order === 'random') // true\n         *     });\n         *\n         * @example <caption>Example 5: Sorting via an element collection</caption>\n         *\n         * var collection = Array.from(container.querySelectorAll('.mix'));\n         *\n         * // Swap the position of two elements in the collection:\n         *\n         * var temp = collection[1];\n         *\n         * collection[1] = collection[0];\n         * collection[0] = temp;\n         *\n         * // Pass the sorted collection to MixItUp\n         *\n         * mixer.sort(collection)\n         *     .then(function(state) {\n         *         console.log(state.targets[0] === collection[0]); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {(string|Array.<HTMLElement>)}    sortString\n         *      A valid sort string (e.g. `'default'`, `'published-date:asc'`, or `'random'`). The sort method also accepts an array of all target elements in a user-defined order.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        sort: function() {\n            var self        = this,\n                instruction = self.parseSortArgs(arguments);\n\n            return self.multimix({\n                sort: instruction.command\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Changes the layout of the container by adding, removing or updating a\n         * layout-specific class name. If `animation.animateResizetargets` is\n         * enabled, MixItUp will attempt to gracefully animate the width, height,\n         * and position of targets between layout states.\n         *\n         * @example\n         *\n         * .changeLayout(containerClassName [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Adding a new class name to the container</caption>\n         *\n         * mixer.changeLayout('container-list')\n         *      .then(function(state) {\n         *          console.log(state.activeContainerClass === 'container-list'); // true\n         *      });\n         *\n         * @example <caption>Example 2: Removing a previously added class name from the container</caption>\n         *\n         * mixer.changeLayout('')\n         *      .then(function(state) {\n         *          console.log(state.activeContainerClass === ''); // true\n         *      });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    containerClassName\n         *      A layout-specific class name to add to the container.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        changeLayout: function() {\n            var self        = this,\n                instruction = self.parseChangeLayoutArgs(arguments);\n\n            return self.multimix({\n                changeLayout: instruction.command\n            }, instruction.animate, instruction.callback);\n        },\n\n        /**\n         * Updates the contents and order of the container to reflect the provided dataset,\n         * if the dataset API is in use.\n         *\n         * The dataset API is designed for use in API-driven JavaScript applications, and\n         * can be used instead of DOM-based methods such as `.filter()`, `.sort()`,\n         * `.insert()`, etc. When used, insertion, removal, sorting and pagination can be\n         * achieved purely via changes to your data model, without the uglyness of having\n         * to interact with or query the DOM directly.\n         *\n         * @example\n         *\n         * .dataset(dataset [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Rendering a dataset</caption>\n         *\n         * var myDataset = [\n         *     {id: 1, ...},\n         *     {id: 2, ...},\n         *     {id: 3, ...}\n         * ];\n         *\n         * mixer.dataset(myDataset)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 3); // true\n         *     });\n         *\n         * @example <caption>Example 2: Sorting a dataset</caption>\n         *\n         * // Create a new dataset in reverse order\n         *\n         * var newDataset = myDataset.slice().reverse();\n         *\n         * mixer.dataset(newDataset)\n         *     .then(function(state) {\n         *         console.log(state.activeDataset[0] === myDataset[2]); // true\n         *     });\n         *\n         * @example <caption>Example 3: Removing an item from the dataset</caption>\n         *\n         * console.log(myDataset.length); // 3\n         *\n         * // Create a new dataset with the last item removed.\n         *\n         * var newDataset = myDataset.slice().pop();\n         *\n         * mixer.dataset(newDataset)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 2); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {Array.<object>}    dataset\n         *      An array of objects, each one representing the underlying data model of a target to be rendered.\n         * @param       {boolean}           [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}          [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        dataset: function() {\n            var self        = this,\n                instruction = self.parseDatasetArgs(arguments),\n                operation   = null,\n                queueItem   = null,\n                animate     = false;\n\n            self.callActions('beforeDataset', arguments);\n\n            if (!self.isBusy) {\n                if (instruction.callback) self.userCallback = instruction.callback;\n\n                animate = (instruction.animate ^ self.config.animation.enable) ? instruction.animate : self.config.animation.enable;\n\n                operation = self.getDataOperation(instruction.command.dataset);\n\n                return self.goMix(animate, operation);\n            } else {\n                queueItem = new mixitup.QueueItem();\n\n                queueItem.args          = arguments;\n                queueItem.instruction   = instruction;\n\n                return self.queueMix(queueItem);\n            }\n        },\n\n        /**\n         * Performs simultaneous `filter`, `sort`, `insert`, `remove` and `changeLayout`\n         * operations as requested.\n         *\n         * @example\n         *\n         * .multimix(multimixCommand [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Performing simultaneous filtering and sorting</caption>\n         *\n         * mixer.multimix({\n         *     filter: '.category-b',\n         *     sort: 'published-date:desc'\n         * })\n         *     .then(function(state) {\n         *         console.log(state.activeFilter.selector === '.category-b'); // true\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *     });\n         *\n         * @example <caption>Example 2: Performing simultaneous sorting, insertion, and removal</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 6\n         *\n         * // NB: When inserting via `multimix()`, an object should be provided as the value\n         * // for the `insert` portion of the command, allowing for a collection of elements\n         * // and an insertion index to be specified.\n         *\n         * mixer.multimix({\n         *     sort: 'published-date:desc', // Sort the container, including any new elements\n         *     insert: {\n         *         collection: [newElementReferenceA, newElementReferenceB], // Add 2 new elements at index 5\n         *         index: 5\n         *     },\n         *     remove: existingElementReference // Remove 1 existing element\n         * })\n         *     .then(function(state) {\n         *         console.log(state.activeSort.attribute === 'published-date'); // true\n         *         console.log(state.totalShow === 7); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {object}    multimixCommand\n         *      An object containing one or more things to do\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        multimix: function() {\n            var self        = this,\n                operation   = null,\n                animate     = false,\n                queueItem   = null,\n                instruction = self.parseMultimixArgs(arguments);\n\n            self.callActions('beforeMultimix', arguments);\n\n            if (!self.isBusy) {\n                operation = self.getOperation(instruction.command);\n\n                if (self.config.controls.enable) {\n                    // Update controls for API calls\n\n                    if (instruction.command.filter && !self.isToggling) {\n                        // As we are not toggling, reset the toggle array\n                        // so new filter overrides existing toggles\n\n                        self.toggleArray.length = 0;\n                        self.buildToggleArray(operation.command);\n                    }\n\n                    if (self.queue.length < 1) {\n                        self.updateControls(operation.command);\n                    }\n                }\n\n                if (instruction.callback) self.userCallback = instruction.callback;\n\n                // Always allow the instruction to override the instance setting\n\n                animate = (instruction.animate ^ self.config.animation.enable) ?\n                    instruction.animate :\n                    self.config.animation.enable;\n\n                self.callFilters('operationMultimix', operation, arguments);\n\n                return self.goMix(animate, operation);\n            } else {\n                queueItem = new mixitup.QueueItem();\n\n                queueItem.args           = arguments;\n                queueItem.instruction    = instruction;\n                queueItem.triggerElement = self.lastClicked;\n                queueItem.isToggling     = self.isToggling;\n\n                return self.queueMix(queueItem);\n            }\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {object}            multimixCommand\n         * @param   {boolean}           [isPreFetch]\n         *      An optional boolean indicating that the operation is being pre-fetched for execution at a later time.\n         * @return  {Operation|null}\n         */\n\n        getOperation: function(multimixCommand) {\n            var self                = this,\n                sortCommand         = multimixCommand.sort,\n                filterCommand       = multimixCommand.filter,\n                changeLayoutCommand = multimixCommand.changeLayout,\n                removeCommand       = multimixCommand.remove,\n                insertCommand       = multimixCommand.insert,\n                operation           = new mixitup.Operation();\n\n            operation = self.callFilters('operationUnmappedGetOperation', operation, arguments);\n\n            operation.id                = h.randomHex();\n            operation.command           = multimixCommand;\n            operation.startState        = self.state;\n            operation.triggerElement    = self.lastClicked;\n\n            if (self.isBusy) {\n                if (self.config.debug.showWarnings) {\n                    console.warn(mixitup.messages.warningGetOperationInstanceBusy());\n                }\n\n                return null;\n            }\n\n            if (insertCommand) {\n                self.insertTargets(insertCommand, operation);\n            }\n\n            if (removeCommand) {\n                operation.toRemove = removeCommand.targets;\n            }\n\n            operation.startSort = operation.newSort = operation.startState.activeSort;\n            operation.startOrder = operation.newOrder = self.targets;\n\n            if (sortCommand) {\n                operation.startSort = operation.startState.activeSort;\n                operation.newSort   = sortCommand;\n\n                operation.willSort = self.willSort(sortCommand, operation.startState.activeSort);\n\n                if (operation.willSort) {\n                    self.sortOperation(operation);\n                }\n            }\n\n            operation.startFilter = operation.startState.activeFilter;\n\n            if (filterCommand) {\n                operation.newFilter = filterCommand;\n            } else {\n                operation.newFilter = h.extend(new mixitup.CommandFilter(), operation.startFilter);\n            }\n\n            if (operation.newFilter.selector === 'all') {\n                operation.newFilter.selector = self.config.selectors.target;\n            } else if (operation.newFilter.selector === 'none') {\n                operation.newFilter.selector = '';\n            }\n\n            self.filterOperation(operation);\n\n            operation.startContainerClassName = operation.startState.activeContainerClassName;\n\n            if (changeLayoutCommand) {\n                operation.newContainerClassName = changeLayoutCommand.containerClassName;\n\n                if (operation.newContainerClassName !== operation.startContainerClassName) {\n                    operation.willChangeLayout = true;\n                }\n            } else {\n                operation.newContainerClassName = operation.startContainerClassName;\n            }\n\n            if (self.config.animation.enable) {\n                // Populate the operation's position data\n\n                self.getStartMixData(operation);\n                self.setInter(operation);\n\n                operation.docState = h.getDocumentState(self.dom.document);\n\n                self.getInterMixData(operation);\n                self.setFinal(operation);\n                self.getFinalMixData(operation);\n\n                self.parseEffects();\n\n                operation.hasEffect = self.hasEffect();\n\n                self.getTweenData(operation);\n            }\n\n            if (operation.willSort) {\n                self.targets = operation.newOrder;\n            }\n\n            operation.newState = self.buildState(operation);\n\n            return self.callFilters('operationMappedGetOperation', operation, arguments);\n        },\n\n        /**\n         * Renders a previously created operation at a specific point in its path, as\n         * determined by a multiplier between 0 and 1.\n         *\n         * @example\n         * .tween(operation, multiplier)\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.Operation}     operation\n         *      An operation object created via the `getOperation` method\n         *\n         * @param   {Float}                 multiplier\n         *      Any number between 0 and 1 representing the percentage complete of the operation\n         * @return  {void}\n         */\n\n        tween: function(operation, multiplier) {\n            var target          = null,\n                posData         = null,\n                toHideIndex     = -1,\n                i               = -1;\n\n            multiplier = Math.min(multiplier, 1);\n            multiplier = Math.max(multiplier, 0);\n\n            for (i = 0; target = operation.show[i]; i++) {\n                posData = operation.showPosData[i];\n\n                target.applyTween(posData, multiplier);\n            }\n\n            for (i = 0; target = operation.hide[i]; i++) {\n                if (target.isShown) {\n                    target.hide();\n                }\n\n                if ((toHideIndex = operation.toHide.indexOf(target)) > -1) {\n                    posData = operation.toHidePosData[toHideIndex];\n\n                    if (!target.isShown) {\n                        target.show();\n                    }\n\n                    target.applyTween(posData, multiplier);\n                }\n            }\n        },\n\n        /**\n         * Inserts one or more new target elements into the container at a specified\n         * index.\n         *\n         * To be indexed as targets, new elements must match the `selectors.target`\n         * selector (`'.mix'` by default).\n         *\n         * @example\n         *\n         * .insert(newElements [, index] [, animate], [, callback])\n         *\n         * @example <caption>Example 1: Inserting a single element via reference</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 0\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * mixer.insert(newElement)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 1); // true\n         *     });\n         *\n         * @example <caption>Example 2: Inserting a single element via HTML string</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 1\n         *\n         * // Create a new element via reference\n         *\n         * var newElementHtml = '&lt;div class=\"mix\"&gt;&lt;/div&gt;';\n         *\n         * // Create and insert the new element at index 1\n         *\n         * mixer.insert(newElementHtml, 1)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 2); // true\n         *         console.log(state.show[1].outerHTML === newElementHtml); // true\n         *     });\n         *\n         * @example <caption>Example 3: Inserting multiple elements via reference</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 2\n         *\n         * // Create an array of new elements to insert.\n         *\n         * var newElement1 = document.createElement('div');\n         * var newElement2 = document.createElement('div');\n         *\n         * newElement1.classList.add('mix');\n         * newElement2.classList.add('mix');\n         *\n         * var newElementsCollection = [newElement1, newElement2];\n         *\n         * // Insert the new elements starting at index 1\n         *\n         * mixer.insert(newElementsCollection, 1)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 4); // true\n         *         console.log(state.show[1] === newElement1); // true\n         *         console.log(state.show[2] === newElement2); // true\n         *     });\n         *\n         * @example <caption>Example 4: Inserting a jQuery collection object containing one or more elements</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 4\n         *\n         * var $newElement = $('&lt;div class=\"mix\"&gt;&lt;/div&gt;');\n         *\n         * // Insert the new elements starting at index 3\n         *\n         * mixer.insert(newElementsCollection, 3)\n         *     .then(function(state) {\n         *         console.log(state.totalShow === 5); // true\n         *         console.log(state.show[3] === $newElement[0]); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {number}    index=0\n         *      The index at which to insert the new element(s). `0` by default.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        insert: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.multimix({\n                insert: args.command\n            }, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements before a provided reference element.\n         *\n         * @example\n         *\n         * .insertBefore(newElements, referenceElement [, animate] [, callback])\n         *\n         * @example <caption>Example: Inserting a new element before a reference element</caption>\n         *\n         * // An existing reference element is chosen at index 2\n         *\n         * var referenceElement = mixer.getState().show[2];\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * mixer.insertBefore(newElement, referenceElement)\n         *     .then(function(state) {\n         *         // The new element is inserted into the container at index 2, before the reference element\n         *\n         *         console.log(state.show[2] === newElement); // true\n         *\n         *         // The reference element is now at index 3\n         *\n         *         console.log(state.show[3] === referenceElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {HTMLElement}    referenceElement\n         *      A reference to an existing element in the container to insert new elements before.\n         *@param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        insertBefore: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(args.command.collection, 'before', args.command.sibling, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements after a provided reference element.\n         *\n         * @example\n         *\n         * .insertAfter(newElements, referenceElement [, animate] [, callback])\n         *\n         * @example <caption>Example: Inserting a new element after a reference element</caption>\n         *\n         * // An existing reference element is chosen at index 2\n         *\n         * var referenceElement = mixer.getState().show[2];\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * mixer.insertAfter(newElement, referenceElement)\n         *     .then(function(state) {\n         *         // The new element is inserted into the container at index 3, after the reference element\n         *\n         *         console.log(state.show[3] === newElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {HTMLElement}    referenceElement\n         *      A reference to an existing element in the container to insert new elements after.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        insertAfter: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(args.command.collection, 'after', args.command.sibling, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements into the container before all existing targets.\n         *\n         * @example\n         *\n         * .prepend(newElements [,animate] [,callback])\n         *\n         * @example <caption>Example: Prepending a new element</caption>\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * // Insert the element into the container\n         *\n         * mixer.prepend(newElement)\n         *     .then(function(state) {\n         *         console.log(state.show[0] === newElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        prepend: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(0, args.command.collection, args.animate, args.callback);\n        },\n\n        /**\n         * Inserts one or more new elements into the container after all existing targets.\n         *\n         * @example\n         *\n         * .append(newElements [,animate] [,callback])\n         *\n         * @example <caption>Example: Appending a new element</caption>\n         *\n         * // Create a new element\n         *\n         * var newElement = document.createElement('div');\n         * newElement.classList.add('mix');\n         *\n         * // Insert the element into the container\n         *\n         * mixer.append(newElement)\n         *     .then(function(state) {\n         *         console.log(state.show[state.show.length - 1] === newElement); // true\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string)}    newElements\n         *      A reference to a single element to insert, an array-like collection of elements, or an HTML string representing a single element.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        append: function() {\n            var self = this,\n                args = self.parseInsertArgs(arguments);\n\n            return self.insert(self.state.totalTargets, args.command.collection, args.animate, args.callback);\n        },\n\n        /**\n         * Removes one or more existing target elements from the container.\n         *\n         * @example\n         *\n         * .remove(elements [, animate] [, callback])\n         *\n         * @example <caption>Example 1: Removing an element by reference</caption>\n         *\n         * var elementToRemove = containerEl.firstElementChild;\n         *\n         * mixer.remove(elementToRemove)\n         *      .then(function(state) {\n         *          console.log(state.targets.indexOf(elementToRemove) === -1); // true\n         *      });\n         *\n         * @example <caption>Example 2: Removing a collection of elements by reference</caption>\n         *\n         * var elementsToRemove = containerEl.querySelectorAll('.category-a');\n         *\n         * console.log(elementsToRemove.length) // 3\n         *\n         * mixer.remove(elementsToRemove)\n         *      .then(function() {\n         *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n         *      });\n         *\n         * @example <caption>Example 3: Removing one or more elements by selector</caption>\n         *\n         * mixer.remove('.category-a')\n         *      .then(function() {\n         *          console.log(containerEl.querySelectorAll('.category-a').length); // 0\n         *      });\n         *\n         * @example <caption>Example 4: Removing an element by index</caption>\n         *\n         * console.log(mixer.getState.totalShow); // 4\n         *\n         * // Remove the element at index 3\n         *\n         * mixer.remove(3)\n         *      .then(function(state) {\n         *          console.log(state.totalShow); // 3\n         *          console.log(state.show[3]); // undefined\n         *      });\n         *\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {(HTMLElement|Array.<HTMLElement>|string|number)}    elements\n         *      A reference to a single element to remove, an array-like collection of elements, a selector string, or the index of an element to remove.\n         * @param       {boolean}   [animate=true]\n         *      An optional boolean dictating whether the operation should animate, or occur syncronously with no animation. `true` by default.\n         * @param       {function}  [callback=null]\n         *      An optional callback function to be invoked after the operation has completed.\n         * @return      {Promise.<mixitup.State>}\n         *      A promise resolving with the current state object.\n         */\n\n        remove: function() {\n            var self = this,\n                args = self.parseRemoveArgs(arguments);\n\n            return self.multimix({\n                remove: args.command\n            }, args.animate, args.callback);\n        },\n\n        /**\n         * Retrieves the the value of any property or sub-object within the current\n         * mixitup configuration, or the whole configuration object.\n         *\n         * @example\n         *\n         * .getConfig([stringKey])\n         *\n         * @example <caption>Example 1: retrieve the entire configuration object</caption>\n         *\n         * var config = mixer.getConfig(); // Config { ... }\n         *\n         * @example <caption>Example 2: retrieve a named sub-object of configuration object</caption>\n         *\n         * var animation = mixer.getConfig('animation'); // ConfigAnimation { ... }\n         *\n         * @example <caption>Example 3: retrieve a value of configuration object via a dot-notation string key</caption>\n         *\n         * var effects = mixer.getConfig('animation.effects'); // 'fade scale'\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @param       {string}    [stringKey]    A \"dot-notation\" string key\n         * @return      {*}\n         */\n\n        getConfig: function(stringKey) {\n            var self    = this,\n                value   = null;\n\n            if (!stringKey) {\n                value = self.config;\n            } else {\n                value = h.getProperty(self.config, stringKey);\n            }\n\n            return self.callFilters('valueGetConfig', value, arguments);\n        },\n\n        /**\n         * Updates the configuration of the mixer, after it has been instantiated.\n         *\n         * See the Configuration Object documentation for a full list of avilable\n         * configuration options.\n         *\n         * @example\n         *\n         * .configure(config)\n         *\n         * @example <caption>Example 1: Updating animation options</caption>\n         *\n         * mixer.configure({\n         *     animation: {\n         *         effects: 'fade translateX(-100%)',\n         *         duration: 300\n         *     }\n         * });\n         *\n         * @example <caption>Example 2: Removing a callback after it has been set</caption>\n         *\n         * var mixer;\n         *\n         * function handleMixEndOnce() {\n         *     // Do something ..\n         *\n         *     // Then nullify the callback\n         *\n         *     mixer.configure({\n         *         callbacks: {\n         *             onMixEnd: null\n         *         }\n         *     });\n         * };\n         *\n         * // Instantiate a mixer with a callback defined\n         *\n         * mixer = mixitup(containerEl, {\n         *     callbacks: {\n         *         onMixEnd: handleMixEndOnce\n         *     }\n         * });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {object}    config\n         *      An object containing one of more configuration options.\n         * @return      {void}\n         */\n\n        configure: function(config) {\n            var self = this;\n\n            self.callActions('beforeConfigure', arguments);\n\n            h.extend(self.config, config, true, true);\n\n            self.callActions('afterConfigure', arguments);\n        },\n\n        /**\n         * Returns an object containing information about the current state of the\n         * mixer. See the State Object documentation for more information.\n         *\n         * NB: State objects are immutable and should therefore be regenerated\n         * after any operation.\n         *\n         * @example\n         *\n         * .getState();\n         *\n         * @example <caption>Example: Retrieving a state object</caption>\n         *\n         * var state = mixer.getState();\n         *\n         * console.log(state.totalShow + 'targets are currently shown');\n         *\n         * @public\n         * @instance\n         * @since       2.0.0\n         * @return      {mixitup.State} An object reflecting the current state of the mixer.\n         */\n\n        getState: function() {\n            var self    = this,\n                state   = null;\n\n            state = new mixitup.State();\n\n            h.extend(state, self.state);\n\n            h.freeze(state);\n\n            return self.callFilters('stateGetState', state, arguments);\n        },\n\n        /**\n         * Forces the re-indexing all targets within the container.\n         *\n         * This should only be used if some other piece of code in your application\n         * has manipulated the contents of your container, which should be avoided.\n         *\n         * If you need to add or remove target elements from the container, use\n         * the built-in `.insert()` or `.remove()` methods, and MixItUp will keep\n         * itself up to date.\n         *\n         * @example\n         *\n         * .forceRefresh()\n         *\n         * @example <caption>Example: Force refreshing the mixer after external DOM manipulation</caption>\n         *\n         * console.log(mixer.getState().totalShow); // 3\n         *\n         * // An element is removed from the container via some external DOM manipulation code:\n         *\n         * containerEl.removeChild(containerEl.firstElementChild);\n         *\n         * // The mixer does not know that the number of targets has changed:\n         *\n         * console.log(mixer.getState().totalShow); // 3\n         *\n         * mixer.forceRefresh();\n         *\n         * // After forceRefresh, the mixer is in sync again:\n         *\n         * console.log(mixer.getState().totalShow); // 2\n         *\n         * @public\n         * @instance\n         * @since 2.1.2\n         * @return {void}\n         */\n\n        forceRefresh: function() {\n            var self = this;\n\n            self.indexTargets();\n        },\n\n        /**\n         * Forces the re-rendering of all targets when using the Dataset API.\n         *\n         * By default, targets are only re-rendered when `data.dirtyCheck` is\n         * enabled, and an item's data has changed when `dataset()` is called.\n         *\n         * The `forceRender()` method allows for the re-rendering of all targets\n         * in response to some arbitrary event, such as the changing of the target\n         * render function.\n         *\n         * Targets are rendered against their existing data.\n         *\n         * @example\n         *\n         * .forceRender()\n         *\n         * @example <caption>Example: Force render targets after changing the target render function</caption>\n         *\n         * console.log(container.innerHTML); // ... &lt;span class=\"mix\"&gt;Foo&lt;/span&gt; ...\n         *\n         * mixer.configure({\n         *     render: {\n         *         target: (item) => `&lt;a href=\"/${item.slug}/\" class=\"mix\"&gt;${item.title}&lt;/a&gt;`\n         *     }\n         * });\n         *\n         * mixer.forceRender();\n         *\n         * console.log(container.innerHTML); // ... &lt;a href=\"/foo/\" class=\"mix\"&gt;Foo&lt;/a&gt; ...\n         *\n         * @public\n         * @instance\n         * @since 3.2.1\n         * @return {void}\n         */\n\n        forceRender: function() {\n            var self    = this,\n                target  = null,\n                el      = null,\n                id      = '';\n\n            for (id in self.cache) {\n                target = self.cache[id];\n\n                el = target.render(target.data);\n\n                if (el !== target.dom.el) {\n                    // Update target element reference\n\n                    if (target.isInDom) {\n                        target.unbindEvents();\n\n                        self.dom.parent.replaceChild(el, target.dom.el);\n                    }\n\n                    if (!target.isShown) {\n                        el.style.display = 'none';\n                    }\n\n                    target.dom.el = el;\n\n                    if (target.isInDom) {\n                        target.bindEvents();\n                    }\n                }\n            }\n\n            self.state = self.buildState(self.lastOperation);\n        },\n\n        /**\n         * Removes mixitup functionality from the container, unbinds all control\n         * event handlers, and deletes the mixer instance from MixItUp's internal\n         * cache.\n         *\n         * This should be performed whenever a mixer's container is removed from\n         * the DOM, such as during a page change in a single page application,\n         * or React's `componentWillUnmount()`.\n         *\n         * @example\n         *\n         * .destroy([cleanUp])\n         *\n         * @example <caption>Example: Destroying the mixer before removing its container element</caption>\n         *\n         * mixer.destroy();\n         *\n         * containerEl.parentElement.removeChild(containerEl);\n         *\n         * @public\n         * @instance\n         * @since   2.0.0\n         * @param   {boolean}   [cleanUp=false]\n         *     An optional boolean dictating whether or not to clean up any inline `display: none;` styling applied to hidden targets.\n         * @return  {void}\n         */\n\n        destroy: function(cleanUp) {\n            var self    = this,\n                control = null,\n                target  = null,\n                i       = 0;\n\n            self.callActions('beforeDestroy', arguments);\n\n            for (i = 0; control = self.controls[i]; i++) {\n                control.removeBinding(self);\n            }\n\n            for (i = 0; target = self.targets[i]; i++) {\n                if (cleanUp) {\n                    target.show();\n                }\n\n                target.unbindEvents();\n            }\n\n            if (self.dom.container.id.match(/^MixItUp/)) {\n                self.dom.container.removeAttribute('id');\n            }\n\n            delete mixitup.instances[self.id];\n\n            self.callActions('afterDestroy', arguments);\n        }\n    });\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.IMoveData = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.posIn          = null;\n        this.posOut         = null;\n        this.operation      = null;\n        this.callback       = null;\n        this.statusChange   = '';\n        this.duration       = -1;\n        this.staggerIndex   = -1;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.IMoveData);\n\n    mixitup.IMoveData.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.IMoveData.prototype.constructor = mixitup.IMoveData;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.TargetDom = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.el = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.TargetDom);\n\n    mixitup.TargetDom.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.TargetDom.prototype.constructor = mixitup.TargetDom;\n\n    /**\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Target = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.id         = '';\n        this.sortString = '';\n        this.mixer      = null;\n        this.callback   = null;\n        this.isShown    = false;\n        this.isBound    = false;\n        this.isExcluded = false;\n        this.isInDom    = false;\n        this.handler    = null;\n        this.operation  = null;\n        this.data       = null;\n        this.dom        = new mixitup.TargetDom();\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Target);\n\n    mixitup.Target.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Target.prototype, {\n        constructor: mixitup.Target,\n\n        /**\n         * Initialises a newly instantiated Target.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {(Element|null)}    el\n         * @param   {object}            mixer\n         * @param   {object}            [data]\n         * @return  {void}\n         */\n\n        init: function(el, mixer, data) {\n            var self = this,\n                id   = '';\n\n            self.callActions('beforeInit', arguments);\n\n            self.mixer = mixer;\n\n            if (!el) {\n                // If no element is provided, render it\n\n                el = self.render(data);\n            }\n\n            self.cacheDom(el);\n\n            self.bindEvents();\n\n            if (self.dom.el.style.display !== 'none') {\n                self.isShown = true;\n            }\n\n            if (data && mixer.config.data.uidKey) {\n                if (typeof (id = data[mixer.config.data.uidKey]) === 'undefined' || id.toString().length < 1) {\n                    throw new TypeError(mixitup.messages.errorDatasetInvalidUidKey({\n                        uidKey: mixer.config.data.uidKey\n                    }));\n                }\n\n                self.id     = id;\n                self.data   = data;\n\n                mixer.cache[id] = self;\n            }\n\n            self.callActions('afterInit', arguments);\n        },\n\n        /**\n         * Renders the target element using a user-defined renderer function.\n         *\n         * @private\n         * @instance\n         * @since   3.1.4\n         * @param   {object} data\n         * @return  {void}\n         */\n\n        render: function(data) {\n            var self    = this,\n                render  = null,\n                el      = null,\n                temp    = null,\n                output  = '';\n\n            self.callActions('beforeRender', arguments);\n\n            render = self.callFilters('renderRender', self.mixer.config.render.target, arguments);\n\n            if (typeof render !== 'function') {\n                throw new TypeError(mixitup.messages.errorDatasetRendererNotSet());\n            }\n\n            output = render(data);\n\n            if (output && typeof output === 'object' && h.isElement(output)) {\n                el = output;\n            } else if (typeof output === 'string') {\n                temp = document.createElement('div');\n                temp.innerHTML = output;\n\n                el = temp.firstElementChild;\n            }\n\n            return self.callFilters('elRender', el, arguments);\n        },\n\n        /**\n         * Caches references of DOM elements neccessary for the target's functionality.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Element} el\n         * @return  {void}\n         */\n\n        cacheDom: function(el) {\n            var self = this;\n\n            self.callActions('beforeCacheDom', arguments);\n\n            self.dom.el = el;\n\n            self.callActions('afterCacheDom', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}    attributeName\n         * @return  {void}\n         */\n\n        getSortString: function(attributeName) {\n            var self    = this,\n                value   = self.dom.el.getAttribute('data-' + attributeName) || '';\n\n            self.callActions('beforeGetSortString', arguments);\n\n            value = isNaN(value * 1) ?\n                value.toLowerCase() :\n                value * 1;\n\n            self.sortString = value;\n\n            self.callActions('afterGetSortString', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        show: function() {\n            var self = this;\n\n            self.callActions('beforeShow', arguments);\n\n            if (!self.isShown) {\n                self.dom.el.style.display = '';\n\n                self.isShown = true;\n            }\n\n            self.callActions('afterShow', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        hide: function() {\n            var self = this;\n\n            self.callActions('beforeHide', arguments);\n\n            if (self.isShown) {\n                self.dom.el.style.display = 'none';\n\n                self.isShown = false;\n            }\n\n            self.callActions('afterHide', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        move: function(moveData) {\n            var self = this;\n\n            self.callActions('beforeMove', arguments);\n\n            if (!self.isExcluded) {\n                self.mixer.targetsMoved++;\n            }\n\n            self.applyStylesIn(moveData);\n\n            requestAnimationFrame(function() {\n                self.applyStylesOut(moveData);\n            });\n\n            self.callActions('afterMove', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {object}    posData\n         * @param   {number}    multiplier\n         * @return  {void}\n         */\n\n        applyTween: function(posData, multiplier) {\n            var self                    = this,\n                propertyName            = '',\n                tweenData               = null,\n                posIn                   = posData.posIn,\n                currentTransformValues  = [],\n                currentValues           = new mixitup.StyleData(),\n                i                       = -1;\n\n            self.callActions('beforeApplyTween', arguments);\n\n            currentValues.x     = posIn.x;\n            currentValues.y     = posIn.y;\n\n            if (multiplier === 0) {\n                self.hide();\n            } else if (!self.isShown) {\n                self.show();\n            }\n\n            for (i = 0; propertyName = mixitup.features.TWEENABLE[i]; i++) {\n                tweenData = posData.tweenData[propertyName];\n\n                if (propertyName === 'x') {\n                    if (!tweenData) continue;\n\n                    currentValues.x = posIn.x + (tweenData * multiplier);\n                } else if (propertyName === 'y') {\n                    if (!tweenData) continue;\n\n                    currentValues.y = posIn.y + (tweenData * multiplier);\n                } else if (tweenData instanceof mixitup.TransformData) {\n                    if (!tweenData.value) continue;\n\n                    currentValues[propertyName].value =\n                        posIn[propertyName].value + (tweenData.value * multiplier);\n\n                    currentValues[propertyName].unit  = tweenData.unit;\n\n                    currentTransformValues.push(\n                        propertyName + '(' + currentValues[propertyName].value + tweenData.unit + ')'\n                    );\n                } else {\n                    if (!tweenData) continue;\n\n                    currentValues[propertyName] = posIn[propertyName] + (tweenData * multiplier);\n\n                    self.dom.el.style[propertyName] = currentValues[propertyName];\n                }\n            }\n\n            if (currentValues.x || currentValues.y) {\n                currentTransformValues.unshift('translate(' + currentValues.x + 'px, ' + currentValues.y + 'px)');\n            }\n\n            if (currentTransformValues.length) {\n                self.dom.el.style[mixitup.features.transformProp] = currentTransformValues.join(' ');\n            }\n\n            self.callActions('afterApplyTween', arguments);\n        },\n\n        /**\n         * Applies the initial styling to a target element before any transition\n         * is applied.\n         *\n         * @private\n         * @instance\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        applyStylesIn: function(moveData) {\n            var self            = this,\n                posIn           = moveData.posIn,\n                isFading        = self.mixer.effectsIn.opacity !== 1,\n                transformValues = [];\n\n            self.callActions('beforeApplyStylesIn', arguments);\n\n            transformValues.push('translate(' + posIn.x + 'px, ' + posIn.y + 'px)');\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                if (moveData.statusChange !== 'show') {\n                    // Don't apply posIn width or height or showing, as will be 0\n\n                    self.dom.el.style.width  = posIn.width + 'px';\n                    self.dom.el.style.height = posIn.height + 'px';\n                }\n\n                self.dom.el.style.marginRight  = posIn.marginRight + 'px';\n                self.dom.el.style.marginBottom = posIn.marginBottom + 'px';\n            }\n\n            isFading && (self.dom.el.style.opacity = posIn.opacity);\n\n            if (moveData.statusChange === 'show') {\n                transformValues = transformValues.concat(self.mixer.transformIn);\n            }\n\n            self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n\n            self.callActions('afterApplyStylesIn', arguments);\n        },\n\n        /**\n         * Applies a transition followed by the final styles for the element to\n         * transition towards.\n         *\n         * @private\n         * @instance\n         * @param   {mixitup.IMoveData} moveData\n         * @return  {void}\n         */\n\n        applyStylesOut: function(moveData) {\n            var self            = this,\n                transitionRules = [],\n                transformValues = [],\n                isResizing      = self.mixer.config.animation.animateResizeTargets,\n                isFading        = typeof self.mixer.effectsIn.opacity !== 'undefined';\n\n            self.callActions('beforeApplyStylesOut', arguments);\n\n            // Build the transition rules\n\n            transitionRules.push(self.writeTransitionRule(\n                mixitup.features.transformRule,\n                moveData.staggerIndex\n            ));\n\n            if (moveData.statusChange !== 'none') {\n                transitionRules.push(self.writeTransitionRule(\n                    'opacity',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n            }\n\n            if (isResizing) {\n                transitionRules.push(self.writeTransitionRule(\n                    'width',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n\n                transitionRules.push(self.writeTransitionRule(\n                    'height',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n\n                transitionRules.push(self.writeTransitionRule(\n                    'margin',\n                    moveData.staggerIndex,\n                    moveData.duration\n                ));\n            }\n\n            // If no callback was provided, the element will\n            // not transition in any way so tag it as \"immovable\"\n\n            if (!moveData.callback) {\n                self.mixer.targetsImmovable++;\n\n                if (self.mixer.targetsMoved === self.mixer.targetsImmovable) {\n                    // If the total targets moved is equal to the\n                    // number of immovable targets, the operation\n                    // should be considered finished\n\n                    self.mixer.cleanUp(moveData.operation);\n                }\n\n                return;\n            }\n\n            // If the target will transition in some fasion,\n            // assign a callback function\n\n            self.operation = moveData.operation;\n            self.callback = moveData.callback;\n\n            // As long as the target is not excluded, increment\n            // the total number of targets bound\n\n            !self.isExcluded && self.mixer.targetsBound++;\n\n            // Tag the target as bound to differentiate from transitionEnd\n            // events that may come from stylesheet driven effects\n\n            self.isBound = true;\n\n            // Apply the transition\n\n            self.applyTransition(transitionRules);\n\n            // Apply width, height and margin negation\n\n            if (isResizing && moveData.posOut.width > 0 && moveData.posOut.height > 0) {\n                self.dom.el.style.width        = moveData.posOut.width + 'px';\n                self.dom.el.style.height       = moveData.posOut.height + 'px';\n                self.dom.el.style.marginRight  = moveData.posOut.marginRight + 'px';\n                self.dom.el.style.marginBottom = moveData.posOut.marginBottom + 'px';\n            }\n\n            if (!self.mixer.config.animation.nudge && moveData.statusChange === 'hide') {\n                // If we're not nudging, the translation should be\n                // applied before any other transforms to prevent\n                // lateral movement\n\n                transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n            }\n\n            // Apply fade\n\n            switch (moveData.statusChange) {\n                case 'hide':\n                    isFading && (self.dom.el.style.opacity = self.mixer.effectsOut.opacity);\n\n                    transformValues = transformValues.concat(self.mixer.transformOut);\n\n                    break;\n                case 'show':\n                    isFading && (self.dom.el.style.opacity = 1);\n            }\n\n            if (\n                self.mixer.config.animation.nudge ||\n                (!self.mixer.config.animation.nudge && moveData.statusChange !== 'hide')\n            ) {\n                // Opposite of above - apply translate after\n                // other transform\n\n                transformValues.push('translate(' + moveData.posOut.x + 'px, ' + moveData.posOut.y + 'px)');\n            }\n\n            // Apply transforms\n\n            self.dom.el.style[mixitup.features.transformProp] = transformValues.join(' ');\n\n            self.callActions('afterApplyStylesOut', arguments);\n        },\n\n        /**\n         * Combines the name of a CSS property with the appropriate duration and delay\n         * values to created a valid transition rule.\n         *\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string}    property\n         * @param   {number}    staggerIndex\n         * @param   {number}    duration\n         * @return  {string}\n         */\n\n        writeTransitionRule: function(property, staggerIndex, duration) {\n            var self  = this,\n                delay = self.getDelay(staggerIndex),\n                rule  = '';\n\n            rule = property + ' ' +\n                (duration > 0 ? duration : self.mixer.config.animation.duration) + 'ms ' +\n                delay + 'ms ' +\n                (property === 'opacity' ? 'linear' : self.mixer.config.animation.easing);\n\n            return self.callFilters('ruleWriteTransitionRule', rule, arguments);\n        },\n\n        /**\n         * Calculates the transition delay for each target element based on its index, if\n         * staggering is applied. If defined, A custom `animation.staggerSeqeuence`\n         * function can be used to manipulate the order of indices to produce custom\n         * stagger effects (e.g. for use in a grid with irregular row lengths).\n         *\n         * @private\n         * @instance\n         * @since   2.0.0\n         * @param   {number}    index\n         * @return  {number}\n         */\n\n        getDelay: function(index) {\n            var self    = this,\n                delay   = -1;\n\n            if (typeof self.mixer.config.animation.staggerSequence === 'function') {\n                index = self.mixer.config.animation.staggerSequence.call(self, index, self.state);\n            }\n\n            delay = !!self.mixer.staggerDuration ? index * self.mixer.staggerDuration : 0;\n\n            return self.callFilters('delayGetDelay', delay, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {string[]}  rules\n         * @return  {void}\n         */\n\n        applyTransition: function(rules) {\n            var self                = this,\n                transitionString    = rules.join(', ');\n\n            self.callActions('beforeApplyTransition', arguments);\n\n            self.dom.el.style[mixitup.features.transitionProp] = transitionString;\n\n            self.callActions('afterApplyTransition', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Event} e\n         * @return  {void}\n         */\n\n        handleTransitionEnd: function(e) {\n            var self        = this,\n                propName    = e.propertyName,\n                canResize   = self.mixer.config.animation.animateResizeTargets;\n\n            self.callActions('beforeHandleTransitionEnd', arguments);\n\n            if (\n                self.isBound &&\n                e.target.matches(self.mixer.config.selectors.target) &&\n                (\n                    propName.indexOf('transform') > -1 ||\n                    propName.indexOf('opacity') > -1 ||\n                    canResize && propName.indexOf('height') > -1 ||\n                    canResize && propName.indexOf('width') > -1 ||\n                    canResize && propName.indexOf('margin') > -1\n                )\n            ) {\n                self.callback.call(self, self.operation);\n\n                self.isBound = false;\n                self.callback = null;\n                self.operation = null;\n            }\n\n            self.callActions('afterHandleTransitionEnd', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {Event}     e\n         * @return  {void}\n         */\n\n        eventBus: function(e) {\n            var self = this;\n\n            self.callActions('beforeEventBus', arguments);\n\n            switch (e.type) {\n                case 'webkitTransitionEnd':\n                case 'transitionend':\n                    self.handleTransitionEnd(e);\n            }\n\n            self.callActions('afterEventBus', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        unbindEvents: function() {\n            var self = this;\n\n            self.callActions('beforeUnbindEvents', arguments);\n\n            h.off(self.dom.el, 'webkitTransitionEnd', self.handler);\n            h.off(self.dom.el, 'transitionend', self.handler);\n\n            self.callActions('afterUnbindEvents', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @return  {void}\n         */\n\n        bindEvents: function() {\n            var self                = this,\n                transitionEndEvent  = '';\n\n            self.callActions('beforeBindEvents', arguments);\n\n            transitionEndEvent = mixitup.features.transitionPrefix === 'webkit' ? 'webkitTransitionEnd' : 'transitionend';\n\n            self.handler = function(e) {\n                return self.eventBus(e);\n            };\n\n            h.on(self.dom.el, transitionEndEvent, self.handler);\n\n            self.callActions('afterBindEvents', arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since   3.0.0\n         * @param   {boolean}   [getBox]\n         * @return  {PosData}\n         */\n\n        getPosData: function(getBox) {\n            var self    = this,\n                styles  = {},\n                rect    = null,\n                posData = new mixitup.StyleData();\n\n            self.callActions('beforeGetPosData', arguments);\n\n            posData.x = self.dom.el.offsetLeft;\n            posData.y = self.dom.el.offsetTop;\n\n            if (self.mixer.config.animation.animateResizeTargets || getBox) {\n                rect = self.dom.el.getBoundingClientRect();\n\n                posData.top     = rect.top;\n                posData.right   = rect.right;\n                posData.bottom  = rect.bottom;\n                posData.left    = rect.left;\n\n                posData.width  = rect.width;\n                posData.height = rect.height;\n            }\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                styles = window.getComputedStyle(self.dom.el);\n\n                posData.marginBottom = parseFloat(styles.marginBottom);\n                posData.marginRight  = parseFloat(styles.marginRight);\n            }\n\n            return self.callFilters('posDataGetPosData', posData, arguments);\n        },\n\n        /**\n         * @private\n         * @instance\n         * @since       3.0.0\n         * @return      {void}\n         */\n\n        cleanUp: function() {\n            var self = this;\n\n            self.callActions('beforeCleanUp', arguments);\n\n            self.dom.el.style[mixitup.features.transformProp]  = '';\n            self.dom.el.style[mixitup.features.transitionProp] = '';\n            self.dom.el.style.opacity                          = '';\n\n            if (self.mixer.config.animation.animateResizeTargets) {\n                self.dom.el.style.width        = '';\n                self.dom.el.style.height       = '';\n                self.dom.el.style.marginRight  = '';\n                self.dom.el.style.marginBottom = '';\n            }\n\n            self.callActions('afterCleanUp', arguments);\n        }\n    });\n\n    /**\n     * A jQuery-collection-like wrapper around one or more `mixitup.Mixer` instances\n     * allowing simultaneous control of said instances similar to the MixItUp 2 API.\n     *\n     * @example\n     * new mixitup.Collection(instances)\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {mixitup.Mixer[]}   instances\n     */\n\n    mixitup.Collection = function(instances) {\n        var instance    = null,\n            i           = -1;\n\n        this.callActions('beforeConstruct');\n\n        for (i = 0; instance = instances[i]; i++) {\n            this[i] = instance;\n        }\n\n        this.length = instances.length;\n\n        this.callActions('afterConstruct');\n\n        h.freeze(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Collection);\n\n    mixitup.Collection.prototype = Object.create(mixitup.Base.prototype);\n\n    h.extend(mixitup.Collection.prototype,\n    /** @lends mixitup.Collection */\n    {\n        constructor: mixitup.Collection,\n\n        /**\n         * Calls a method on all instances in the collection by passing the method\n         * name as a string followed by any applicable parameters to be curried into\n         * to the method.\n         *\n         * @example\n         * .mixitup(methodName[,arg1][,arg2..]);\n         *\n         * @example\n         * var collection = new Collection([mixer1, mixer2]);\n         *\n         * return collection.mixitup('filter', '.category-a')\n         *     .then(function(states) {\n         *         state.forEach(function(state) {\n         *             console.log(state.activeFilter.selector); // .category-a\n         *         });\n         *     });\n         *\n         * @public\n         * @instance\n         * @since       3.0.0\n         * @param       {string}  methodName\n         * @return      {Promise<Array<mixitup.State>>}\n         */\n\n        mixitup: function(methodName) {\n            var self        = this,\n                instance    = null,\n                args        = Array.prototype.slice.call(arguments),\n                tasks       = [],\n                i           = -1;\n\n            this.callActions('beforeMixitup');\n\n            args.shift();\n\n            for (i = 0; instance = self[i]; i++) {\n                tasks.push(instance[methodName].apply(instance, args));\n            }\n\n            return self.callFilters('promiseMixitup', h.all(tasks, mixitup.libraries), arguments);\n        }\n    });\n\n    /**\n     * `mixitup.Operation` objects contain all data neccessary to describe the full\n     * lifecycle of any MixItUp operation. They can be used to compute and store an\n     * operation for use at a later time (e.g. programmatic tweening).\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Operation = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.id                      = '';\n\n        this.args                    = [];\n        this.command                 = null;\n        this.showPosData             = [];\n        this.toHidePosData           = [];\n\n        this.startState              = null;\n        this.newState                = null;\n        this.docState                = null;\n\n        this.willSort                = false;\n        this.willChangeLayout        = false;\n        this.hasEffect               = false;\n        this.hasFailed               = false;\n\n        this.triggerElement          = null;\n\n        this.show                    = [];\n        this.hide                    = [];\n        this.matching                = [];\n        this.toShow                  = [];\n        this.toHide                  = [];\n        this.toMove                  = [];\n        this.toRemove                = [];\n        this.startOrder              = [];\n        this.newOrder                = [];\n        this.startSort               = null;\n        this.newSort                 = null;\n        this.startFilter             = null;\n        this.newFilter               = null;\n        this.startDataset            = null;\n        this.newDataset              = null;\n        this.viewportDeltaX          = 0;\n        this.viewportDeltaY          = 0;\n        this.startX                  = 0;\n        this.startY                  = 0;\n        this.startHeight             = 0;\n        this.startWidth              = 0;\n        this.newX                    = 0;\n        this.newY                    = 0;\n        this.newHeight               = 0;\n        this.newWidth                = 0;\n        this.startContainerClassName = '';\n        this.startDisplay            = '';\n        this.newContainerClassName   = '';\n        this.newDisplay              = '';\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Operation);\n\n    mixitup.Operation.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Operation.prototype.constructor = mixitup.Operation;\n\n    /**\n     * `mixitup.State` objects expose various pieces of data detailing the state of\n     * a MixItUp instance. They are provided at the start and end of any operation via\n     * callbacks and events, with the most recent state stored between operations\n     * for retrieval at any time via the API.\n     *\n     * @constructor\n     * @namespace\n     * @memberof    mixitup\n     * @public\n     * @since       3.0.0\n     */\n\n    mixitup.State = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /**\n         * The ID of the mixer instance.\n         *\n         * @name        id\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.id = '';\n\n        /**\n         * The currently active filter command as set by a control click or API call.\n         *\n         * @name        activeFilter\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {mixitup.CommandFilter}\n         * @default     null\n         */\n\n        this.activeFilter = null;\n\n        /**\n         * The currently active sort command as set by a control click or API call.\n         *\n         * @name        activeSort\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {mixitup.CommandSort}\n         * @default     null\n         */\n\n        this.activeSort = null;\n\n        /**\n         * The current layout-specific container class name, if applied.\n         *\n         * @name        activeContainerClassName\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {string}\n         * @default     ''\n         */\n\n        this.activeContainerClassName = '';\n\n        /**\n         * A reference to the container element that the mixer is instantiated on.\n         *\n         * @name        container\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Element}\n         * @default     null\n         */\n\n        this.container = null;\n\n        /**\n         * An array of all target elements indexed by the mixer.\n         *\n         * @name        targets\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.targets = [];\n\n        /**\n         * An array of all target elements not matching the current filter.\n         *\n         * @name        hide\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.hide = [];\n\n        /**\n         * An array of all target elements matching the current filter and any additional\n         * limits applied such as pagination.\n         *\n         * @name        show\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.show = [];\n\n        /**\n         * An array of all target elements matching the current filter irrespective of\n         * any additional limits applied such as pagination.\n         *\n         * @name        matching\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<Element>}\n         * @default     []\n         */\n\n        this.matching = [];\n\n        /**\n         * An integer representing the total number of target elements indexed by the\n         * mixer. Equivalent to `state.targets.length`.\n         *\n         * @name        totalTargets\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalTargets = -1;\n\n        /**\n         * An integer representing the total number of target elements matching the\n         * current filter and any additional limits applied such as pagination.\n         * Equivalent to `state.show.length`.\n         *\n         * @name        totalShow\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalShow = -1;\n\n        /**\n         * An integer representing the total number of target elements not matching\n         * the current filter. Equivalent to `state.hide.length`.\n         *\n         * @name        totalHide\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalHide = -1;\n\n        /**\n         * An integer representing the total number of target elements matching the\n         * current filter irrespective of any other limits applied such as pagination.\n         * Equivalent to `state.matching.length`.\n         *\n         * @name        totalMatching\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {number}\n         * @default     -1\n         */\n\n        this.totalMatching = -1;\n\n        /**\n         * A boolean indicating whether the last operation \"failed\", i.e. no targets\n         * could be found matching the filter.\n         *\n         * @name        hasFailed\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {boolean}\n         * @default     false\n         */\n\n        this.hasFailed = false;\n\n        /**\n         * The DOM element that was clicked if the last operation was triggered by the\n         * clicking of a control and not an API call.\n         *\n         * @name        triggerElement\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Element|null}\n         * @default     null\n         */\n\n        this.triggerElement = null;\n\n        /**\n         * The currently active dataset underlying the rendered targets, if the\n         * dataset API is in use.\n         *\n         * @name        activeDataset\n         * @memberof    mixitup.State\n         * @instance\n         * @type        {Array.<object>}\n         * @default     null\n         */\n\n        this.activeDataset = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.State);\n\n    mixitup.State.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.State.prototype.constructor = mixitup.State;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.UserInstruction = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        this.command    = {};\n        this.animate    = false;\n        this.callback   = null;\n\n        this.callActions('afterConstruct');\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.UserInstruction);\n\n    mixitup.UserInstruction.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.UserInstruction.prototype.constructor = mixitup.UserInstruction;\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     */\n\n    mixitup.Messages = function() {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct');\n\n        /* Errors\n        ----------------------------------------------------------------------------- */\n\n        this.ERROR_FACTORY_INVALID_CONTAINER =\n            '[MixItUp] An invalid selector or element reference was passed to the mixitup factory function';\n\n        this.ERROR_FACTORY_CONTAINER_NOT_FOUND =\n            '[MixItUp] The provided selector yielded no container element';\n\n        this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS =\n            '[MixItUp] Invalid value for `animation.effects`';\n\n        this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE =\n            '[MixItUp] Invalid value for `controls.scope`';\n\n        this.ERROR_CONFIG_INVALID_PROPERTY =\n            '[MixitUp] Invalid configuration object property \"${erroneous}\"${suggestion}';\n\n        this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION =\n            '. Did you mean \"${probableMatch}\"?';\n\n        this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET =\n            '[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`';\n\n        this.ERROR_DATASET_INVALID_UID_KEY =\n            '[MixItUp] The specified UID key \"${uidKey}\" is not present on one or more dataset items';\n\n        this.ERROR_DATASET_DUPLICATE_UID =\n            '[MixItUp] The UID \"${uid}\" was found on two or more dataset items. UIDs must be unique.';\n\n        this.ERROR_INSERT_INVALID_ARGUMENTS =\n            '[MixItUp] Please provider either an index or a sibling and position to insert, not both';\n\n        this.ERROR_INSERT_PREEXISTING_ELEMENT =\n            '[MixItUp] An element to be inserted already exists in the container';\n\n        this.ERROR_FILTER_INVALID_ARGUMENTS =\n            '[MixItUp] Please provide either a selector or collection `.filter()`, not both';\n\n        this.ERROR_DATASET_NOT_SET =\n            '[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`';\n\n        this.ERROR_DATASET_PRERENDERED_MISMATCH =\n            '[MixItUp] `load.dataset` does not match pre-rendered targets';\n\n        this.ERROR_DATASET_RENDERER_NOT_SET =\n            '[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`';\n\n        /* Warnings\n        ----------------------------------------------------------------------------- */\n\n        this.WARNING_FACTORY_PREEXISTING_INSTANCE =\n            '[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored.' +\n            ' If you wish to perform additional methods on this instance, please create a reference.';\n\n        this.WARNING_INSERT_NO_ELEMENTS =\n            '[MixItUp] WARNING: No valid elements were passed to `.insert()`';\n\n        this.WARNING_REMOVE_NO_ELEMENTS =\n            '[MixItUp] WARNING: No valid elements were passed to `.remove()`';\n\n        this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL =\n            '[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the ' +\n            'queue is full or queuing is disabled.';\n\n        this.WARNING_GET_OPERATION_INSTANCE_BUSY =\n            '[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.';\n\n        this.WARNING_NO_PROMISE_IMPLEMENTATION =\n            '[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install' +\n            ' an ES6 Promise polyfill.';\n\n        this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES =\n            '[MixItUp] WARNING: The requested sorting data attribute \"${attribute}\" was not present on one or more target elements' +\n            ' which may product unexpected sort output';\n\n        this.callActions('afterConstruct');\n\n        this.compileTemplates();\n\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Messages);\n\n    mixitup.Messages.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Messages.prototype.constructor = mixitup.Messages;\n\n    /**\n     * @return {void}\n     */\n\n    mixitup.Messages.prototype.compileTemplates = function() {\n        var errorKey        = '';\n        var errorMessage    = '';\n\n        for (errorKey in this) {\n            if (typeof (errorMessage = this[errorKey]) !== 'string') continue;\n\n            this[h.camelCase(errorKey)] = h.template(errorMessage);\n        }\n    };\n\n    mixitup.messages = new mixitup.Messages();\n\n    /**\n     * @constructor\n     * @memberof    mixitup\n     * @private\n     * @since       3.0.0\n     * @param       {mixitup.Mixer} mixer\n     */\n\n    mixitup.Facade = function Mixer(mixer) {\n        mixitup.Base.call(this);\n\n        this.callActions('beforeConstruct', arguments);\n\n        this.configure          = mixer.configure.bind(mixer);\n        this.show               = mixer.show.bind(mixer);\n        this.hide               = mixer.hide.bind(mixer);\n        this.filter             = mixer.filter.bind(mixer);\n        this.toggleOn           = mixer.toggleOn.bind(mixer);\n        this.toggleOff          = mixer.toggleOff.bind(mixer);\n        this.sort               = mixer.sort.bind(mixer);\n        this.changeLayout       = mixer.changeLayout.bind(mixer);\n        this.multimix           = mixer.multimix.bind(mixer);\n        this.dataset            = mixer.dataset.bind(mixer);\n        this.tween              = mixer.tween.bind(mixer);\n        this.insert             = mixer.insert.bind(mixer);\n        this.insertBefore       = mixer.insertBefore.bind(mixer);\n        this.insertAfter        = mixer.insertAfter.bind(mixer);\n        this.prepend            = mixer.prepend.bind(mixer);\n        this.append             = mixer.append.bind(mixer);\n        this.remove             = mixer.remove.bind(mixer);\n        this.destroy            = mixer.destroy.bind(mixer);\n        this.forceRefresh       = mixer.forceRefresh.bind(mixer);\n        this.forceRender        = mixer.forceRender.bind(mixer);\n        this.isMixing           = mixer.isMixing.bind(mixer);\n        this.getOperation       = mixer.getOperation.bind(mixer);\n        this.getConfig          = mixer.getConfig.bind(mixer);\n        this.getState           = mixer.getState.bind(mixer);\n\n        this.callActions('afterConstruct', arguments);\n\n        h.freeze(this);\n        h.seal(this);\n    };\n\n    mixitup.BaseStatic.call(mixitup.Facade);\n\n    mixitup.Facade.prototype = Object.create(mixitup.Base.prototype);\n\n    mixitup.Facade.prototype.constructor = mixitup.Facade;\n\n    if (typeof exports === 'object' && typeof module === 'object') {\n        module.exports = mixitup;\n    } else if (typeof define === 'function' && define.amd) {\n        define(function() {\n            return mixitup;\n        });\n    } else if (typeof window.mixitup === 'undefined' || typeof window.mixitup !== 'function') {\n        window.mixitup = mixitup;\n    }\n    mixitup.BaseStatic.call(mixitup.constructor);\n\n    mixitup.NAME = 'mixitup';\n    mixitup.CORE_VERSION = '3.2.1';\n})(window);","(function ($) {\n\t$.hideShowMenu = function (element, options) {\n\n\t\tvar $c = $(element),\n\n\t\t\thideShowMenu = (function ($c, o) {\n\t\t\t\tvar defaults = {\n\t\t\t\t\t\n\t\t\t\t}; \n\n\t\t\t\tvar _o = {},\n\t\t\t\t\t$hideShowMenu = null\n\t\t\t\t;\n\n\t\t\t\tvar _InitObjects = function () {\n\t\t\t\t\t_o = $.extend({}, defaults, o);\n\t\t\t\t},\n\n\t\t\t\t_TitleAtt = function () {\n\t\t\t\t\t$('.category').click(function(){\n\t\t\t\t\t\tvar title = $(this).attr('data-title');\n\t\t\t\t\t\t$(this).parent().parent().parent().find('.dynamic-title').text(title);\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t_BindEvents = function () {\n\t\t\t\t\t$('.down-arrow, .dynamic-title').click(function(){\n\t\t\t\t\t\t$(this).parent().siblings('.category-select').slideToggle();\n\t\t\t\t\t});\n\t\t\t\t\t_TitleAtt();\n\t\t\t\t},\n\n\t\t\t\tinit = (function() {\n\t\t\t\t\t_InitObjects();\n\t\t\t\t\t_BindEvents();\n\t\t\t\t})();\n\t\t\t}) ($c, options);\n\t};\n\n\t$.fn.hideShowMenu = function (options) {\n\t\treturn this.each(function () {\n\t\t\tif (undefined === $(this).data('hideShowMenu')) {\n\t\t\t\tvar plugin = new $.hideShowMenu(this, options);\n\t\t\t\t$(this).data('hideShowMenu', plugin);\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);","(function ($) {\n\t$.singleGMap = function (element, options) {\n\n\t\tvar $c = $(element),\n\n\t\t\tsingleGMap = (function ($c, o) {\n\t\t\t\tvar defaults = {\n\t\t\t\t\t'mapStyles' : [{\"featureType\":\"all\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"saturation\":36},{\"color\":\"#818181\"},{\"lightness\":40}]},{\"featureType\":\"all\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"visibility\":\"on\"},{\"color\":\"#000000\"},{\"lightness\":16}]},{\"featureType\":\"all\",\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":20}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":17},{\"weight\":1.2}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#333333\"},{\"lightness\":20}]},{\"featureType\":\"poi\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#272727\"},{\"lightness\":21}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":17}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":29},{\"weight\":0.2}]},{\"featureType\":\"road.arterial\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":18}]},{\"featureType\":\"road.local\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#1f1f1f\"},{\"lightness\":16}]},{\"featureType\":\"transit\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#000000\"},{\"lightness\":19}]},{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#505050\"},{\"lightness\":17}]}]\n\t\t\t\t}; \n\n\t\t\t\tvar _o = {},\n\t\t\t\t\t$singleGMap = null\n\t\t\t\t;\n\n\t\t\t\tvar _InitObjects = function () {\n\t\t\t\t\t_o = $.extend({}, defaults, o);\n\t\t\t\t},\n\n\t\t\t\t_InitMap = function () {\n\t\t\t\t\tvar map;\n\t\t\t\t\tvar lat = $c.attr('data-lat');\n\t\t\t\t\tvar long = $c.attr('data-long');\n\t\t\t\t\tvar coords = new google.maps.LatLng(parseFloat(lat),parseFloat(long));\n\n\t\t\t\t\tmap = new google.maps.Map(document.getElementById('single-map'), {\n\t\t\t\t\t\tcenter: coords,\n\t\t\t\t\t\tzoom: 14,\n\t\t\t\t\t\tscrollwheel: false,\n\t\t\t\t\t\tstyles: _o.mapStyles\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t_AddMarker(map);\n\t\t\t\t},\n\n\t\t\t\t_AddMarker = function (map) {\n\t\t\t\t\tvar lat = $c.attr('data-lat');\n\t\t\t\t\tvar long = $c.attr('data-long');\n\n\t\t\t\t\tvar coords = new google.maps.LatLng(parseFloat(lat),parseFloat(long));\n\t\t\t\t\tvar marker = new google.maps.Marker({\n\t\t\t\t\t\tposition: coords,\n\t\t\t\t\t\tmap: map\n\t\t\t\t\t});\n\t\t\t\t\t// marker.addListener('click', function() {\n\t\t\t\t\t// \tinfowindow.open(map, marker);\n\t\t\t\t\t// });\n\t\t\t\t},\n\n\t\t\t\t_BindEvents = function () {\n\t\t\t\t\t\n\t\t\t\t},\n\n\t\t\t\tinit = (function() {\n\t\t\t\t\t_InitObjects();\n\t\t\t\t\t_BindEvents();\n\t\t\t\t\t_InitMap();\n\t\t\t\t})();\n\t\t\t}) ($c, options);\n\t};\n\n\t$.fn.singleGMap = function (options) {\n\t\treturn this.each(function () {\n\t\t\tif (undefined === $(this).data('singleGMap')) {\n\t\t\t\tvar plugin = new $.singleGMap(this, options);\n\t\t\t\t$(this).data('singleGMap', plugin);\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);","jQuery('.hero-slider').on('beforeChange', function(event, slick, currentSlide, nextSlide){\n\tvar slide = '[data-slick-index=\"' + nextSlide + '\"]';\n\tvar credit = jQuery(slide).attr('data-credit');\n\tjQuery('#credit').html(credit);\n});\n\n(function($){\n\t$('.hero-slider').slick({\n\t\tinfinite: true,\n\t\tslidesToShow: 1,\n\t\tfade:true,\n\t\tpauseOnHover:false,\n\t\tautoplay:true,\n\t\tautoplaySpeed:6000,\n\t\tarrows:false\n\t});\n})(jQuery);","jQuery(function($) {\n  $('a[href*=\\\\#]:not([href=\\\\#])').click(function() {\n    if (location.pathname.replace(/^\\//,'') == this.pathname.replace(/^\\//,'') && location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');\n      if (target.length) {\n        $('html,body').animate({\n          scrollTop: target.offset().top\n        }, 1000);\n        return false;\n      }\n    }\n  });\n});","(function ($) {\n\t$(document).ready(function(){\n\t\tif ($('.sticky-cta').length !== 0) {\n\n\t\t\tvar trigger = $('.sticky-cta').attr('data-trigger');\n\t\t\tvar duration = $('.sticky-cta').attr('data-duration');\n\n\t\t\tvar controller = new ScrollMagic.Controller();\n\t\t\tvar scene = new ScrollMagic.Scene({triggerElement: trigger, duration: duration})\n\t\t\t\t.setPin(\".sticky-cta\")\n\t\t\t\t.addTo(controller);\n\t\t}\n\t});\n\n\t$(document).ready(function(){\n\t\tif ($('.sticky-calc-cta').length !== 0) {\n\n\t\t\tvar duration = $('.event-content').height() - $('.sticky-calc-cta').height();\n\t\t\tvar trigger = $('.sticky-calc-cta').attr('data-trigger');\n\t\t\tvar width = $(window).width();\n\n\t\t\tfunction getDuration () {\n\t\t\t\tscene.duration = $('.event-content').height() - $('.sticky-calc-cta').height();\n\t\t\t}\n\n\t\t\tfunction checkWidth () {\n\t\t\t\tvar width = $(window).width();\n\n\t\t\t\tif (width <= 900) {\n\t\t\t\t\tscene.destroy();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (width >= 900) {\n\t\t\t\tvar controller = new ScrollMagic.Controller();\n\t\t\t\tvar scene = new ScrollMagic.Scene({triggerElement: trigger, duration: duration})\n\t\t\t\t\t.setPin(\".sticky-calc-cta\")\n\t\t\t\t\t.addTo(controller);\n\t\t\t}\n\n\t\t\t$(window).resize(function(){\n\t\t\t\tcheckWidth();\n\t\t\t\tgetDuration();\n\t\t\t});\n\t\t}\n\t});\n})(jQuery);","jQuery('.responsive').bgResponsiveImage();\njQuery('#menu-toggle').menu();\njQuery('#map').gMap();\njQuery('#single-map').singleGMap();\njQuery('.location-selector').locationSelector();\njQuery('#join-sticky-footer').formModal();\njQuery('.palette-nav-item').menuClick();\njQuery('.category-select').hideShowMenu();\nvar mixer = mixitup('.tenant-card-section');\n\n\n","/* ========================================================================\n * DOM-based Routing\n * Based on http://goo.gl/EUTi53 by Paul Irish\n *\n * Only fires on body classes that match. If a body class contains a dash,\n * replace the dash with an underscore when adding it to the object below.\n *\n * .noConflict()\n * The routing is enclosed within an anonymous function so that you can\n * always reference jQuery with $, even when in .noConflict() mode.\n * ======================================================================== */\n\n(function($) {\n\n  // Use this variable to set up the common and page specific functions. If you\n  // rename this variable, you will also need to rename the namespace below.\n  var Sage = {\n    // All pages\n    'common': {\n      init: function() {\n        \n      },\n      finalize: function() {\n        // JavaScript to be fired on all pages, after page specific JS is fired\n      }\n    },\n    // Home page\n    'home': {\n      init: function() {\n        // JavaScript to be fired on the home page\n      },\n      finalize: function() {\n        // JavaScript to be fired on the home page, after the init JS\n      }\n    },\n    // About us page, note the change from about-us to about_us.\n    'about_us': {\n      init: function() {\n        // JavaScript to be fired on the about us page\n      }\n    }\n  };\n\n  // The routing fires all common scripts, followed by the page specific scripts.\n  // Add additional events for more control over timing e.g. a finalize event\n  var UTIL = {\n    fire: function(func, funcname, args) {\n      var fire;\n      var namespace = Sage;\n      funcname = (funcname === undefined) ? 'init' : funcname;\n      fire = func !== '';\n      fire = fire && namespace[func];\n      fire = fire && typeof namespace[func][funcname] === 'function';\n\n      if (fire) {\n        namespace[func][funcname](args);\n      }\n    },\n    loadEvents: function() {\n      // Fire common init JS\n      UTIL.fire('common');\n\n      // Fire page-specific init JS, and then finalize JS\n      $.each(document.body.className.replace(/-/g, '_').split(/\\s+/), function(i, classnm) {\n        UTIL.fire(classnm);\n        UTIL.fire(classnm, 'finalize');\n      });\n\n      // Fire common finalize JS\n      UTIL.fire('common', 'finalize');\n    }\n  };\n\n  // Load Events\n  $(document).ready(UTIL.loadEvents);\n\n})(jQuery); // Fully reference jQuery after this point.\n"],"sourceRoot":"assets/scripts/"}